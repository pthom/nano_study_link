// Part of ImGui Bundle - MIT License - Copyright (c) 2022-2024 Pascal Thomet - https://github.com/pthom/imgui_bundle
#include <nanobind/nanobind.h>
#include <nanobind/trampoline.h>
#include <nanobind/stl/array.h>
#include <nanobind/stl/string.h>
#include <nanobind/stl/vector.h>
#include <nanobind/stl/optional.h>
#include <nanobind/stl/function.h>
#include <nanobind/stl/shared_ptr.h>
#include <nanobind/stl/unique_ptr.h>
#include <nanobind/stl/map.h>
#include <nanobind/stl/tuple.h>
#include <nanobind/make_iterator.h>
#include <nanobind/ndarray.h>


namespace nb = nanobind;


#include "imgui.h"
#include "imgui_internal.h"

using uint = unsigned int;
using uchar = unsigned char;


// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  AUTOGENERATED CODE !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// <litgen_glue_code>  // Autogenerated code below! Do not edit!

// </litgen_glue_code> // Autogenerated code end
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  AUTOGENERATED CODE END !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


void nanobind_imgui_part1(nb::module_& m)
{
    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  AUTOGENERATED CODE !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    // <litgen_pydef> // Autogenerated code below! Do not edit!
    ////////////////////    <generated_from:imgui.h>    ////////////////////
    // #ifdef IMGUI_BUNDLE_PYTHON_API
    //
    // #endif
    //
    // #ifdef IMGUI_BUNDLE_PYTHON_API
    //
    // #endif
    //
    // #ifndef IMGUI_DISABLE
    //
    // #ifdef IMGUI_BUNDLE_PYTHON_API
    //
    // #else
    //
    // #endif
    //


    auto pyClassImVec2 =
        nb::class_<ImVec2>
            (m, "ImVec2", "")
        .def_rw("x", &ImVec2::x, "")
        .def_rw("y", &ImVec2::y, "")
        .def(nb::init<>())
        .def(nb::init<float, float>(),
            nb::arg("_x"), nb::arg("_y"))
        .def("__getitem__",
            nb::overload_cast<size_t>(&ImVec2::operator[]),
            nb::arg("idx"),
            "(private API)\n\n We very rarely use this [] operator, so the assert overhead is fine.",
            nb::rv_policy::reference)
        .def("__getitem__",
            nb::overload_cast<size_t>(&ImVec2::operator[], nb::const_),
            nb::arg("idx"),
            "(private API)")
        // #ifdef IMGUI_BUNDLE_PYTHON_API
        //
        .def("to_dict",
            &ImVec2::to_dict, "(private API)")
        .def_static("from_dict",
            &ImVec2::from_dict,
            nb::arg("d"),
            "(private API)")
        // #endif
        //
        .def("__copy__",  [](const ImVec2 &self) {
            return ImVec2(self);
        })    ;


    auto pyClassImVec4 =
        nb::class_<ImVec4>
            (m, "ImVec4", "ImVec4: 4D vector used to store clipping rectangles, colors etc. [Compile-time configurable type]")
        .def_rw("x", &ImVec4::x, "")
        .def_rw("y", &ImVec4::y, "")
        .def_rw("z", &ImVec4::z, "")
        .def_rw("w", &ImVec4::w, "")
        .def(nb::init<>())
        .def(nb::init<float, float, float, float>(),
            nb::arg("_x"), nb::arg("_y"), nb::arg("_z"), nb::arg("_w"))
        // #ifdef IMGUI_BUNDLE_PYTHON_API
        //
        .def("to_dict",
            &ImVec4::to_dict, "(private API)")
        .def_static("from_dict",
            &ImVec4::from_dict,
            nb::arg("d"),
            "(private API)")
        // #endif
        //
        .def("__copy__",  [](const ImVec4 &self) {
            return ImVec4(self);
        })    ;


    m.def("create_context",
        ImGui::CreateContext,
        nb::arg("shared_font_atlas") = nb::none(),
        nb::rv_policy::reference);

    m.def("destroy_context",
        ImGui::DestroyContext,
        nb::arg("ctx") = nb::none(),
        "None = destroy current context");

    m.def("get_current_context",
        ImGui::GetCurrentContext, nb::rv_policy::reference);

    m.def("set_current_context",
        ImGui::SetCurrentContext, nb::arg("ctx"));

    m.def("get_io",
        ImGui::GetIO,
        "access the ImGuiIO structure (mouse/keyboard/gamepad inputs, time, various configuration options/flags)",
        nb::rv_policy::reference);

    m.def("get_platform_io",
        ImGui::GetPlatformIO,
        "access the ImGuiPlatformIO structure (mostly hooks/functions to connect to platform/renderer and OS Clipboard, IME etc.)",
        nb::rv_policy::reference);

    m.def("get_style",
        ImGui::GetStyle,
        "access the Style structure (colors, sizes). Always use PushStyleColor(), PushStyleVar() to modify style mid-frame!",
        nb::rv_policy::reference);

    m.def("new_frame",
        ImGui::NewFrame, "start a new Dear ImGui frame, you can submit any command from this point until Render()/EndFrame().");

    m.def("end_frame",
        ImGui::EndFrame, "ends the Dear ImGui frame. automatically called by Render(). If you don't need to render data (skipping rendering) you may call EndFrame() without Render()... but you'll have wasted CPU already! If you don't need to render, better to not create any windows and not call NewFrame() at all!");

    m.def("render",
        ImGui::Render, "ends the Dear ImGui frame, finalize the draw data. You can then get call GetDrawData().");

    m.def("get_draw_data",
        ImGui::GetDrawData,
        "valid after Render() and until the next call to NewFrame(). this is what you have to render.",
        nb::rv_policy::reference);

    m.def("show_demo_window",
        [](std::optional<bool> p_open = std::nullopt) -> std::optional<bool>
        {
            auto ShowDemoWindow_adapt_modifiable_immutable_to_return = [](std::optional<bool> p_open = std::nullopt) -> std::optional<bool>
            {
                bool * p_open_adapt_modifiable = nullptr;
                if (p_open.has_value())
                    p_open_adapt_modifiable = & (*p_open);

                ImGui::ShowDemoWindow(p_open_adapt_modifiable);
                return p_open;
            };

            return ShowDemoWindow_adapt_modifiable_immutable_to_return(p_open);
        },
        nb::arg("p_open") = nb::none(),
        "create Demo window. demonstrate most ImGui features. call this to learn about the library! try to make it always available in your application!");

    m.def("show_metrics_window",
        [](std::optional<bool> p_open = std::nullopt) -> std::optional<bool>
        {
            auto ShowMetricsWindow_adapt_modifiable_immutable_to_return = [](std::optional<bool> p_open = std::nullopt) -> std::optional<bool>
            {
                bool * p_open_adapt_modifiable = nullptr;
                if (p_open.has_value())
                    p_open_adapt_modifiable = & (*p_open);

                ImGui::ShowMetricsWindow(p_open_adapt_modifiable);
                return p_open;
            };

            return ShowMetricsWindow_adapt_modifiable_immutable_to_return(p_open);
        },
        nb::arg("p_open") = nb::none(),
        "create Metrics/Debugger window. display Dear ImGui internals: windows, draw commands, various internal state, etc.");

    m.def("show_debug_log_window",
        [](std::optional<bool> p_open = std::nullopt) -> std::optional<bool>
        {
            auto ShowDebugLogWindow_adapt_modifiable_immutable_to_return = [](std::optional<bool> p_open = std::nullopt) -> std::optional<bool>
            {
                bool * p_open_adapt_modifiable = nullptr;
                if (p_open.has_value())
                    p_open_adapt_modifiable = & (*p_open);

                ImGui::ShowDebugLogWindow(p_open_adapt_modifiable);
                return p_open;
            };

            return ShowDebugLogWindow_adapt_modifiable_immutable_to_return(p_open);
        },
        nb::arg("p_open") = nb::none(),
        "create Debug Log window. display a simplified log of important dear imgui events.");

    m.def("show_id_stack_tool_window",
        [](std::optional<bool> p_open = std::nullopt) -> std::optional<bool>
        {
            auto ShowIDStackToolWindow_adapt_modifiable_immutable_to_return = [](std::optional<bool> p_open = std::nullopt) -> std::optional<bool>
            {
                bool * p_open_adapt_modifiable = nullptr;
                if (p_open.has_value())
                    p_open_adapt_modifiable = & (*p_open);

                ImGui::ShowIDStackToolWindow(p_open_adapt_modifiable);
                return p_open;
            };

            return ShowIDStackToolWindow_adapt_modifiable_immutable_to_return(p_open);
        },
        nb::arg("p_open") = nb::none(),
        "create Stack Tool window. hover items with mouse to query information about the source of their unique ID.");

    m.def("show_about_window",
        [](std::optional<bool> p_open = std::nullopt) -> std::optional<bool>
        {
            auto ShowAboutWindow_adapt_modifiable_immutable_to_return = [](std::optional<bool> p_open = std::nullopt) -> std::optional<bool>
            {
                bool * p_open_adapt_modifiable = nullptr;
                if (p_open.has_value())
                    p_open_adapt_modifiable = & (*p_open);

                ImGui::ShowAboutWindow(p_open_adapt_modifiable);
                return p_open;
            };

            return ShowAboutWindow_adapt_modifiable_immutable_to_return(p_open);
        },
        nb::arg("p_open") = nb::none(),
        "create About window. display Dear ImGui version, credits and build/system information.");

    m.def("show_style_editor",
        ImGui::ShowStyleEditor,
        nb::arg("ref") = nb::none(),
        "add style editor block (not a window). you can pass in a reference ImGuiStyle structure to compare to, revert to and save to (else it uses the default style)");

    m.def("show_style_selector",
        ImGui::ShowStyleSelector,
        nb::arg("label"),
        "add style selector block (not a window), essentially a combo listing the default styles.");

    m.def("show_font_selector",
        ImGui::ShowFontSelector,
        nb::arg("label"),
        "add font selector block (not a window), essentially a combo listing the loaded fonts.");

    m.def("show_user_guide",
        ImGui::ShowUserGuide, "add basic help/info block (not a window): how to manipulate ImGui as an end-user (mouse/keyboard controls).");

    m.def("get_version",
        ImGui::GetVersion,
        "get the compiled version string e.g. \"1.80 WIP\" (essentially the value for IMGUI_VERSION from the compiled version of imgui.cpp)",
        nb::rv_policy::reference);

    m.def("style_colors_dark",
        ImGui::StyleColorsDark,
        nb::arg("dst") = nb::none(),
        "new, recommended style (default)");

    m.def("style_colors_light",
        ImGui::StyleColorsLight,
        nb::arg("dst") = nb::none(),
        "best used with borders and a custom, thicker font");

    m.def("style_colors_classic",
        ImGui::StyleColorsClassic,
        nb::arg("dst") = nb::none(),
        "classic imgui style");

    m.def("begin",
        [](const char * name, std::optional<bool> p_open = std::nullopt, ImGuiWindowFlags flags = 0) -> std::tuple<bool, std::optional<bool>>
        {
            auto Begin_adapt_modifiable_immutable_to_return = [](const char * name, std::optional<bool> p_open = std::nullopt, ImGuiWindowFlags flags = 0) -> std::tuple<bool, std::optional<bool>>
            {
                bool * p_open_adapt_modifiable = nullptr;
                if (p_open.has_value())
                    p_open_adapt_modifiable = & (*p_open);

                bool r = ImGui::Begin(name, p_open_adapt_modifiable, flags);
                return std::make_tuple(r, p_open);
            };

            return Begin_adapt_modifiable_immutable_to_return(name, p_open, flags);
        },     nb::arg("name"), nb::arg("p_open") = nb::none(), nb::arg("flags") = 0);

    m.def("end",
        ImGui::End);

    m.def("begin_child",
        [](const char * str_id, const std::optional<const ImVec2> & size = std::nullopt, ImGuiChildFlags child_flags = 0, ImGuiWindowFlags window_flags = 0) -> bool
        {
            auto BeginChild_adapt_mutable_param_with_default_value = [](const char * str_id, const std::optional<const ImVec2> & size = std::nullopt, ImGuiChildFlags child_flags = 0, ImGuiWindowFlags window_flags = 0) -> bool
            {

                const ImVec2& size_or_default = [&]() -> const ImVec2 {
                    if (size.has_value())
                        return size.value();
                    else
                        return ImVec2(0, 0);
                }();

                auto lambda_result = ImGui::BeginChild(str_id, size_or_default, child_flags, window_flags);
                return lambda_result;
            };

            return BeginChild_adapt_mutable_param_with_default_value(str_id, size, child_flags, window_flags);
        },
        nb::arg("str_id"), nb::arg("size") = nb::none(), nb::arg("child_flags") = 0, nb::arg("window_flags") = 0,
        "---\nPython bindings defaults:\n    If size is None, then its default value will be: ImVec2(0, 0)");

    m.def("begin_child",
        [](ImGuiID id, const std::optional<const ImVec2> & size = std::nullopt, ImGuiChildFlags child_flags = 0, ImGuiWindowFlags window_flags = 0) -> bool
        {
            auto BeginChild_adapt_mutable_param_with_default_value = [](ImGuiID id, const std::optional<const ImVec2> & size = std::nullopt, ImGuiChildFlags child_flags = 0, ImGuiWindowFlags window_flags = 0) -> bool
            {

                const ImVec2& size_or_default = [&]() -> const ImVec2 {
                    if (size.has_value())
                        return size.value();
                    else
                        return ImVec2(0, 0);
                }();

                auto lambda_result = ImGui::BeginChild(id, size_or_default, child_flags, window_flags);
                return lambda_result;
            };

            return BeginChild_adapt_mutable_param_with_default_value(id, size, child_flags, window_flags);
        },
        nb::arg("id_"), nb::arg("size") = nb::none(), nb::arg("child_flags") = 0, nb::arg("window_flags") = 0,
        "---\nPython bindings defaults:\n    If size is None, then its default value will be: ImVec2(0, 0)");

    m.def("end_child",
        ImGui::EndChild);

    m.def("is_window_appearing",
        ImGui::IsWindowAppearing);

    m.def("is_window_collapsed",
        ImGui::IsWindowCollapsed);

    m.def("is_window_focused",
        ImGui::IsWindowFocused,
        nb::arg("flags") = 0,
        "is current window focused? or its root/child, depending on flags. see flags for options.");

    m.def("is_window_hovered",
        ImGui::IsWindowHovered,
        nb::arg("flags") = 0,
        "is current window hovered and hoverable (e.g. not blocked by a popup/modal)? See ImGuiHoveredFlags_ for options. IMPORTANT: If you are trying to check whether your mouse should be dispatched to Dear ImGui or to your underlying app, you should not use this function! Use the 'io.WantCaptureMouse' boolean for that! Refer to FAQ entry \"How can I tell whether to dispatch mouse/keyboard to Dear ImGui or my application?\" for details.");

    m.def("get_window_draw_list",
        nb::overload_cast<>(ImGui::GetWindowDrawList),
        "get draw list associated to the current window, to append your own drawing primitives",
        nb::rv_policy::reference);

    m.def("get_window_dpi_scale",
        ImGui::GetWindowDpiScale, "get DPI scale currently associated to the current window's viewport.");

    m.def("get_window_pos",
        ImGui::GetWindowPos, "get current window position in screen space (IT IS UNLIKELY YOU EVER NEED TO USE THIS. Consider always using GetCursorScreenPos() and GetContentRegionAvail() instead)");

    m.def("get_window_size",
        ImGui::GetWindowSize, "get current window size (IT IS UNLIKELY YOU EVER NEED TO USE THIS. Consider always using GetCursorScreenPos() and GetContentRegionAvail() instead)");

    m.def("get_window_width",
        ImGui::GetWindowWidth, "get current window width (IT IS UNLIKELY YOU EVER NEED TO USE THIS). Shortcut for GetWindowSize().x.");

    m.def("get_window_height",
        ImGui::GetWindowHeight, "get current window height (IT IS UNLIKELY YOU EVER NEED TO USE THIS). Shortcut for GetWindowSize().y.");

    m.def("get_window_viewport",
        ImGui::GetWindowViewport,
        "get viewport currently associated to the current window.",
        nb::rv_policy::reference);

    m.def("set_next_window_pos",
        [](const ImVec2 & pos, ImGuiCond cond = 0, const std::optional<const ImVec2> & pivot = std::nullopt)
        {
            auto SetNextWindowPos_adapt_mutable_param_with_default_value = [](const ImVec2 & pos, ImGuiCond cond = 0, const std::optional<const ImVec2> & pivot = std::nullopt)
            {

                const ImVec2& pivot_or_default = [&]() -> const ImVec2 {
                    if (pivot.has_value())
                        return pivot.value();
                    else
                        return ImVec2(0, 0);
                }();

                ImGui::SetNextWindowPos(pos, cond, pivot_or_default);
            };

            SetNextWindowPos_adapt_mutable_param_with_default_value(pos, cond, pivot);
        },
        nb::arg("pos"), nb::arg("cond") = 0, nb::arg("pivot") = nb::none(),
        "---\nPython bindings defaults:\n    If pivot is None, then its default value will be: ImVec2(0, 0)\n\n set next window position. call before Begin(). use pivot=(0.5,0.5) to center on given point, etc.");

    m.def("set_next_window_size",
        ImGui::SetNextWindowSize,
        nb::arg("size"), nb::arg("cond") = 0,
        "set next window size. set axis to 0.0 to force an auto-fit on this axis. call before Begin()");

    m.def("set_next_window_size_constraints",
        ImGui::SetNextWindowSizeConstraints,
        nb::arg("size_min"), nb::arg("size_max"), nb::arg("custom_callback") = nb::none(), nb::arg("custom_callback_data") = nb::none(),
        "set next window size limits. use 0.0 or FLT_MAX if you don't want limits. Use -1 for both min and max of same axis to preserve current size (which itself is a constraint). Use callback to apply non-trivial programmatic constraints.");

    m.def("set_next_window_content_size",
        ImGui::SetNextWindowContentSize,
        nb::arg("size"),
        "set next window content size (~ scrollable client area, which enforce the range of scrollbars). Not including window decorations (title bar, menu bar, etc.) nor WindowPadding. set an axis to 0.0 to leave it automatic. call before Begin()");

    m.def("set_next_window_collapsed",
        ImGui::SetNextWindowCollapsed,
        nb::arg("collapsed"), nb::arg("cond") = 0,
        "set next window collapsed state. call before Begin()");

    m.def("set_next_window_focus",
        ImGui::SetNextWindowFocus, "set next window to be focused / top-most. call before Begin()");

    m.def("set_next_window_scroll",
        ImGui::SetNextWindowScroll,
        nb::arg("scroll"),
        "set next window scrolling value (use < 0.0 to not affect a given axis).");

    m.def("set_next_window_bg_alpha",
        ImGui::SetNextWindowBgAlpha,
        nb::arg("alpha"),
        "set next window background color alpha. helper to easily override the Alpha component of ImGuiCol_WindowBg/ChildBg/PopupBg. you may also use ImGuiWindowFlags_NoBackground.");

    m.def("set_next_window_viewport",
        ImGui::SetNextWindowViewport,
        nb::arg("viewport_id"),
        "set next window viewport");

    m.def("set_window_pos",
        nb::overload_cast<const ImVec2 &, ImGuiCond>(ImGui::SetWindowPos),
        nb::arg("pos"), nb::arg("cond") = 0,
        "(not recommended) set current window position - call within Begin()/End(). prefer using SetNextWindowPos(), as this may incur tearing and side-effects.");

    m.def("set_window_size",
        nb::overload_cast<const ImVec2 &, ImGuiCond>(ImGui::SetWindowSize),
        nb::arg("size"), nb::arg("cond") = 0,
        "(not recommended) set current window size - call within Begin()/End(). set to ImVec2(0, 0) to force an auto-fit. prefer using SetNextWindowSize(), as this may incur tearing and minor side-effects.");

    m.def("set_window_collapsed",
        nb::overload_cast<bool, ImGuiCond>(ImGui::SetWindowCollapsed),
        nb::arg("collapsed"), nb::arg("cond") = 0,
        "(not recommended) set current window collapsed state. prefer using SetNextWindowCollapsed().");

    m.def("set_window_focus",
        nb::overload_cast<>(ImGui::SetWindowFocus), "(not recommended) set current window to be focused / top-most. prefer using SetNextWindowFocus().");

    m.def("set_window_font_scale",
        ImGui::SetWindowFontScale,
        nb::arg("scale"),
        "[OBSOLETE] set font scale. Adjust IO.FontGlobalScale if you want to scale all windows. This is an old API! For correct scaling, prefer to reload font + rebuild ImFontAtlas + call style.ScaleAllSizes().");

    m.def("set_window_pos",
        nb::overload_cast<const char *, const ImVec2 &, ImGuiCond>(ImGui::SetWindowPos),
        nb::arg("name"), nb::arg("pos"), nb::arg("cond") = 0,
        "set named window position.");

    m.def("set_window_size",
        nb::overload_cast<const char *, const ImVec2 &, ImGuiCond>(ImGui::SetWindowSize),
        nb::arg("name"), nb::arg("size"), nb::arg("cond") = 0,
        "set named window size. set axis to 0.0 to force an auto-fit on this axis.");

    m.def("set_window_collapsed",
        nb::overload_cast<const char *, bool, ImGuiCond>(ImGui::SetWindowCollapsed),
        nb::arg("name"), nb::arg("collapsed"), nb::arg("cond") = 0,
        "set named window collapsed state");

    m.def("set_window_focus",
        nb::overload_cast<const char *>(ImGui::SetWindowFocus),
        nb::arg("name"),
        "set named window to be focused / top-most. use None to remove focus.");

    m.def("get_scroll_x",
        ImGui::GetScrollX, "get scrolling amount [0 .. GetScrollMaxX()]");

    m.def("get_scroll_y",
        ImGui::GetScrollY, "get scrolling amount [0 .. GetScrollMaxY()]");

    m.def("set_scroll_x",
        nb::overload_cast<float>(ImGui::SetScrollX),
        nb::arg("scroll_x"),
        "set scrolling amount [0 .. GetScrollMaxX()]");

    m.def("set_scroll_y",
        nb::overload_cast<float>(ImGui::SetScrollY),
        nb::arg("scroll_y"),
        "set scrolling amount [0 .. GetScrollMaxY()]");

    m.def("get_scroll_max_x",
        ImGui::GetScrollMaxX, "get maximum scrolling amount ~~ ContentSize.x - WindowSize.x - DecorationsSize.x");

    m.def("get_scroll_max_y",
        ImGui::GetScrollMaxY, "get maximum scrolling amount ~~ ContentSize.y - WindowSize.y - DecorationsSize.y");

    m.def("set_scroll_here_x",
        nb::overload_cast<float>(ImGui::SetScrollHereX),
        nb::arg("center_x_ratio") = 0.5f,
        "adjust scrolling amount to make current cursor position visible. center_x_ratio=0.0: left, 0.5: center, 1.0: right. When using to make a \"default/current item\" visible, consider using SetItemDefaultFocus() instead.");

    m.def("set_scroll_here_y",
        nb::overload_cast<float>(ImGui::SetScrollHereY),
        nb::arg("center_y_ratio") = 0.5f,
        "adjust scrolling amount to make current cursor position visible. center_y_ratio=0.0: top, 0.5: center, 1.0: bottom. When using to make a \"default/current item\" visible, consider using SetItemDefaultFocus() instead.");

    m.def("set_scroll_from_pos_x",
        nb::overload_cast<float, float>(ImGui::SetScrollFromPosX),
        nb::arg("local_x"), nb::arg("center_x_ratio") = 0.5f,
        "adjust scrolling amount to make given position visible. Generally GetCursorStartPos() + offset to compute a valid position.");

    m.def("set_scroll_from_pos_y",
        nb::overload_cast<float, float>(ImGui::SetScrollFromPosY),
        nb::arg("local_y"), nb::arg("center_y_ratio") = 0.5f,
        "adjust scrolling amount to make given position visible. Generally GetCursorStartPos() + offset to compute a valid position.");

    m.def("push_font",
        ImGui::PushFont,
        nb::arg("font"),
        "use None as a shortcut to push default font");

    m.def("pop_font",
        ImGui::PopFont);

    m.def("push_style_color",
        nb::overload_cast<ImGuiCol, ImU32>(ImGui::PushStyleColor),
        nb::arg("idx"), nb::arg("col"),
        "modify a style color. always use this if you modify the style after NewFrame().");

    m.def("push_style_color",
        nb::overload_cast<ImGuiCol, const ImVec4 &>(ImGui::PushStyleColor), nb::arg("idx"), nb::arg("col"));

    m.def("pop_style_color",
        ImGui::PopStyleColor, nb::arg("count") = 1);

    m.def("push_style_var",
        nb::overload_cast<ImGuiStyleVar, float>(ImGui::PushStyleVar),
        nb::arg("idx"), nb::arg("val"),
        "modify a style float variable. always use this if you modify the style after NewFrame()!");

    m.def("push_style_var",
        nb::overload_cast<ImGuiStyleVar, const ImVec2 &>(ImGui::PushStyleVar),
        nb::arg("idx"), nb::arg("val"),
        "modify a style ImVec2 variable. \"");

    m.def("push_style_var_x",
        ImGui::PushStyleVarX,
        nb::arg("idx"), nb::arg("val_x"),
        "modify X component of a style ImVec2 variable. \"");

    m.def("push_style_var_y",
        ImGui::PushStyleVarY,
        nb::arg("idx"), nb::arg("val_y"),
        "modify Y component of a style ImVec2 variable. \"");

    m.def("pop_style_var",
        ImGui::PopStyleVar, nb::arg("count") = 1);

    m.def("push_item_flag",
        ImGui::PushItemFlag,
        nb::arg("option"), nb::arg("enabled"),
        "modify specified shared item flag, e.g. PushItemFlag(ImGuiItemFlags_NoTabStop, True)");

    m.def("pop_item_flag",
        ImGui::PopItemFlag);

    m.def("push_item_width",
        ImGui::PushItemWidth,
        nb::arg("item_width"),
        "push width of items for common large \"item+label\" widgets. >0.0: width in pixels, <0.0 align xx pixels to the right of window (so -FLT_MIN always align width to the right side).");

    m.def("pop_item_width",
        ImGui::PopItemWidth);

    m.def("set_next_item_width",
        ImGui::SetNextItemWidth,
        nb::arg("item_width"),
        "set width of the _next_ common large \"item+label\" widget. >0.0: width in pixels, <0.0 align xx pixels to the right of window (so -FLT_MIN always align width to the right side)");

    m.def("calc_item_width",
        ImGui::CalcItemWidth, "width of item given pushed settings and current cursor position. NOT necessarily the width of last item unlike most 'Item' functions.");

    m.def("push_text_wrap_pos",
        ImGui::PushTextWrapPos,
        nb::arg("wrap_local_pos_x") = 0.0f,
        "push word-wrapping position for Text*() commands. < 0.0: no wrapping; 0.0: wrap to end of window (or column); > 0.0: wrap at 'wrap_pos_x' position in window local space");

    m.def("pop_text_wrap_pos",
        ImGui::PopTextWrapPos);

    m.def("get_font",
        ImGui::GetFont,
        "get current font",
        nb::rv_policy::reference);

    m.def("get_font_size",
        ImGui::GetFontSize, "get current font size (= height in pixels) of current font with current scale applied");

    m.def("get_font_tex_uv_white_pixel",
        ImGui::GetFontTexUvWhitePixel, "get UV coordinate for a white pixel, useful to draw custom shapes via the ImDrawList API");

    m.def("get_color_u32",
        nb::overload_cast<ImGuiCol, float>(ImGui::GetColorU32),
        nb::arg("idx"), nb::arg("alpha_mul") = 1.0f,
        "retrieve given style color with style alpha applied and optional extra alpha multiplier, packed as a 32-bit value suitable for ImDrawList");

    m.def("get_color_u32",
        nb::overload_cast<const ImVec4 &>(ImGui::GetColorU32),
        nb::arg("col"),
        "retrieve given color with style alpha applied, packed as a 32-bit value suitable for ImDrawList");

    m.def("get_color_u32",
        nb::overload_cast<ImU32, float>(ImGui::GetColorU32),
        nb::arg("col"), nb::arg("alpha_mul") = 1.0f,
        "retrieve given color with style alpha applied, packed as a 32-bit value suitable for ImDrawList");

    m.def("get_style_color_vec4",
        ImGui::GetStyleColorVec4,
        nb::arg("idx"),
        "retrieve style color as stored in ImGuiStyle structure. use to feed back into PushStyleColor(), otherwise use GetColorU32() to get style color with style alpha baked in.",
        nb::rv_policy::reference);

    m.def("get_cursor_screen_pos",
        ImGui::GetCursorScreenPos, "cursor position, absolute coordinates. THIS IS YOUR BEST FRIEND (prefer using this rather than GetCursorPos(), also more useful to work with ImDrawList API).");

    m.def("set_cursor_screen_pos",
        ImGui::SetCursorScreenPos,
        nb::arg("pos"),
        "cursor position, absolute coordinates. THIS IS YOUR BEST FRIEND.");

    m.def("get_content_region_avail",
        ImGui::GetContentRegionAvail, "available space from current position. THIS IS YOUR BEST FRIEND.");

    m.def("get_cursor_pos",
        ImGui::GetCursorPos, "[window-local] cursor position in window-local coordinates. This is not your best friend.");

    m.def("get_cursor_pos_x",
        ImGui::GetCursorPosX, "[window-local] \"");

    m.def("get_cursor_pos_y",
        ImGui::GetCursorPosY, "[window-local] \"");

    m.def("set_cursor_pos",
        ImGui::SetCursorPos,
        nb::arg("local_pos"),
        "[window-local] \"");

    m.def("set_cursor_pos_x",
        ImGui::SetCursorPosX,
        nb::arg("local_x"),
        "[window-local] \"");

    m.def("set_cursor_pos_y",
        ImGui::SetCursorPosY,
        nb::arg("local_y"),
        "[window-local] \"");

    m.def("get_cursor_start_pos",
        ImGui::GetCursorStartPos, "[window-local] initial cursor position, in window-local coordinates. Call GetCursorScreenPos() after Begin() to get the absolute coordinates version.");

    m.def("separator",
        ImGui::Separator, "separator, generally horizontal. inside a menu bar or in horizontal layout mode, this becomes a vertical separator.");

    m.def("same_line",
        ImGui::SameLine,
        nb::arg("offset_from_start_x") = 0.0f, nb::arg("spacing") = -1.0f,
        "call between widgets or groups to layout them horizontally. X position given in window coordinates.");

    m.def("new_line",
        ImGui::NewLine, "undo a SameLine() or force a new line when in a horizontal-layout context.");

    m.def("spacing",
        ImGui::Spacing, "add vertical spacing.");

    m.def("dummy",
        ImGui::Dummy,
        nb::arg("size"),
        "add a dummy item of given size. unlike InvisibleButton(), Dummy() won't take the mouse click or be navigable into.");

    m.def("indent",
        ImGui::Indent,
        nb::arg("indent_w") = 0.0f,
        "move content position toward the right, by indent_w, or style.IndentSpacing if indent_w <= 0");

    m.def("unindent",
        ImGui::Unindent,
        nb::arg("indent_w") = 0.0f,
        "move content position back to the left, by indent_w, or style.IndentSpacing if indent_w <= 0");

    m.def("begin_group",
        ImGui::BeginGroup, "lock horizontal starting position");

    m.def("end_group",
        ImGui::EndGroup, "unlock horizontal starting position + capture the whole group bounding box into one \"item\" (so you can use IsItemHovered() or layout primitives such as SameLine() on whole group, etc.)");

    m.def("align_text_to_frame_padding",
        ImGui::AlignTextToFramePadding, "vertically align upcoming text baseline to FramePadding.y so that it will align properly to regularly framed items (call if you have text on a line before a framed item)");

    m.def("get_text_line_height",
        ImGui::GetTextLineHeight, "~ FontSize");

    m.def("get_text_line_height_with_spacing",
        ImGui::GetTextLineHeightWithSpacing, "~ FontSize + style.ItemSpacing.y (distance in pixels between 2 consecutive lines of text)");

    m.def("get_frame_height",
        ImGui::GetFrameHeight, "~ FontSize + style.FramePadding.y * 2");

    m.def("get_frame_height_with_spacing",
        ImGui::GetFrameHeightWithSpacing, "~ FontSize + style.FramePadding.y * 2 + style.ItemSpacing.y (distance in pixels between 2 consecutive lines of framed widgets)");

    m.def("push_id",
        nb::overload_cast<const char *>(ImGui::PushID),
        nb::arg("str_id"),
        "push string into the ID stack (will hash string).");

    m.def("push_id",
        nb::overload_cast<const char *, const char *>(ImGui::PushID),
        nb::arg("str_id_begin"), nb::arg("str_id_end"),
        "push string into the ID stack (will hash string).");

    m.def("push_id",
        nb::overload_cast<const void *>(ImGui::PushID),
        nb::arg("ptr_id"),
        "push pointer into the ID stack (will hash pointer).");

    m.def("push_id",
        nb::overload_cast<int>(ImGui::PushID),
        nb::arg("int_id"),
        "push integer into the ID stack (will hash integer).");

    m.def("pop_id",
        ImGui::PopID, "pop from the ID stack.");

    m.def("get_id",
        nb::overload_cast<const char *>(ImGui::GetID),
        nb::arg("str_id"),
        "calculate unique ID (hash of whole ID stack + given parameter). e.g. if you want to query into ImGuiStorage yourself");

    m.def("get_id",
        nb::overload_cast<const char *, const char *>(ImGui::GetID), nb::arg("str_id_begin"), nb::arg("str_id_end"));

    m.def("get_id",
        nb::overload_cast<const void *>(ImGui::GetID), nb::arg("ptr_id"));

    m.def("get_id",
        nb::overload_cast<int>(ImGui::GetID), nb::arg("int_id"));

    m.def("text_unformatted",
        [](const char * text, std::optional<std::string> text_end = std::nullopt)
        {
            auto TextUnformatted_adapt_const_char_pointer_with_default_null = [](const char * text, std::optional<std::string> text_end = std::nullopt)
            {
                const char * text_end_adapt_default_null = nullptr;
                if (text_end.has_value())
                    text_end_adapt_default_null = text_end.value().c_str();

                ImGui::TextUnformatted(text, text_end_adapt_default_null);
            };

            TextUnformatted_adapt_const_char_pointer_with_default_null(text, text_end);
        },
        nb::arg("text"), nb::arg("text_end") = nb::none(),
        "raw text without formatting. Roughly equivalent to Text(\"%s\", text) but: A) doesn't require null terminated string if 'text_end' is specified, B) it's faster, no memory copy is done, no buffer size limits, recommended for long chunks of text.");

    m.def("text",
        [](const char * fmt)
        {
            auto Text_adapt_variadic_format = [](const char * fmt)
            {
                ImGui::Text("%s", fmt);
            };

            Text_adapt_variadic_format(fmt);
        },
        nb::arg("fmt"),
        "formatted text");

    m.def("text_colored",
        [](const ImVec4 & col, const char * fmt)
        {
            auto TextColored_adapt_variadic_format = [](const ImVec4 & col, const char * fmt)
            {
                ImGui::TextColored(col, "%s", fmt);
            };

            TextColored_adapt_variadic_format(col, fmt);
        },
        nb::arg("col"), nb::arg("fmt"),
        "shortcut for PushStyleColor(ImGuiCol_Text, col); Text(fmt, ...); PopStyleColor();");

    m.def("text_disabled",
        [](const char * fmt)
        {
            auto TextDisabled_adapt_variadic_format = [](const char * fmt)
            {
                ImGui::TextDisabled("%s", fmt);
            };

            TextDisabled_adapt_variadic_format(fmt);
        },
        nb::arg("fmt"),
        "shortcut for PushStyleColor(ImGuiCol_Text, style.Colors[ImGuiCol_TextDisabled]); Text(fmt, ...); PopStyleColor();");

    m.def("text_wrapped",
        [](const char * fmt)
        {
            auto TextWrapped_adapt_variadic_format = [](const char * fmt)
            {
                ImGui::TextWrapped("%s", fmt);
            };

            TextWrapped_adapt_variadic_format(fmt);
        },
        nb::arg("fmt"),
        "shortcut for PushTextWrapPos(0.0); Text(fmt, ...); PopTextWrapPos();. Note that this won't work on an auto-resizing window if there's no other widgets to extend the window width, yoy may need to set a size using SetNextWindowSize().");

    m.def("label_text",
        [](const char * label, const char * fmt)
        {
            auto LabelText_adapt_variadic_format = [](const char * label, const char * fmt)
            {
                ImGui::LabelText(label, "%s", fmt);
            };

            LabelText_adapt_variadic_format(label, fmt);
        },
        nb::arg("label"), nb::arg("fmt"),
        "display text+label aligned the same way as value+label widgets");

    m.def("bullet_text",
        [](const char * fmt)
        {
            auto BulletText_adapt_variadic_format = [](const char * fmt)
            {
                ImGui::BulletText("%s", fmt);
            };

            BulletText_adapt_variadic_format(fmt);
        },
        nb::arg("fmt"),
        "shortcut for Bullet()+Text()");

    m.def("separator_text",
        ImGui::SeparatorText,
        nb::arg("label"),
        "currently: formatted text with an horizontal line");

    m.def("button",
        [](const char * label, const std::optional<const ImVec2> & size = std::nullopt) -> bool
        {
            auto Button_adapt_mutable_param_with_default_value = [](const char * label, const std::optional<const ImVec2> & size = std::nullopt) -> bool
            {

                const ImVec2& size_or_default = [&]() -> const ImVec2 {
                    if (size.has_value())
                        return size.value();
                    else
                        return ImVec2(0, 0);
                }();

                auto lambda_result = ImGui::Button(label, size_or_default);
                return lambda_result;
            };

            return Button_adapt_mutable_param_with_default_value(label, size);
        },
        nb::arg("label"), nb::arg("size") = nb::none(),
        "---\nPython bindings defaults:\n    If size is None, then its default value will be: ImVec2(0, 0)\n\n button");

    m.def("small_button",
        ImGui::SmallButton,
        nb::arg("label"),
        "button with (FramePadding.y == 0) to easily embed within text");

    m.def("invisible_button",
        ImGui::InvisibleButton,
        nb::arg("str_id"), nb::arg("size"), nb::arg("flags") = 0,
        "flexible button behavior without the visuals, frequently useful to build custom behaviors using the public api (along with IsItemActive, IsItemHovered, etc.)");

    m.def("arrow_button",
        ImGui::ArrowButton,
        nb::arg("str_id"), nb::arg("dir"),
        "square button with an arrow shape");

    m.def("checkbox",
        [](const char * label, bool v) -> std::tuple<bool, bool>
        {
            auto Checkbox_adapt_modifiable_immutable_to_return = [](const char * label, bool v) -> std::tuple<bool, bool>
            {
                bool * v_adapt_modifiable = & v;

                bool r = ImGui::Checkbox(label, v_adapt_modifiable);
                return std::make_tuple(r, v);
            };

            return Checkbox_adapt_modifiable_immutable_to_return(label, v);
        },     nb::arg("label"), nb::arg("v"));

    m.def("checkbox_flags",
        [](const char * label, int flags, int flags_value) -> std::tuple<bool, int>
        {
            auto CheckboxFlags_adapt_modifiable_immutable_to_return = [](const char * label, int flags, int flags_value) -> std::tuple<bool, int>
            {
                int * flags_adapt_modifiable = & flags;

                bool r = ImGui::CheckboxFlags(label, flags_adapt_modifiable, flags_value);
                return std::make_tuple(r, flags);
            };

            return CheckboxFlags_adapt_modifiable_immutable_to_return(label, flags, flags_value);
        },     nb::arg("label"), nb::arg("flags"), nb::arg("flags_value"));

    m.def("checkbox_flags",
        [](const char * label, unsigned int flags, unsigned int flags_value) -> std::tuple<bool, unsigned int>
        {
            auto CheckboxFlags_adapt_modifiable_immutable_to_return = [](const char * label, unsigned int flags, unsigned int flags_value) -> std::tuple<bool, unsigned int>
            {
                unsigned int * flags_adapt_modifiable = & flags;

                bool r = ImGui::CheckboxFlags(label, flags_adapt_modifiable, flags_value);
                return std::make_tuple(r, flags);
            };

            return CheckboxFlags_adapt_modifiable_immutable_to_return(label, flags, flags_value);
        },     nb::arg("label"), nb::arg("flags"), nb::arg("flags_value"));

    m.def("radio_button",
        nb::overload_cast<const char *, bool>(ImGui::RadioButton),
        nb::arg("label"), nb::arg("active"),
        "use with e.g. if (RadioButton(\"one\", my_value==1)) { my_value = 1; }");

    m.def("radio_button",
        [](const char * label, int v, int v_button) -> std::tuple<bool, int>
        {
            auto RadioButton_adapt_modifiable_immutable_to_return = [](const char * label, int v, int v_button) -> std::tuple<bool, int>
            {
                int * v_adapt_modifiable = & v;

                bool r = ImGui::RadioButton(label, v_adapt_modifiable, v_button);
                return std::make_tuple(r, v);
            };

            return RadioButton_adapt_modifiable_immutable_to_return(label, v, v_button);
        },
        nb::arg("label"), nb::arg("v"), nb::arg("v_button"),
        "shortcut to handle the above pattern when value is an integer");

    m.def("progress_bar",
        [](float fraction, const std::optional<const ImVec2> & size_arg = std::nullopt, std::optional<std::string> overlay = std::nullopt)
        {
            auto ProgressBar_adapt_mutable_param_with_default_value = [](float fraction, const std::optional<const ImVec2> & size_arg = std::nullopt, const char * overlay = NULL)
            {

                const ImVec2& size_arg_or_default = [&]() -> const ImVec2 {
                    if (size_arg.has_value())
                        return size_arg.value();
                    else
                        return ImVec2(-FLT_MIN, 0);
                }();

                ImGui::ProgressBar(fraction, size_arg_or_default, overlay);
            };
            auto ProgressBar_adapt_const_char_pointer_with_default_null = [&ProgressBar_adapt_mutable_param_with_default_value](float fraction, const std::optional<const ImVec2> & size_arg = std::nullopt, std::optional<std::string> overlay = std::nullopt)
            {
                const char * overlay_adapt_default_null = nullptr;
                if (overlay.has_value())
                    overlay_adapt_default_null = overlay.value().c_str();

                ProgressBar_adapt_mutable_param_with_default_value(fraction, size_arg, overlay_adapt_default_null);
            };

            ProgressBar_adapt_const_char_pointer_with_default_null(fraction, size_arg, overlay);
        },
        nb::arg("fraction"), nb::arg("size_arg") = nb::none(), nb::arg("overlay") = nb::none(),
        "---\nPython bindings defaults:\n    If size_arg is None, then its default value will be: ImVec2(-sys.float_info.min, 0)");

    m.def("bullet",
        ImGui::Bullet, "draw a small circle + keep the cursor on the same line. advance cursor x position by GetTreeNodeToLabelSpacing(), same distance that TreeNode() uses");

    m.def("text_link",
        ImGui::TextLink,
        nb::arg("label"),
        "hyperlink text button, return True when clicked");

    m.def("text_link_open_url",
        [](const char * label, std::optional<std::string> url = std::nullopt)
        {
            auto TextLinkOpenURL_adapt_const_char_pointer_with_default_null = [](const char * label, std::optional<std::string> url = std::nullopt)
            {
                const char * url_adapt_default_null = nullptr;
                if (url.has_value())
                    url_adapt_default_null = url.value().c_str();

                ImGui::TextLinkOpenURL(label, url_adapt_default_null);
            };

            TextLinkOpenURL_adapt_const_char_pointer_with_default_null(label, url);
        },
        nb::arg("label"), nb::arg("url") = nb::none(),
        "hyperlink text button, automatically open file/url when clicked");

    m.def("image",
        [](ImTextureID user_texture_id, const ImVec2 & image_size, const std::optional<const ImVec2> & uv0 = std::nullopt, const std::optional<const ImVec2> & uv1 = std::nullopt, const std::optional<const ImVec4> & tint_col = std::nullopt, const std::optional<const ImVec4> & border_col = std::nullopt)
        {
            auto Image_adapt_mutable_param_with_default_value = [](ImTextureID user_texture_id, const ImVec2 & image_size, const std::optional<const ImVec2> & uv0 = std::nullopt, const std::optional<const ImVec2> & uv1 = std::nullopt, const std::optional<const ImVec4> & tint_col = std::nullopt, const std::optional<const ImVec4> & border_col = std::nullopt)
            {

                const ImVec2& uv0_or_default = [&]() -> const ImVec2 {
                    if (uv0.has_value())
                        return uv0.value();
                    else
                        return ImVec2(0, 0);
                }();

                const ImVec2& uv1_or_default = [&]() -> const ImVec2 {
                    if (uv1.has_value())
                        return uv1.value();
                    else
                        return ImVec2(1, 1);
                }();

                const ImVec4& tint_col_or_default = [&]() -> const ImVec4 {
                    if (tint_col.has_value())
                        return tint_col.value();
                    else
                        return ImVec4(1, 1, 1, 1);
                }();

                const ImVec4& border_col_or_default = [&]() -> const ImVec4 {
                    if (border_col.has_value())
                        return border_col.value();
                    else
                        return ImVec4(0, 0, 0, 0);
                }();

                ImGui::Image(user_texture_id, image_size, uv0_or_default, uv1_or_default, tint_col_or_default, border_col_or_default);
            };

            Image_adapt_mutable_param_with_default_value(user_texture_id, image_size, uv0, uv1, tint_col, border_col);
        },
        nb::arg("user_texture_id"), nb::arg("image_size"), nb::arg("uv0") = nb::none(), nb::arg("uv1") = nb::none(), nb::arg("tint_col") = nb::none(), nb::arg("border_col") = nb::none(),
        "---\nPython bindings defaults:\n    If any of the params below is None, then its default value below will be used:\n        uv0: ImVec2(0, 0)\n        uv1: ImVec2(1, 1)\n        tint_col: ImVec4(1, 1, 1, 1)\n        border_col: ImVec4(0, 0, 0, 0)");

    m.def("image_button",
        [](const char * str_id, ImTextureID user_texture_id, const ImVec2 & image_size, const std::optional<const ImVec2> & uv0 = std::nullopt, const std::optional<const ImVec2> & uv1 = std::nullopt, const std::optional<const ImVec4> & bg_col = std::nullopt, const std::optional<const ImVec4> & tint_col = std::nullopt) -> bool
        {
            auto ImageButton_adapt_mutable_param_with_default_value = [](const char * str_id, ImTextureID user_texture_id, const ImVec2 & image_size, const std::optional<const ImVec2> & uv0 = std::nullopt, const std::optional<const ImVec2> & uv1 = std::nullopt, const std::optional<const ImVec4> & bg_col = std::nullopt, const std::optional<const ImVec4> & tint_col = std::nullopt) -> bool
            {

                const ImVec2& uv0_or_default = [&]() -> const ImVec2 {
                    if (uv0.has_value())
                        return uv0.value();
                    else
                        return ImVec2(0, 0);
                }();

                const ImVec2& uv1_or_default = [&]() -> const ImVec2 {
                    if (uv1.has_value())
                        return uv1.value();
                    else
                        return ImVec2(1, 1);
                }();

                const ImVec4& bg_col_or_default = [&]() -> const ImVec4 {
                    if (bg_col.has_value())
                        return bg_col.value();
                    else
                        return ImVec4(0, 0, 0, 0);
                }();

                const ImVec4& tint_col_or_default = [&]() -> const ImVec4 {
                    if (tint_col.has_value())
                        return tint_col.value();
                    else
                        return ImVec4(1, 1, 1, 1);
                }();

                auto lambda_result = ImGui::ImageButton(str_id, user_texture_id, image_size, uv0_or_default, uv1_or_default, bg_col_or_default, tint_col_or_default);
                return lambda_result;
            };

            return ImageButton_adapt_mutable_param_with_default_value(str_id, user_texture_id, image_size, uv0, uv1, bg_col, tint_col);
        },
        nb::arg("str_id"), nb::arg("user_texture_id"), nb::arg("image_size"), nb::arg("uv0") = nb::none(), nb::arg("uv1") = nb::none(), nb::arg("bg_col") = nb::none(), nb::arg("tint_col") = nb::none(),
        "---\nPython bindings defaults:\n    If any of the params below is None, then its default value below will be used:\n        uv0: ImVec2(0, 0)\n        uv1: ImVec2(1, 1)\n        bg_col: ImVec4(0, 0, 0, 0)\n        tint_col: ImVec4(1, 1, 1, 1)");

    m.def("begin_combo",
        ImGui::BeginCombo, nb::arg("label"), nb::arg("preview_value"), nb::arg("flags") = 0);

    m.def("end_combo",
        ImGui::EndCombo, "only call EndCombo() if BeginCombo() returns True!");

    m.def("combo",
        [](const char * label, int current_item, const std::vector<std::string> & items, int popup_max_height_in_items = -1) -> std::tuple<bool, int>
        {
            auto Combo_adapt_modifiable_immutable_to_return = [](const char * label, int current_item, const char * const items[], int items_count, int popup_max_height_in_items = -1) -> std::tuple<bool, int>
            {
                int * current_item_adapt_modifiable = & current_item;

                bool r = ImGui::Combo(label, current_item_adapt_modifiable, items, items_count, popup_max_height_in_items);
                return std::make_tuple(r, current_item);
            };
            auto Combo_adapt_c_string_list = [&Combo_adapt_modifiable_immutable_to_return](const char * label, int current_item, const std::vector<std::string> & items, int popup_max_height_in_items = -1) -> std::tuple<bool, int>
            {
                std::vector<const char *> items_ptrs;
                items_ptrs.reserve(items.size());
                for (const auto& v: items)
                    items_ptrs.push_back(v.c_str());
                int items_count = static_cast<int>(items.size());

                auto lambda_result = Combo_adapt_modifiable_immutable_to_return(label, current_item, items_ptrs.data(), items_count, popup_max_height_in_items);
                return lambda_result;
            };

            return Combo_adapt_c_string_list(label, current_item, items, popup_max_height_in_items);
        },     nb::arg("label"), nb::arg("current_item"), nb::arg("items"), nb::arg("popup_max_height_in_items") = -1);

    m.def("combo",
        [](const char * label, int current_item, const char * items_separated_by_zeros, int popup_max_height_in_items = -1) -> std::tuple<bool, int>
        {
            auto Combo_adapt_modifiable_immutable_to_return = [](const char * label, int current_item, const char * items_separated_by_zeros, int popup_max_height_in_items = -1) -> std::tuple<bool, int>
            {
                int * current_item_adapt_modifiable = & current_item;

                bool r = ImGui::Combo(label, current_item_adapt_modifiable, items_separated_by_zeros, popup_max_height_in_items);
                return std::make_tuple(r, current_item);
            };

            return Combo_adapt_modifiable_immutable_to_return(label, current_item, items_separated_by_zeros, popup_max_height_in_items);
        },
        nb::arg("label"), nb::arg("current_item"), nb::arg("items_separated_by_zeros"), nb::arg("popup_max_height_in_items") = -1,
        "Separate items with \\0 within a string, end item-list with \\0\\0. e.g. \"One\\0Two\\0Three\\0\"");

    m.def("drag_float",
        [](const char * label, float v, float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char * format = "%.3f", ImGuiSliderFlags flags = 0) -> std::tuple<bool, float>
        {
            auto DragFloat_adapt_modifiable_immutable_to_return = [](const char * label, float v, float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char * format = "%.3f", ImGuiSliderFlags flags = 0) -> std::tuple<bool, float>
            {
                float * v_adapt_modifiable = & v;

                bool r = ImGui::DragFloat(label, v_adapt_modifiable, v_speed, v_min, v_max, format, flags);
                return std::make_tuple(r, v);
            };

            return DragFloat_adapt_modifiable_immutable_to_return(label, v, v_speed, v_min, v_max, format, flags);
        },
        nb::arg("label"), nb::arg("v"), nb::arg("v_speed") = 1.0f, nb::arg("v_min") = 0.0f, nb::arg("v_max") = 0.0f, nb::arg("format") = "%.3f", nb::arg("flags") = 0,
        "If v_min >= v_max we have no bound");

    m.def("drag_float2",
        [](const char * label, std::array<float, 2> v, float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char * format = "%.3f", ImGuiSliderFlags flags = 0) -> std::tuple<bool, std::array<float, 2>>
        {
            auto DragFloat2_adapt_modifiable_immutable_to_return = [](const char * label, std::array<float, 2> v, float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char * format = "%.3f", ImGuiSliderFlags flags = 0) -> std::tuple<bool, std::array<float, 2>>
            {
                float * v_adapt_modifiable = v.data();

                bool r = ImGui::DragFloat2(label, v_adapt_modifiable, v_speed, v_min, v_max, format, flags);
                return std::make_tuple(r, v);
            };

            return DragFloat2_adapt_modifiable_immutable_to_return(label, v, v_speed, v_min, v_max, format, flags);
        },     nb::arg("label"), nb::arg("v"), nb::arg("v_speed") = 1.0f, nb::arg("v_min") = 0.0f, nb::arg("v_max") = 0.0f, nb::arg("format") = "%.3f", nb::arg("flags") = 0);

    m.def("drag_float3",
        [](const char * label, std::array<float, 3> v, float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char * format = "%.3f", ImGuiSliderFlags flags = 0) -> std::tuple<bool, std::array<float, 3>>
        {
            auto DragFloat3_adapt_modifiable_immutable_to_return = [](const char * label, std::array<float, 3> v, float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char * format = "%.3f", ImGuiSliderFlags flags = 0) -> std::tuple<bool, std::array<float, 3>>
            {
                float * v_adapt_modifiable = v.data();

                bool r = ImGui::DragFloat3(label, v_adapt_modifiable, v_speed, v_min, v_max, format, flags);
                return std::make_tuple(r, v);
            };

            return DragFloat3_adapt_modifiable_immutable_to_return(label, v, v_speed, v_min, v_max, format, flags);
        },     nb::arg("label"), nb::arg("v"), nb::arg("v_speed") = 1.0f, nb::arg("v_min") = 0.0f, nb::arg("v_max") = 0.0f, nb::arg("format") = "%.3f", nb::arg("flags") = 0);

    m.def("drag_float4",
        [](const char * label, std::array<float, 4> v, float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char * format = "%.3f", ImGuiSliderFlags flags = 0) -> std::tuple<bool, std::array<float, 4>>
        {
            auto DragFloat4_adapt_modifiable_immutable_to_return = [](const char * label, std::array<float, 4> v, float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char * format = "%.3f", ImGuiSliderFlags flags = 0) -> std::tuple<bool, std::array<float, 4>>
            {
                float * v_adapt_modifiable = v.data();

                bool r = ImGui::DragFloat4(label, v_adapt_modifiable, v_speed, v_min, v_max, format, flags);
                return std::make_tuple(r, v);
            };

            return DragFloat4_adapt_modifiable_immutable_to_return(label, v, v_speed, v_min, v_max, format, flags);
        },     nb::arg("label"), nb::arg("v"), nb::arg("v_speed") = 1.0f, nb::arg("v_min") = 0.0f, nb::arg("v_max") = 0.0f, nb::arg("format") = "%.3f", nb::arg("flags") = 0);

    m.def("drag_float_range2",
        [](const char * label, float v_current_min, float v_current_max, float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char * format = "%.3f", std::optional<std::string> format_max = std::nullopt, ImGuiSliderFlags flags = 0) -> std::tuple<bool, float, float>
        {
            auto DragFloatRange2_adapt_const_char_pointer_with_default_null = [](const char * label, float * v_current_min, float * v_current_max, float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char * format = "%.3f", std::optional<std::string> format_max = std::nullopt, ImGuiSliderFlags flags = 0) -> bool
            {
                const char * format_max_adapt_default_null = nullptr;
                if (format_max.has_value())
                    format_max_adapt_default_null = format_max.value().c_str();

                auto lambda_result = ImGui::DragFloatRange2(label, v_current_min, v_current_max, v_speed, v_min, v_max, format, format_max_adapt_default_null, flags);
                return lambda_result;
            };
            auto DragFloatRange2_adapt_modifiable_immutable_to_return = [&DragFloatRange2_adapt_const_char_pointer_with_default_null](const char * label, float v_current_min, float v_current_max, float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char * format = "%.3f", std::optional<std::string> format_max = std::nullopt, ImGuiSliderFlags flags = 0) -> std::tuple<bool, float, float>
            {
                float * v_current_min_adapt_modifiable = & v_current_min;
                float * v_current_max_adapt_modifiable = & v_current_max;

                bool r = DragFloatRange2_adapt_const_char_pointer_with_default_null(label, v_current_min_adapt_modifiable, v_current_max_adapt_modifiable, v_speed, v_min, v_max, format, format_max, flags);
                return std::make_tuple(r, v_current_min, v_current_max);
            };

            return DragFloatRange2_adapt_modifiable_immutable_to_return(label, v_current_min, v_current_max, v_speed, v_min, v_max, format, format_max, flags);
        },     nb::arg("label"), nb::arg("v_current_min"), nb::arg("v_current_max"), nb::arg("v_speed") = 1.0f, nb::arg("v_min") = 0.0f, nb::arg("v_max") = 0.0f, nb::arg("format") = "%.3f", nb::arg("format_max") = nb::none(), nb::arg("flags") = 0);

    m.def("drag_int",
        [](const char * label, int v, float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char * format = "%d", ImGuiSliderFlags flags = 0) -> std::tuple<bool, int>
        {
            auto DragInt_adapt_modifiable_immutable_to_return = [](const char * label, int v, float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char * format = "%d", ImGuiSliderFlags flags = 0) -> std::tuple<bool, int>
            {
                int * v_adapt_modifiable = & v;

                bool r = ImGui::DragInt(label, v_adapt_modifiable, v_speed, v_min, v_max, format, flags);
                return std::make_tuple(r, v);
            };

            return DragInt_adapt_modifiable_immutable_to_return(label, v, v_speed, v_min, v_max, format, flags);
        },
        nb::arg("label"), nb::arg("v"), nb::arg("v_speed") = 1.0f, nb::arg("v_min") = 0, nb::arg("v_max") = 0, nb::arg("format") = "%d", nb::arg("flags") = 0,
        "If v_min >= v_max we have no bound");

    m.def("drag_int2",
        [](const char * label, std::array<int, 2> v, float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char * format = "%d", ImGuiSliderFlags flags = 0) -> std::tuple<bool, std::array<int, 2>>
        {
            auto DragInt2_adapt_modifiable_immutable_to_return = [](const char * label, std::array<int, 2> v, float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char * format = "%d", ImGuiSliderFlags flags = 0) -> std::tuple<bool, std::array<int, 2>>
            {
                int * v_adapt_modifiable = v.data();

                bool r = ImGui::DragInt2(label, v_adapt_modifiable, v_speed, v_min, v_max, format, flags);
                return std::make_tuple(r, v);
            };

            return DragInt2_adapt_modifiable_immutable_to_return(label, v, v_speed, v_min, v_max, format, flags);
        },     nb::arg("label"), nb::arg("v"), nb::arg("v_speed") = 1.0f, nb::arg("v_min") = 0, nb::arg("v_max") = 0, nb::arg("format") = "%d", nb::arg("flags") = 0);

    m.def("drag_int3",
        [](const char * label, std::array<int, 3> v, float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char * format = "%d", ImGuiSliderFlags flags = 0) -> std::tuple<bool, std::array<int, 3>>
        {
            auto DragInt3_adapt_modifiable_immutable_to_return = [](const char * label, std::array<int, 3> v, float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char * format = "%d", ImGuiSliderFlags flags = 0) -> std::tuple<bool, std::array<int, 3>>
            {
                int * v_adapt_modifiable = v.data();

                bool r = ImGui::DragInt3(label, v_adapt_modifiable, v_speed, v_min, v_max, format, flags);
                return std::make_tuple(r, v);
            };

            return DragInt3_adapt_modifiable_immutable_to_return(label, v, v_speed, v_min, v_max, format, flags);
        },     nb::arg("label"), nb::arg("v"), nb::arg("v_speed") = 1.0f, nb::arg("v_min") = 0, nb::arg("v_max") = 0, nb::arg("format") = "%d", nb::arg("flags") = 0);

    m.def("drag_int4",
        [](const char * label, std::array<int, 4> v, float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char * format = "%d", ImGuiSliderFlags flags = 0) -> std::tuple<bool, std::array<int, 4>>
        {
            auto DragInt4_adapt_modifiable_immutable_to_return = [](const char * label, std::array<int, 4> v, float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char * format = "%d", ImGuiSliderFlags flags = 0) -> std::tuple<bool, std::array<int, 4>>
            {
                int * v_adapt_modifiable = v.data();

                bool r = ImGui::DragInt4(label, v_adapt_modifiable, v_speed, v_min, v_max, format, flags);
                return std::make_tuple(r, v);
            };

            return DragInt4_adapt_modifiable_immutable_to_return(label, v, v_speed, v_min, v_max, format, flags);
        },     nb::arg("label"), nb::arg("v"), nb::arg("v_speed") = 1.0f, nb::arg("v_min") = 0, nb::arg("v_max") = 0, nb::arg("format") = "%d", nb::arg("flags") = 0);

    m.def("drag_int_range2",
        [](const char * label, int v_current_min, int v_current_max, float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char * format = "%d", std::optional<std::string> format_max = std::nullopt, ImGuiSliderFlags flags = 0) -> std::tuple<bool, int, int>
        {
            auto DragIntRange2_adapt_const_char_pointer_with_default_null = [](const char * label, int * v_current_min, int * v_current_max, float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char * format = "%d", std::optional<std::string> format_max = std::nullopt, ImGuiSliderFlags flags = 0) -> bool
            {
                const char * format_max_adapt_default_null = nullptr;
                if (format_max.has_value())
                    format_max_adapt_default_null = format_max.value().c_str();

                auto lambda_result = ImGui::DragIntRange2(label, v_current_min, v_current_max, v_speed, v_min, v_max, format, format_max_adapt_default_null, flags);
                return lambda_result;
            };
            auto DragIntRange2_adapt_modifiable_immutable_to_return = [&DragIntRange2_adapt_const_char_pointer_with_default_null](const char * label, int v_current_min, int v_current_max, float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char * format = "%d", std::optional<std::string> format_max = std::nullopt, ImGuiSliderFlags flags = 0) -> std::tuple<bool, int, int>
            {
                int * v_current_min_adapt_modifiable = & v_current_min;
                int * v_current_max_adapt_modifiable = & v_current_max;

                bool r = DragIntRange2_adapt_const_char_pointer_with_default_null(label, v_current_min_adapt_modifiable, v_current_max_adapt_modifiable, v_speed, v_min, v_max, format, format_max, flags);
                return std::make_tuple(r, v_current_min, v_current_max);
            };

            return DragIntRange2_adapt_modifiable_immutable_to_return(label, v_current_min, v_current_max, v_speed, v_min, v_max, format, format_max, flags);
        },     nb::arg("label"), nb::arg("v_current_min"), nb::arg("v_current_max"), nb::arg("v_speed") = 1.0f, nb::arg("v_min") = 0, nb::arg("v_max") = 0, nb::arg("format") = "%d", nb::arg("format_max") = nb::none(), nb::arg("flags") = 0);

    m.def("drag_scalar",
        [](const char * label, ImGuiDataType data_type, void * p_data, float v_speed = 1.0f, const void * p_min = NULL, const void * p_max = NULL, std::optional<std::string> format = std::nullopt, ImGuiSliderFlags flags = 0) -> bool
        {
            auto DragScalar_adapt_const_char_pointer_with_default_null = [](const char * label, ImGuiDataType data_type, void * p_data, float v_speed = 1.0f, const void * p_min = NULL, const void * p_max = NULL, std::optional<std::string> format = std::nullopt, ImGuiSliderFlags flags = 0) -> bool
            {
                const char * format_adapt_default_null = nullptr;
                if (format.has_value())
                    format_adapt_default_null = format.value().c_str();

                auto lambda_result = ImGui::DragScalar(label, data_type, p_data, v_speed, p_min, p_max, format_adapt_default_null, flags);
                return lambda_result;
            };

            return DragScalar_adapt_const_char_pointer_with_default_null(label, data_type, p_data, v_speed, p_min, p_max, format, flags);
        },     nb::arg("label"), nb::arg("data_type"), nb::arg("p_data"), nb::arg("v_speed") = 1.0f, nb::arg("p_min") = nb::none(), nb::arg("p_max") = nb::none(), nb::arg("format") = nb::none(), nb::arg("flags") = 0);

    m.def("drag_scalar_n",
        [](const char * label, ImGuiDataType data_type, void * p_data, int components, float v_speed = 1.0f, const void * p_min = NULL, const void * p_max = NULL, std::optional<std::string> format = std::nullopt, ImGuiSliderFlags flags = 0) -> bool
        {
            auto DragScalarN_adapt_const_char_pointer_with_default_null = [](const char * label, ImGuiDataType data_type, void * p_data, int components, float v_speed = 1.0f, const void * p_min = NULL, const void * p_max = NULL, std::optional<std::string> format = std::nullopt, ImGuiSliderFlags flags = 0) -> bool
            {
                const char * format_adapt_default_null = nullptr;
                if (format.has_value())
                    format_adapt_default_null = format.value().c_str();

                auto lambda_result = ImGui::DragScalarN(label, data_type, p_data, components, v_speed, p_min, p_max, format_adapt_default_null, flags);
                return lambda_result;
            };

            return DragScalarN_adapt_const_char_pointer_with_default_null(label, data_type, p_data, components, v_speed, p_min, p_max, format, flags);
        },     nb::arg("label"), nb::arg("data_type"), nb::arg("p_data"), nb::arg("components"), nb::arg("v_speed") = 1.0f, nb::arg("p_min") = nb::none(), nb::arg("p_max") = nb::none(), nb::arg("format") = nb::none(), nb::arg("flags") = 0);

    m.def("slider_float",
        [](const char * label, float v, float v_min, float v_max, const char * format = "%.3f", ImGuiSliderFlags flags = 0) -> std::tuple<bool, float>
        {
            auto SliderFloat_adapt_modifiable_immutable_to_return = [](const char * label, float v, float v_min, float v_max, const char * format = "%.3f", ImGuiSliderFlags flags = 0) -> std::tuple<bool, float>
            {
                float * v_adapt_modifiable = & v;

                bool r = ImGui::SliderFloat(label, v_adapt_modifiable, v_min, v_max, format, flags);
                return std::make_tuple(r, v);
            };

            return SliderFloat_adapt_modifiable_immutable_to_return(label, v, v_min, v_max, format, flags);
        },
        nb::arg("label"), nb::arg("v"), nb::arg("v_min"), nb::arg("v_max"), nb::arg("format") = "%.3f", nb::arg("flags") = 0,
        "adjust format to decorate the value with a prefix or a suffix for in-slider labels or unit display.");

    m.def("slider_float2",
        [](const char * label, std::array<float, 2> v, float v_min, float v_max, const char * format = "%.3f", ImGuiSliderFlags flags = 0) -> std::tuple<bool, std::array<float, 2>>
        {
            auto SliderFloat2_adapt_modifiable_immutable_to_return = [](const char * label, std::array<float, 2> v, float v_min, float v_max, const char * format = "%.3f", ImGuiSliderFlags flags = 0) -> std::tuple<bool, std::array<float, 2>>
            {
                float * v_adapt_modifiable = v.data();

                bool r = ImGui::SliderFloat2(label, v_adapt_modifiable, v_min, v_max, format, flags);
                return std::make_tuple(r, v);
            };

            return SliderFloat2_adapt_modifiable_immutable_to_return(label, v, v_min, v_max, format, flags);
        },     nb::arg("label"), nb::arg("v"), nb::arg("v_min"), nb::arg("v_max"), nb::arg("format") = "%.3f", nb::arg("flags") = 0);

    m.def("slider_float3",
        [](const char * label, std::array<float, 3> v, float v_min, float v_max, const char * format = "%.3f", ImGuiSliderFlags flags = 0) -> std::tuple<bool, std::array<float, 3>>
        {
            auto SliderFloat3_adapt_modifiable_immutable_to_return = [](const char * label, std::array<float, 3> v, float v_min, float v_max, const char * format = "%.3f", ImGuiSliderFlags flags = 0) -> std::tuple<bool, std::array<float, 3>>
            {
                float * v_adapt_modifiable = v.data();

                bool r = ImGui::SliderFloat3(label, v_adapt_modifiable, v_min, v_max, format, flags);
                return std::make_tuple(r, v);
            };

            return SliderFloat3_adapt_modifiable_immutable_to_return(label, v, v_min, v_max, format, flags);
        },     nb::arg("label"), nb::arg("v"), nb::arg("v_min"), nb::arg("v_max"), nb::arg("format") = "%.3f", nb::arg("flags") = 0);

    m.def("slider_float4",
        [](const char * label, std::array<float, 4> v, float v_min, float v_max, const char * format = "%.3f", ImGuiSliderFlags flags = 0) -> std::tuple<bool, std::array<float, 4>>
        {
            auto SliderFloat4_adapt_modifiable_immutable_to_return = [](const char * label, std::array<float, 4> v, float v_min, float v_max, const char * format = "%.3f", ImGuiSliderFlags flags = 0) -> std::tuple<bool, std::array<float, 4>>
            {
                float * v_adapt_modifiable = v.data();

                bool r = ImGui::SliderFloat4(label, v_adapt_modifiable, v_min, v_max, format, flags);
                return std::make_tuple(r, v);
            };

            return SliderFloat4_adapt_modifiable_immutable_to_return(label, v, v_min, v_max, format, flags);
        },     nb::arg("label"), nb::arg("v"), nb::arg("v_min"), nb::arg("v_max"), nb::arg("format") = "%.3f", nb::arg("flags") = 0);

    m.def("slider_angle",
        [](const char * label, float v_rad, float v_degrees_min = -360.0f, float v_degrees_max = +360.0f, const char * format = "%.0f deg", ImGuiSliderFlags flags = 0) -> std::tuple<bool, float>
        {
            auto SliderAngle_adapt_modifiable_immutable_to_return = [](const char * label, float v_rad, float v_degrees_min = -360.0f, float v_degrees_max = +360.0f, const char * format = "%.0f deg", ImGuiSliderFlags flags = 0) -> std::tuple<bool, float>
            {
                float * v_rad_adapt_modifiable = & v_rad;

                bool r = ImGui::SliderAngle(label, v_rad_adapt_modifiable, v_degrees_min, v_degrees_max, format, flags);
                return std::make_tuple(r, v_rad);
            };

            return SliderAngle_adapt_modifiable_immutable_to_return(label, v_rad, v_degrees_min, v_degrees_max, format, flags);
        },     nb::arg("label"), nb::arg("v_rad"), nb::arg("v_degrees_min") = -360.0f, nb::arg("v_degrees_max") = +360.0f, nb::arg("format") = "%.0f deg", nb::arg("flags") = 0);

    m.def("slider_int",
        [](const char * label, int v, int v_min, int v_max, const char * format = "%d", ImGuiSliderFlags flags = 0) -> std::tuple<bool, int>
        {
            auto SliderInt_adapt_modifiable_immutable_to_return = [](const char * label, int v, int v_min, int v_max, const char * format = "%d", ImGuiSliderFlags flags = 0) -> std::tuple<bool, int>
            {
                int * v_adapt_modifiable = & v;

                bool r = ImGui::SliderInt(label, v_adapt_modifiable, v_min, v_max, format, flags);
                return std::make_tuple(r, v);
            };

            return SliderInt_adapt_modifiable_immutable_to_return(label, v, v_min, v_max, format, flags);
        },     nb::arg("label"), nb::arg("v"), nb::arg("v_min"), nb::arg("v_max"), nb::arg("format") = "%d", nb::arg("flags") = 0);

    m.def("slider_int2",
        [](const char * label, std::array<int, 2> v, int v_min, int v_max, const char * format = "%d", ImGuiSliderFlags flags = 0) -> std::tuple<bool, std::array<int, 2>>
        {
            auto SliderInt2_adapt_modifiable_immutable_to_return = [](const char * label, std::array<int, 2> v, int v_min, int v_max, const char * format = "%d", ImGuiSliderFlags flags = 0) -> std::tuple<bool, std::array<int, 2>>
            {
                int * v_adapt_modifiable = v.data();

                bool r = ImGui::SliderInt2(label, v_adapt_modifiable, v_min, v_max, format, flags);
                return std::make_tuple(r, v);
            };

            return SliderInt2_adapt_modifiable_immutable_to_return(label, v, v_min, v_max, format, flags);
        },     nb::arg("label"), nb::arg("v"), nb::arg("v_min"), nb::arg("v_max"), nb::arg("format") = "%d", nb::arg("flags") = 0);

    m.def("slider_int3",
        [](const char * label, std::array<int, 3> v, int v_min, int v_max, const char * format = "%d", ImGuiSliderFlags flags = 0) -> std::tuple<bool, std::array<int, 3>>
        {
            auto SliderInt3_adapt_modifiable_immutable_to_return = [](const char * label, std::array<int, 3> v, int v_min, int v_max, const char * format = "%d", ImGuiSliderFlags flags = 0) -> std::tuple<bool, std::array<int, 3>>
            {
                int * v_adapt_modifiable = v.data();

                bool r = ImGui::SliderInt3(label, v_adapt_modifiable, v_min, v_max, format, flags);
                return std::make_tuple(r, v);
            };

            return SliderInt3_adapt_modifiable_immutable_to_return(label, v, v_min, v_max, format, flags);
        },     nb::arg("label"), nb::arg("v"), nb::arg("v_min"), nb::arg("v_max"), nb::arg("format") = "%d", nb::arg("flags") = 0);

    m.def("slider_int4",
        [](const char * label, std::array<int, 4> v, int v_min, int v_max, const char * format = "%d", ImGuiSliderFlags flags = 0) -> std::tuple<bool, std::array<int, 4>>
        {
            auto SliderInt4_adapt_modifiable_immutable_to_return = [](const char * label, std::array<int, 4> v, int v_min, int v_max, const char * format = "%d", ImGuiSliderFlags flags = 0) -> std::tuple<bool, std::array<int, 4>>
            {
                int * v_adapt_modifiable = v.data();

                bool r = ImGui::SliderInt4(label, v_adapt_modifiable, v_min, v_max, format, flags);
                return std::make_tuple(r, v);
            };

            return SliderInt4_adapt_modifiable_immutable_to_return(label, v, v_min, v_max, format, flags);
        },     nb::arg("label"), nb::arg("v"), nb::arg("v_min"), nb::arg("v_max"), nb::arg("format") = "%d", nb::arg("flags") = 0);

    m.def("slider_scalar",
        [](const char * label, ImGuiDataType data_type, void * p_data, const void * p_min, const void * p_max, std::optional<std::string> format = std::nullopt, ImGuiSliderFlags flags = 0) -> bool
        {
            auto SliderScalar_adapt_const_char_pointer_with_default_null = [](const char * label, ImGuiDataType data_type, void * p_data, const void * p_min, const void * p_max, std::optional<std::string> format = std::nullopt, ImGuiSliderFlags flags = 0) -> bool
            {
                const char * format_adapt_default_null = nullptr;
                if (format.has_value())
                    format_adapt_default_null = format.value().c_str();

                auto lambda_result = ImGui::SliderScalar(label, data_type, p_data, p_min, p_max, format_adapt_default_null, flags);
                return lambda_result;
            };

            return SliderScalar_adapt_const_char_pointer_with_default_null(label, data_type, p_data, p_min, p_max, format, flags);
        },     nb::arg("label"), nb::arg("data_type"), nb::arg("p_data"), nb::arg("p_min"), nb::arg("p_max"), nb::arg("format") = nb::none(), nb::arg("flags") = 0);

    m.def("slider_scalar_n",
        [](const char * label, ImGuiDataType data_type, void * p_data, int components, const void * p_min, const void * p_max, std::optional<std::string> format = std::nullopt, ImGuiSliderFlags flags = 0) -> bool
        {
            auto SliderScalarN_adapt_const_char_pointer_with_default_null = [](const char * label, ImGuiDataType data_type, void * p_data, int components, const void * p_min, const void * p_max, std::optional<std::string> format = std::nullopt, ImGuiSliderFlags flags = 0) -> bool
            {
                const char * format_adapt_default_null = nullptr;
                if (format.has_value())
                    format_adapt_default_null = format.value().c_str();

                auto lambda_result = ImGui::SliderScalarN(label, data_type, p_data, components, p_min, p_max, format_adapt_default_null, flags);
                return lambda_result;
            };

            return SliderScalarN_adapt_const_char_pointer_with_default_null(label, data_type, p_data, components, p_min, p_max, format, flags);
        },     nb::arg("label"), nb::arg("data_type"), nb::arg("p_data"), nb::arg("components"), nb::arg("p_min"), nb::arg("p_max"), nb::arg("format") = nb::none(), nb::arg("flags") = 0);

    m.def("v_slider_float",
        [](const char * label, const ImVec2 & size, float v, float v_min, float v_max, const char * format = "%.3f", ImGuiSliderFlags flags = 0) -> std::tuple<bool, float>
        {
            auto VSliderFloat_adapt_modifiable_immutable_to_return = [](const char * label, const ImVec2 & size, float v, float v_min, float v_max, const char * format = "%.3f", ImGuiSliderFlags flags = 0) -> std::tuple<bool, float>
            {
                float * v_adapt_modifiable = & v;

                bool r = ImGui::VSliderFloat(label, size, v_adapt_modifiable, v_min, v_max, format, flags);
                return std::make_tuple(r, v);
            };

            return VSliderFloat_adapt_modifiable_immutable_to_return(label, size, v, v_min, v_max, format, flags);
        },     nb::arg("label"), nb::arg("size"), nb::arg("v"), nb::arg("v_min"), nb::arg("v_max"), nb::arg("format") = "%.3f", nb::arg("flags") = 0);

    m.def("v_slider_int",
        [](const char * label, const ImVec2 & size, int v, int v_min, int v_max, const char * format = "%d", ImGuiSliderFlags flags = 0) -> std::tuple<bool, int>
        {
            auto VSliderInt_adapt_modifiable_immutable_to_return = [](const char * label, const ImVec2 & size, int v, int v_min, int v_max, const char * format = "%d", ImGuiSliderFlags flags = 0) -> std::tuple<bool, int>
            {
                int * v_adapt_modifiable = & v;

                bool r = ImGui::VSliderInt(label, size, v_adapt_modifiable, v_min, v_max, format, flags);
                return std::make_tuple(r, v);
            };

            return VSliderInt_adapt_modifiable_immutable_to_return(label, size, v, v_min, v_max, format, flags);
        },     nb::arg("label"), nb::arg("size"), nb::arg("v"), nb::arg("v_min"), nb::arg("v_max"), nb::arg("format") = "%d", nb::arg("flags") = 0);

    m.def("v_slider_scalar",
        [](const char * label, const ImVec2 & size, ImGuiDataType data_type, void * p_data, const void * p_min, const void * p_max, std::optional<std::string> format = std::nullopt, ImGuiSliderFlags flags = 0) -> bool
        {
            auto VSliderScalar_adapt_const_char_pointer_with_default_null = [](const char * label, const ImVec2 & size, ImGuiDataType data_type, void * p_data, const void * p_min, const void * p_max, std::optional<std::string> format = std::nullopt, ImGuiSliderFlags flags = 0) -> bool
            {
                const char * format_adapt_default_null = nullptr;
                if (format.has_value())
                    format_adapt_default_null = format.value().c_str();

                auto lambda_result = ImGui::VSliderScalar(label, size, data_type, p_data, p_min, p_max, format_adapt_default_null, flags);
                return lambda_result;
            };

            return VSliderScalar_adapt_const_char_pointer_with_default_null(label, size, data_type, p_data, p_min, p_max, format, flags);
        },     nb::arg("label"), nb::arg("size"), nb::arg("data_type"), nb::arg("p_data"), nb::arg("p_min"), nb::arg("p_max"), nb::arg("format") = nb::none(), nb::arg("flags") = 0);

    m.def("input_float",
        [](const char * label, float v, float step = 0.0f, float step_fast = 0.0f, const char * format = "%.3f", ImGuiInputTextFlags flags = 0) -> std::tuple<bool, float>
        {
            auto InputFloat_adapt_modifiable_immutable_to_return = [](const char * label, float v, float step = 0.0f, float step_fast = 0.0f, const char * format = "%.3f", ImGuiInputTextFlags flags = 0) -> std::tuple<bool, float>
            {
                float * v_adapt_modifiable = & v;

                bool r = ImGui::InputFloat(label, v_adapt_modifiable, step, step_fast, format, flags);
                return std::make_tuple(r, v);
            };

            return InputFloat_adapt_modifiable_immutable_to_return(label, v, step, step_fast, format, flags);
        },     nb::arg("label"), nb::arg("v"), nb::arg("step") = 0.0f, nb::arg("step_fast") = 0.0f, nb::arg("format") = "%.3f", nb::arg("flags") = 0);

    m.def("input_float2",
        [](const char * label, std::array<float, 2> v, const char * format = "%.3f", ImGuiInputTextFlags flags = 0) -> std::tuple<bool, std::array<float, 2>>
        {
            auto InputFloat2_adapt_modifiable_immutable_to_return = [](const char * label, std::array<float, 2> v, const char * format = "%.3f", ImGuiInputTextFlags flags = 0) -> std::tuple<bool, std::array<float, 2>>
            {
                float * v_adapt_modifiable = v.data();

                bool r = ImGui::InputFloat2(label, v_adapt_modifiable, format, flags);
                return std::make_tuple(r, v);
            };

            return InputFloat2_adapt_modifiable_immutable_to_return(label, v, format, flags);
        },     nb::arg("label"), nb::arg("v"), nb::arg("format") = "%.3f", nb::arg("flags") = 0);

    m.def("input_float3",
        [](const char * label, std::array<float, 3> v, const char * format = "%.3f", ImGuiInputTextFlags flags = 0) -> std::tuple<bool, std::array<float, 3>>
        {
            auto InputFloat3_adapt_modifiable_immutable_to_return = [](const char * label, std::array<float, 3> v, const char * format = "%.3f", ImGuiInputTextFlags flags = 0) -> std::tuple<bool, std::array<float, 3>>
            {
                float * v_adapt_modifiable = v.data();

                bool r = ImGui::InputFloat3(label, v_adapt_modifiable, format, flags);
                return std::make_tuple(r, v);
            };

            return InputFloat3_adapt_modifiable_immutable_to_return(label, v, format, flags);
        },     nb::arg("label"), nb::arg("v"), nb::arg("format") = "%.3f", nb::arg("flags") = 0);

    m.def("input_float4",
        [](const char * label, std::array<float, 4> v, const char * format = "%.3f", ImGuiInputTextFlags flags = 0) -> std::tuple<bool, std::array<float, 4>>
        {
            auto InputFloat4_adapt_modifiable_immutable_to_return = [](const char * label, std::array<float, 4> v, const char * format = "%.3f", ImGuiInputTextFlags flags = 0) -> std::tuple<bool, std::array<float, 4>>
            {
                float * v_adapt_modifiable = v.data();

                bool r = ImGui::InputFloat4(label, v_adapt_modifiable, format, flags);
                return std::make_tuple(r, v);
            };

            return InputFloat4_adapt_modifiable_immutable_to_return(label, v, format, flags);
        },     nb::arg("label"), nb::arg("v"), nb::arg("format") = "%.3f", nb::arg("flags") = 0);

    m.def("input_int",
        [](const char * label, int v, int step = 1, int step_fast = 100, ImGuiInputTextFlags flags = 0) -> std::tuple<bool, int>
        {
            auto InputInt_adapt_modifiable_immutable_to_return = [](const char * label, int v, int step = 1, int step_fast = 100, ImGuiInputTextFlags flags = 0) -> std::tuple<bool, int>
            {
                int * v_adapt_modifiable = & v;

                bool r = ImGui::InputInt(label, v_adapt_modifiable, step, step_fast, flags);
                return std::make_tuple(r, v);
            };

            return InputInt_adapt_modifiable_immutable_to_return(label, v, step, step_fast, flags);
        },     nb::arg("label"), nb::arg("v"), nb::arg("step") = 1, nb::arg("step_fast") = 100, nb::arg("flags") = 0);

    m.def("input_int2",
        [](const char * label, std::array<int, 2> v, ImGuiInputTextFlags flags = 0) -> std::tuple<bool, std::array<int, 2>>
        {
            auto InputInt2_adapt_modifiable_immutable_to_return = [](const char * label, std::array<int, 2> v, ImGuiInputTextFlags flags = 0) -> std::tuple<bool, std::array<int, 2>>
            {
                int * v_adapt_modifiable = v.data();

                bool r = ImGui::InputInt2(label, v_adapt_modifiable, flags);
                return std::make_tuple(r, v);
            };

            return InputInt2_adapt_modifiable_immutable_to_return(label, v, flags);
        },     nb::arg("label"), nb::arg("v"), nb::arg("flags") = 0);

    m.def("input_int3",
        [](const char * label, std::array<int, 3> v, ImGuiInputTextFlags flags = 0) -> std::tuple<bool, std::array<int, 3>>
        {
            auto InputInt3_adapt_modifiable_immutable_to_return = [](const char * label, std::array<int, 3> v, ImGuiInputTextFlags flags = 0) -> std::tuple<bool, std::array<int, 3>>
            {
                int * v_adapt_modifiable = v.data();

                bool r = ImGui::InputInt3(label, v_adapt_modifiable, flags);
                return std::make_tuple(r, v);
            };

            return InputInt3_adapt_modifiable_immutable_to_return(label, v, flags);
        },     nb::arg("label"), nb::arg("v"), nb::arg("flags") = 0);

    m.def("input_int4",
        [](const char * label, std::array<int, 4> v, ImGuiInputTextFlags flags = 0) -> std::tuple<bool, std::array<int, 4>>
        {
            auto InputInt4_adapt_modifiable_immutable_to_return = [](const char * label, std::array<int, 4> v, ImGuiInputTextFlags flags = 0) -> std::tuple<bool, std::array<int, 4>>
            {
                int * v_adapt_modifiable = v.data();

                bool r = ImGui::InputInt4(label, v_adapt_modifiable, flags);
                return std::make_tuple(r, v);
            };

            return InputInt4_adapt_modifiable_immutable_to_return(label, v, flags);
        },     nb::arg("label"), nb::arg("v"), nb::arg("flags") = 0);

    m.def("input_double",
        [](const char * label, double v, double step = 0.0, double step_fast = 0.0, const char * format = "%.6f", ImGuiInputTextFlags flags = 0) -> std::tuple<bool, double>
        {
            auto InputDouble_adapt_modifiable_immutable_to_return = [](const char * label, double v, double step = 0.0, double step_fast = 0.0, const char * format = "%.6f", ImGuiInputTextFlags flags = 0) -> std::tuple<bool, double>
            {
                double * v_adapt_modifiable = & v;

                bool r = ImGui::InputDouble(label, v_adapt_modifiable, step, step_fast, format, flags);
                return std::make_tuple(r, v);
            };

            return InputDouble_adapt_modifiable_immutable_to_return(label, v, step, step_fast, format, flags);
        },     nb::arg("label"), nb::arg("v"), nb::arg("step") = 0.0, nb::arg("step_fast") = 0.0, nb::arg("format") = "%.6f", nb::arg("flags") = 0);

    m.def("input_scalar",
        [](const char * label, ImGuiDataType data_type, void * p_data, const void * p_step = NULL, const void * p_step_fast = NULL, std::optional<std::string> format = std::nullopt, ImGuiInputTextFlags flags = 0) -> bool
        {
            auto InputScalar_adapt_const_char_pointer_with_default_null = [](const char * label, ImGuiDataType data_type, void * p_data, const void * p_step = NULL, const void * p_step_fast = NULL, std::optional<std::string> format = std::nullopt, ImGuiInputTextFlags flags = 0) -> bool
            {
                const char * format_adapt_default_null = nullptr;
                if (format.has_value())
                    format_adapt_default_null = format.value().c_str();

                auto lambda_result = ImGui::InputScalar(label, data_type, p_data, p_step, p_step_fast, format_adapt_default_null, flags);
                return lambda_result;
            };

            return InputScalar_adapt_const_char_pointer_with_default_null(label, data_type, p_data, p_step, p_step_fast, format, flags);
        },     nb::arg("label"), nb::arg("data_type"), nb::arg("p_data"), nb::arg("p_step") = nb::none(), nb::arg("p_step_fast") = nb::none(), nb::arg("format") = nb::none(), nb::arg("flags") = 0);

    m.def("input_scalar_n",
        [](const char * label, ImGuiDataType data_type, void * p_data, int components, const void * p_step = NULL, const void * p_step_fast = NULL, std::optional<std::string> format = std::nullopt, ImGuiInputTextFlags flags = 0) -> bool
        {
            auto InputScalarN_adapt_const_char_pointer_with_default_null = [](const char * label, ImGuiDataType data_type, void * p_data, int components, const void * p_step = NULL, const void * p_step_fast = NULL, std::optional<std::string> format = std::nullopt, ImGuiInputTextFlags flags = 0) -> bool
            {
                const char * format_adapt_default_null = nullptr;
                if (format.has_value())
                    format_adapt_default_null = format.value().c_str();

                auto lambda_result = ImGui::InputScalarN(label, data_type, p_data, components, p_step, p_step_fast, format_adapt_default_null, flags);
                return lambda_result;
            };

            return InputScalarN_adapt_const_char_pointer_with_default_null(label, data_type, p_data, components, p_step, p_step_fast, format, flags);
        },     nb::arg("label"), nb::arg("data_type"), nb::arg("p_data"), nb::arg("components"), nb::arg("p_step") = nb::none(), nb::arg("p_step_fast") = nb::none(), nb::arg("format") = nb::none(), nb::arg("flags") = 0);

    m.def("color_edit3",
        [](const char * label, std::array<float, 3> col, ImGuiColorEditFlags flags = 0) -> std::tuple<bool, std::array<float, 3>>
        {
            auto ColorEdit3_adapt_modifiable_immutable_to_return = [](const char * label, std::array<float, 3> col, ImGuiColorEditFlags flags = 0) -> std::tuple<bool, std::array<float, 3>>
            {
                float * col_adapt_modifiable = col.data();

                bool r = ImGui::ColorEdit3(label, col_adapt_modifiable, flags);
                return std::make_tuple(r, col);
            };

            return ColorEdit3_adapt_modifiable_immutable_to_return(label, col, flags);
        },     nb::arg("label"), nb::arg("col"), nb::arg("flags") = 0);

    m.def("color_edit4",
        [](const char * label, std::array<float, 4> col, ImGuiColorEditFlags flags = 0) -> std::tuple<bool, std::array<float, 4>>
        {
            auto ColorEdit4_adapt_modifiable_immutable_to_return = [](const char * label, std::array<float, 4> col, ImGuiColorEditFlags flags = 0) -> std::tuple<bool, std::array<float, 4>>
            {
                float * col_adapt_modifiable = col.data();

                bool r = ImGui::ColorEdit4(label, col_adapt_modifiable, flags);
                return std::make_tuple(r, col);
            };

            return ColorEdit4_adapt_modifiable_immutable_to_return(label, col, flags);
        },     nb::arg("label"), nb::arg("col"), nb::arg("flags") = 0);

    m.def("color_picker3",
        [](const char * label, std::array<float, 3> col, ImGuiColorEditFlags flags = 0) -> std::tuple<bool, std::array<float, 3>>
        {
            auto ColorPicker3_adapt_modifiable_immutable_to_return = [](const char * label, std::array<float, 3> col, ImGuiColorEditFlags flags = 0) -> std::tuple<bool, std::array<float, 3>>
            {
                float * col_adapt_modifiable = col.data();

                bool r = ImGui::ColorPicker3(label, col_adapt_modifiable, flags);
                return std::make_tuple(r, col);
            };

            return ColorPicker3_adapt_modifiable_immutable_to_return(label, col, flags);
        },     nb::arg("label"), nb::arg("col"), nb::arg("flags") = 0);
    // #ifdef IMGUI_BUNDLE_PYTHON_API
    //

    m.def("color_picker4",
        nb::overload_cast<const std::string &, ImVec4, ImGuiColorEditFlags, std::optional<ImVec4>>(ImGui::ColorPicker4), nb::arg("label"), nb::arg("col"), nb::arg("flags") = 0, nb::arg("ref_col") = nb::none());
    // #endif
    //

    m.def("color_button",
        [](const char * desc_id, const ImVec4 & col, ImGuiColorEditFlags flags = 0, const std::optional<const ImVec2> & size = std::nullopt) -> bool
        {
            auto ColorButton_adapt_mutable_param_with_default_value = [](const char * desc_id, const ImVec4 & col, ImGuiColorEditFlags flags = 0, const std::optional<const ImVec2> & size = std::nullopt) -> bool
            {

                const ImVec2& size_or_default = [&]() -> const ImVec2 {
                    if (size.has_value())
                        return size.value();
                    else
                        return ImVec2(0, 0);
                }();

                auto lambda_result = ImGui::ColorButton(desc_id, col, flags, size_or_default);
                return lambda_result;
            };

            return ColorButton_adapt_mutable_param_with_default_value(desc_id, col, flags, size);
        },
        nb::arg("desc_id"), nb::arg("col"), nb::arg("flags") = 0, nb::arg("size") = nb::none(),
        "---\nPython bindings defaults:\n    If size is None, then its default value will be: ImVec2(0, 0)\n\n display a color square/button, hover for details, return True when pressed.");

    m.def("set_color_edit_options",
        ImGui::SetColorEditOptions,
        nb::arg("flags"),
        "initialize current options (generally on application startup) if you want to select a default format, picker type, etc. User will be able to change many settings, unless you pass the _NoOptions flag to your calls.");

    m.def("tree_node",
        nb::overload_cast<const char *>(ImGui::TreeNode), nb::arg("label"));

    m.def("tree_node",
        [](const char * str_id, const char * fmt) -> bool
        {
            auto TreeNode_adapt_variadic_format = [](const char * str_id, const char * fmt) -> bool
            {
                auto lambda_result = ImGui::TreeNode(str_id, "%s", fmt);
                return lambda_result;
            };

            return TreeNode_adapt_variadic_format(str_id, fmt);
        },
        nb::arg("str_id"), nb::arg("fmt"),
        "helper variation to easily decorelate the id from the displayed string. Read the FAQ about why and how to use ID. to align arbitrary text at the same level as a TreeNode() you can use Bullet().");

    m.def("tree_node",
        [](const void * ptr_id, const char * fmt) -> bool
        {
            auto TreeNode_adapt_variadic_format = [](const void * ptr_id, const char * fmt) -> bool
            {
                auto lambda_result = ImGui::TreeNode(ptr_id, "%s", fmt);
                return lambda_result;
            };

            return TreeNode_adapt_variadic_format(ptr_id, fmt);
        },
        nb::arg("ptr_id"), nb::arg("fmt"),
        "\"");

    m.def("tree_node_ex",
        nb::overload_cast<const char *, ImGuiTreeNodeFlags>(ImGui::TreeNodeEx), nb::arg("label"), nb::arg("flags") = 0);

    m.def("tree_node_ex",
        [](const char * str_id, ImGuiTreeNodeFlags flags, const char * fmt) -> bool
        {
            auto TreeNodeEx_adapt_variadic_format = [](const char * str_id, ImGuiTreeNodeFlags flags, const char * fmt) -> bool
            {
                auto lambda_result = ImGui::TreeNodeEx(str_id, flags, "%s", fmt);
                return lambda_result;
            };

            return TreeNodeEx_adapt_variadic_format(str_id, flags, fmt);
        },     nb::arg("str_id"), nb::arg("flags"), nb::arg("fmt"));

    m.def("tree_node_ex",
        [](const void * ptr_id, ImGuiTreeNodeFlags flags, const char * fmt) -> bool
        {
            auto TreeNodeEx_adapt_variadic_format = [](const void * ptr_id, ImGuiTreeNodeFlags flags, const char * fmt) -> bool
            {
                auto lambda_result = ImGui::TreeNodeEx(ptr_id, flags, "%s", fmt);
                return lambda_result;
            };

            return TreeNodeEx_adapt_variadic_format(ptr_id, flags, fmt);
        },     nb::arg("ptr_id"), nb::arg("flags"), nb::arg("fmt"));

    m.def("tree_push",
        nb::overload_cast<const char *>(ImGui::TreePush),
        nb::arg("str_id"),
        "~ Indent()+PushID(). Already called by TreeNode() when returning True, but you can call TreePush/TreePop yourself if desired.");

    m.def("tree_push",
        nb::overload_cast<const void *>(ImGui::TreePush),
        nb::arg("ptr_id"),
        "\"");

    m.def("tree_pop",
        ImGui::TreePop, "~ Unindent()+PopID()");

    m.def("get_tree_node_to_label_spacing",
        ImGui::GetTreeNodeToLabelSpacing, "horizontal distance preceding label when using TreeNode*() or Bullet() == (g.FontSize + style.FramePadding.x*2) for a regular unframed TreeNode");

    m.def("collapsing_header",
        nb::overload_cast<const char *, ImGuiTreeNodeFlags>(ImGui::CollapsingHeader),
        nb::arg("label"), nb::arg("flags") = 0,
        "if returning 'True' the header is open. doesn't indent nor push on ID stack. user doesn't have to call TreePop().");

    m.def("collapsing_header",
        [](const char * label, bool p_visible, ImGuiTreeNodeFlags flags = 0) -> std::tuple<bool, bool>
        {
            auto CollapsingHeader_adapt_modifiable_immutable_to_return = [](const char * label, bool p_visible, ImGuiTreeNodeFlags flags = 0) -> std::tuple<bool, bool>
            {
                bool * p_visible_adapt_modifiable = & p_visible;

                bool r = ImGui::CollapsingHeader(label, p_visible_adapt_modifiable, flags);
                return std::make_tuple(r, p_visible);
            };

            return CollapsingHeader_adapt_modifiable_immutable_to_return(label, p_visible, flags);
        },
        nb::arg("label"), nb::arg("p_visible"), nb::arg("flags") = 0,
        "when 'p_visible != None': if '*p_visible==True' display an additional small close button on upper right of the header which will set the bool to False when clicked, if '*p_visible==False' don't display the header.");

    m.def("set_next_item_open",
        ImGui::SetNextItemOpen,
        nb::arg("is_open"), nb::arg("cond") = 0,
        "set next TreeNode/CollapsingHeader open state.");

    m.def("set_next_item_storage_id",
        ImGui::SetNextItemStorageID, nb::arg("storage_id"));

    m.def("selectable",
        [](const char * label, bool p_selected, ImGuiSelectableFlags flags = 0, const std::optional<const ImVec2> & size = std::nullopt) -> std::tuple<bool, bool>
        {
            auto Selectable_adapt_mutable_param_with_default_value = [](const char * label, bool * p_selected, ImGuiSelectableFlags flags = 0, const std::optional<const ImVec2> & size = std::nullopt) -> bool
            {

                const ImVec2& size_or_default = [&]() -> const ImVec2 {
                    if (size.has_value())
                        return size.value();
                    else
                        return ImVec2(0, 0);
                }();

                auto lambda_result = ImGui::Selectable(label, p_selected, flags, size_or_default);
                return lambda_result;
            };
            auto Selectable_adapt_modifiable_immutable_to_return = [&Selectable_adapt_mutable_param_with_default_value](const char * label, bool p_selected, ImGuiSelectableFlags flags = 0, const std::optional<const ImVec2> & size = std::nullopt) -> std::tuple<bool, bool>
            {
                bool * p_selected_adapt_modifiable = & p_selected;

                bool r = Selectable_adapt_mutable_param_with_default_value(label, p_selected_adapt_modifiable, flags, size);
                return std::make_tuple(r, p_selected);
            };

            return Selectable_adapt_modifiable_immutable_to_return(label, p_selected, flags, size);
        },
        nb::arg("label"), nb::arg("p_selected"), nb::arg("flags") = 0, nb::arg("size") = nb::none(),
        "---\nPython bindings defaults:\n    If size is None, then its default value will be: ImVec2(0, 0)\n\n \"bool* p_selected\" point to the selection state (read-write), as a convenient helper.");

    m.def("begin_multi_select",
        ImGui::BeginMultiSelect,
        nb::arg("flags"), nb::arg("selection_size") = -1, nb::arg("items_count") = -1,
        nb::rv_policy::reference);

    m.def("end_multi_select",
        ImGui::EndMultiSelect, nb::rv_policy::reference);

    m.def("set_next_item_selection_user_data",
        ImGui::SetNextItemSelectionUserData, nb::arg("selection_user_data"));

    m.def("is_item_toggled_selection",
        ImGui::IsItemToggledSelection, "Was the last item selection state toggled? Useful if you need the per-item information _before_ reaching EndMultiSelect(). We only returns toggle _event_ in order to handle clipping correctly.");

    m.def("begin_list_box",
        [](const char * label, const std::optional<const ImVec2> & size = std::nullopt) -> bool
        {
            auto BeginListBox_adapt_mutable_param_with_default_value = [](const char * label, const std::optional<const ImVec2> & size = std::nullopt) -> bool
            {

                const ImVec2& size_or_default = [&]() -> const ImVec2 {
                    if (size.has_value())
                        return size.value();
                    else
                        return ImVec2(0, 0);
                }();

                auto lambda_result = ImGui::BeginListBox(label, size_or_default);
                return lambda_result;
            };

            return BeginListBox_adapt_mutable_param_with_default_value(label, size);
        },
        nb::arg("label"), nb::arg("size") = nb::none(),
        "---\nPython bindings defaults:\n    If size is None, then its default value will be: ImVec2(0, 0)\n\n open a framed scrolling region");

    m.def("end_list_box",
        ImGui::EndListBox, "only call EndListBox() if BeginListBox() returned True!");

    m.def("list_box",
        [](const char * label, int current_item, const std::vector<std::string> & items, int height_in_items = -1) -> std::tuple<bool, int>
        {
            auto ListBox_adapt_modifiable_immutable_to_return = [](const char * label, int current_item, const char * const items[], int items_count, int height_in_items = -1) -> std::tuple<bool, int>
            {
                int * current_item_adapt_modifiable = & current_item;

                bool r = ImGui::ListBox(label, current_item_adapt_modifiable, items, items_count, height_in_items);
                return std::make_tuple(r, current_item);
            };
            auto ListBox_adapt_c_string_list = [&ListBox_adapt_modifiable_immutable_to_return](const char * label, int current_item, const std::vector<std::string> & items, int height_in_items = -1) -> std::tuple<bool, int>
            {
                std::vector<const char *> items_ptrs;
                items_ptrs.reserve(items.size());
                for (const auto& v: items)
                    items_ptrs.push_back(v.c_str());
                int items_count = static_cast<int>(items.size());

                auto lambda_result = ListBox_adapt_modifiable_immutable_to_return(label, current_item, items_ptrs.data(), items_count, height_in_items);
                return lambda_result;
            };

            return ListBox_adapt_c_string_list(label, current_item, items, height_in_items);
        },     nb::arg("label"), nb::arg("current_item"), nb::arg("items"), nb::arg("height_in_items") = -1);

    m.def("plot_lines",
        [](const char * label, const nb::ndarray<> & values, int values_offset = 0, std::optional<std::string> overlay_text = std::nullopt, float scale_min = FLT_MAX, float scale_max = FLT_MAX, const std::optional<const ImVec2> & graph_size = std::nullopt, int stride = -1)
        {
            auto PlotLines_adapt_c_buffers = [](const char * label, const nb::ndarray<> & values, int values_offset = 0, const char * overlay_text = NULL, float scale_min = FLT_MAX, float scale_max = FLT_MAX, ImVec2 graph_size = ImVec2(0, 0), int stride = -1)
            {
                // Check if the array is 1D and C-contiguous
                if (! (values.ndim() == 1 && values.stride(0) == 1))
                    throw std::runtime_error("The array must be 1D and contiguous");

                // convert nb::ndarray to C standard buffer (const)
                const void * values_from_pyarray = values.data();
                size_t values_count = values.shape(0);
                // Check the type of the ndarray (generic type and size)
                //   - Step 1: check the generic type (one of dtype_code::Int, UInt, Float, Bfloat, Complex, Bool = 6);
                uint8_t dtype_code_python_1 = values.dtype().code;
                uint8_t dtype_code_cpp_1 = static_cast<uint8_t>(nb::dlpack::dtype_code::Float);
                if (dtype_code_python_1 != dtype_code_cpp_1)
                    throw std::runtime_error(std::string(R"msg(
                            Bad type! While checking the generic type (dtype_code=Float)!
                        )msg"));
                //   - Step 2: check the size of the type
                size_t size_python_1 = values.dtype().bits / 8;
                size_t size_cpp_1 = sizeof(float);
                if (size_python_1 != size_cpp_1)
                    throw std::runtime_error(std::string(R"msg(
                            Bad type! Size mismatch, while checking the size of the type (for param "values")!
                        )msg"));

                // process stride default value (which was a sizeof in C++)
                int values_stride = stride;
                if (values_stride == -1)
                    values_stride = (int)values.itemsize();

                ImGui::PlotLines(label, static_cast<const float *>(values_from_pyarray), static_cast<int>(values_count), values_offset, overlay_text, scale_min, scale_max, graph_size, values_stride);
            };
            auto PlotLines_adapt_mutable_param_with_default_value = [&PlotLines_adapt_c_buffers](const char * label, const nb::ndarray<> & values, int values_offset = 0, const char * overlay_text = NULL, float scale_min = FLT_MAX, float scale_max = FLT_MAX, const std::optional<const ImVec2> & graph_size = std::nullopt, int stride = -1)
            {

                const ImVec2& graph_size_or_default = [&]() -> const ImVec2 {
                    if (graph_size.has_value())
                        return graph_size.value();
                    else
                        return ImVec2(0, 0);
                }();

                PlotLines_adapt_c_buffers(label, values, values_offset, overlay_text, scale_min, scale_max, graph_size_or_default, stride);
            };
            auto PlotLines_adapt_const_char_pointer_with_default_null = [&PlotLines_adapt_mutable_param_with_default_value](const char * label, const nb::ndarray<> & values, int values_offset = 0, std::optional<std::string> overlay_text = std::nullopt, float scale_min = FLT_MAX, float scale_max = FLT_MAX, const std::optional<const ImVec2> & graph_size = std::nullopt, int stride = -1)
            {
                const char * overlay_text_adapt_default_null = nullptr;
                if (overlay_text.has_value())
                    overlay_text_adapt_default_null = overlay_text.value().c_str();

                PlotLines_adapt_mutable_param_with_default_value(label, values, values_offset, overlay_text_adapt_default_null, scale_min, scale_max, graph_size, stride);
            };

            PlotLines_adapt_const_char_pointer_with_default_null(label, values, values_offset, overlay_text, scale_min, scale_max, graph_size, stride);
        },
        nb::arg("label"), nb::arg("values"), nb::arg("values_offset") = 0, nb::arg("overlay_text") = nb::none(), nb::arg("scale_min") = FLT_MAX, nb::arg("scale_max") = FLT_MAX, nb::arg("graph_size") = nb::none(), nb::arg("stride") = -1,
        "---\nPython bindings defaults:\n    If graph_size is None, then its default value will be: ImVec2(0, 0)");

    m.def("plot_histogram",
        [](const char * label, const nb::ndarray<> & values, int values_offset = 0, std::optional<std::string> overlay_text = std::nullopt, float scale_min = FLT_MAX, float scale_max = FLT_MAX, const std::optional<const ImVec2> & graph_size = std::nullopt, int stride = -1)
        {
            auto PlotHistogram_adapt_c_buffers = [](const char * label, const nb::ndarray<> & values, int values_offset = 0, const char * overlay_text = NULL, float scale_min = FLT_MAX, float scale_max = FLT_MAX, ImVec2 graph_size = ImVec2(0, 0), int stride = -1)
            {
                // Check if the array is 1D and C-contiguous
                if (! (values.ndim() == 1 && values.stride(0) == 1))
                    throw std::runtime_error("The array must be 1D and contiguous");

                // convert nb::ndarray to C standard buffer (const)
                const void * values_from_pyarray = values.data();
                size_t values_count = values.shape(0);
                // Check the type of the ndarray (generic type and size)
                //   - Step 1: check the generic type (one of dtype_code::Int, UInt, Float, Bfloat, Complex, Bool = 6);
                uint8_t dtype_code_python_1 = values.dtype().code;
                uint8_t dtype_code_cpp_1 = static_cast<uint8_t>(nb::dlpack::dtype_code::Float);
                if (dtype_code_python_1 != dtype_code_cpp_1)
                    throw std::runtime_error(std::string(R"msg(
                            Bad type! While checking the generic type (dtype_code=Float)!
                        )msg"));
                //   - Step 2: check the size of the type
                size_t size_python_1 = values.dtype().bits / 8;
                size_t size_cpp_1 = sizeof(float);
                if (size_python_1 != size_cpp_1)
                    throw std::runtime_error(std::string(R"msg(
                            Bad type! Size mismatch, while checking the size of the type (for param "values")!
                        )msg"));

                // process stride default value (which was a sizeof in C++)
                int values_stride = stride;
                if (values_stride == -1)
                    values_stride = (int)values.itemsize();

                ImGui::PlotHistogram(label, static_cast<const float *>(values_from_pyarray), static_cast<int>(values_count), values_offset, overlay_text, scale_min, scale_max, graph_size, values_stride);
            };
            auto PlotHistogram_adapt_mutable_param_with_default_value = [&PlotHistogram_adapt_c_buffers](const char * label, const nb::ndarray<> & values, int values_offset = 0, const char * overlay_text = NULL, float scale_min = FLT_MAX, float scale_max = FLT_MAX, const std::optional<const ImVec2> & graph_size = std::nullopt, int stride = -1)
            {

                const ImVec2& graph_size_or_default = [&]() -> const ImVec2 {
                    if (graph_size.has_value())
                        return graph_size.value();
                    else
                        return ImVec2(0, 0);
                }();

                PlotHistogram_adapt_c_buffers(label, values, values_offset, overlay_text, scale_min, scale_max, graph_size_or_default, stride);
            };
            auto PlotHistogram_adapt_const_char_pointer_with_default_null = [&PlotHistogram_adapt_mutable_param_with_default_value](const char * label, const nb::ndarray<> & values, int values_offset = 0, std::optional<std::string> overlay_text = std::nullopt, float scale_min = FLT_MAX, float scale_max = FLT_MAX, const std::optional<const ImVec2> & graph_size = std::nullopt, int stride = -1)
            {
                const char * overlay_text_adapt_default_null = nullptr;
                if (overlay_text.has_value())
                    overlay_text_adapt_default_null = overlay_text.value().c_str();

                PlotHistogram_adapt_mutable_param_with_default_value(label, values, values_offset, overlay_text_adapt_default_null, scale_min, scale_max, graph_size, stride);
            };

            PlotHistogram_adapt_const_char_pointer_with_default_null(label, values, values_offset, overlay_text, scale_min, scale_max, graph_size, stride);
        },
        nb::arg("label"), nb::arg("values"), nb::arg("values_offset") = 0, nb::arg("overlay_text") = nb::none(), nb::arg("scale_min") = FLT_MAX, nb::arg("scale_max") = FLT_MAX, nb::arg("graph_size") = nb::none(), nb::arg("stride") = -1,
        "---\nPython bindings defaults:\n    If graph_size is None, then its default value will be: ImVec2(0, 0)");

    m.def("value",
        nb::overload_cast<const char *, bool>(ImGui::Value), nb::arg("prefix"), nb::arg("b"));

    m.def("value",
        nb::overload_cast<const char *, int>(ImGui::Value), nb::arg("prefix"), nb::arg("v"));

    m.def("value",
        nb::overload_cast<const char *, unsigned int>(ImGui::Value), nb::arg("prefix"), nb::arg("v"));

    m.def("value",
        [](const char * prefix, float v, std::optional<std::string> float_format = std::nullopt)
        {
            auto Value_adapt_const_char_pointer_with_default_null = [](const char * prefix, float v, std::optional<std::string> float_format = std::nullopt)
            {
                const char * float_format_adapt_default_null = nullptr;
                if (float_format.has_value())
                    float_format_adapt_default_null = float_format.value().c_str();

                ImGui::Value(prefix, v, float_format_adapt_default_null);
            };

            Value_adapt_const_char_pointer_with_default_null(prefix, v, float_format);
        },     nb::arg("prefix"), nb::arg("v"), nb::arg("float_format") = nb::none());

    m.def("begin_menu_bar",
        ImGui::BeginMenuBar, "append to menu-bar of current window (requires ImGuiWindowFlags_MenuBar flag set on parent window).");

    m.def("end_menu_bar",
        ImGui::EndMenuBar, "only call EndMenuBar() if BeginMenuBar() returns True!");

    m.def("begin_main_menu_bar",
        ImGui::BeginMainMenuBar, "create and append to a full screen menu-bar.");

    m.def("end_main_menu_bar",
        ImGui::EndMainMenuBar, "only call EndMainMenuBar() if BeginMainMenuBar() returns True!");

    m.def("begin_menu",
        ImGui::BeginMenu,
        nb::arg("label"), nb::arg("enabled") = true,
        "create a sub-menu entry. only call EndMenu() if this returns True!");

    m.def("end_menu",
        ImGui::EndMenu, "only call EndMenu() if BeginMenu() returns True!");
    // #ifdef IMGUI_BUNDLE_PYTHON_API
    //

    m.def("menu_item_simple",
        [](const char * label, std::optional<std::string> shortcut = std::nullopt, bool selected = false, bool enabled = true) -> bool
        {
            auto MenuItemSimple_adapt_const_char_pointer_with_default_null = [](const char * label, std::optional<std::string> shortcut = std::nullopt, bool selected = false, bool enabled = true) -> bool
            {
                const char * shortcut_adapt_default_null = nullptr;
                if (shortcut.has_value())
                    shortcut_adapt_default_null = shortcut.value().c_str();

                auto lambda_result = ImGui::MenuItemSimple(label, shortcut_adapt_default_null, selected, enabled);
                return lambda_result;
            };

            return MenuItemSimple_adapt_const_char_pointer_with_default_null(label, shortcut, selected, enabled);
        },
        nb::arg("label"), nb::arg("shortcut") = nb::none(), nb::arg("selected") = false, nb::arg("enabled") = true,
        "(private API)");
    // #endif
    //

    m.def("menu_item",
        [](const char * label, const char * shortcut, bool p_selected, bool enabled = true) -> std::tuple<bool, bool>
        {
            auto MenuItem_adapt_modifiable_immutable_to_return = [](const char * label, const char * shortcut, bool p_selected, bool enabled = true) -> std::tuple<bool, bool>
            {
                bool * p_selected_adapt_modifiable = & p_selected;

                bool r = ImGui::MenuItem(label, shortcut, p_selected_adapt_modifiable, enabled);
                return std::make_tuple(r, p_selected);
            };

            return MenuItem_adapt_modifiable_immutable_to_return(label, shortcut, p_selected, enabled);
        },
        nb::arg("label"), nb::arg("shortcut"), nb::arg("p_selected"), nb::arg("enabled") = true,
        "return True when activated + toggle (*p_selected) if p_selected != None");

    m.def("begin_tooltip",
        ImGui::BeginTooltip, "begin/append a tooltip window.");

    m.def("end_tooltip",
        ImGui::EndTooltip, "only call EndTooltip() if BeginTooltip()/BeginItemTooltip() returns True!");

    m.def("set_tooltip",
        [](const char * fmt)
        {
            auto SetTooltip_adapt_variadic_format = [](const char * fmt)
            {
                ImGui::SetTooltip("%s", fmt);
            };

            SetTooltip_adapt_variadic_format(fmt);
        },
        nb::arg("fmt"),
        "set a text-only tooltip. Often used after a ImGui::IsItemHovered() check. Override any previous call to SetTooltip().");

    m.def("begin_item_tooltip",
        ImGui::BeginItemTooltip, "begin/append a tooltip window if preceding item was hovered.");

    m.def("set_item_tooltip",
        [](const char * fmt)
        {
            auto SetItemTooltip_adapt_variadic_format = [](const char * fmt)
            {
                ImGui::SetItemTooltip("%s", fmt);
            };

            SetItemTooltip_adapt_variadic_format(fmt);
        },
        nb::arg("fmt"),
        "set a text-only tooltip if preceding item was hovered. override any previous call to SetTooltip().");

    m.def("begin_popup",
        nb::overload_cast<const char *, ImGuiWindowFlags>(ImGui::BeginPopup),
        nb::arg("str_id"), nb::arg("flags") = 0,
        "return True if the popup is open, and you can start outputting to it.");

    m.def("begin_popup_modal",
        [](const char * name, std::optional<bool> p_open = std::nullopt, ImGuiWindowFlags flags = 0) -> std::tuple<bool, std::optional<bool>>
        {
            auto BeginPopupModal_adapt_modifiable_immutable_to_return = [](const char * name, std::optional<bool> p_open = std::nullopt, ImGuiWindowFlags flags = 0) -> std::tuple<bool, std::optional<bool>>
            {
                bool * p_open_adapt_modifiable = nullptr;
                if (p_open.has_value())
                    p_open_adapt_modifiable = & (*p_open);

                bool r = ImGui::BeginPopupModal(name, p_open_adapt_modifiable, flags);
                return std::make_tuple(r, p_open);
            };

            return BeginPopupModal_adapt_modifiable_immutable_to_return(name, p_open, flags);
        },
        nb::arg("name"), nb::arg("p_open") = nb::none(), nb::arg("flags") = 0,
        "return True if the modal is open, and you can start outputting to it.");

    m.def("end_popup",
        nb::overload_cast<>(ImGui::EndPopup), "only call EndPopup() if BeginPopupXXX() returns True!");

    m.def("open_popup",
        nb::overload_cast<const char *, ImGuiPopupFlags>(ImGui::OpenPopup),
        nb::arg("str_id"), nb::arg("popup_flags") = 0,
        "call to mark popup as open (don't call every frame!).");

    m.def("open_popup",
        nb::overload_cast<ImGuiID, ImGuiPopupFlags>(ImGui::OpenPopup),
        nb::arg("id_"), nb::arg("popup_flags") = 0,
        "id overload to facilitate calling from nested stacks");

    m.def("open_popup_on_item_click",
        [](std::optional<std::string> str_id = std::nullopt, ImGuiPopupFlags popup_flags = 1)
        {
            auto OpenPopupOnItemClick_adapt_const_char_pointer_with_default_null = [](std::optional<std::string> str_id = std::nullopt, ImGuiPopupFlags popup_flags = 1)
            {
                const char * str_id_adapt_default_null = nullptr;
                if (str_id.has_value())
                    str_id_adapt_default_null = str_id.value().c_str();

                ImGui::OpenPopupOnItemClick(str_id_adapt_default_null, popup_flags);
            };

            OpenPopupOnItemClick_adapt_const_char_pointer_with_default_null(str_id, popup_flags);
        },
        nb::arg("str_id") = nb::none(), nb::arg("popup_flags") = 1,
        "helper to open popup when clicked on last item. Default to ImGuiPopupFlags_MouseButtonRight == 1. (note: actually triggers on the mouse _released_ event to be consistent with popup behaviors)");

    m.def("close_current_popup",
        nb::overload_cast<>(ImGui::CloseCurrentPopup), "manually close the popup we have begin-ed into.");

    m.def("begin_popup_context_item",
        [](std::optional<std::string> str_id = std::nullopt, ImGuiPopupFlags popup_flags = 1) -> bool
        {
            auto BeginPopupContextItem_adapt_const_char_pointer_with_default_null = [](std::optional<std::string> str_id = std::nullopt, ImGuiPopupFlags popup_flags = 1) -> bool
            {
                const char * str_id_adapt_default_null = nullptr;
                if (str_id.has_value())
                    str_id_adapt_default_null = str_id.value().c_str();

                auto lambda_result = ImGui::BeginPopupContextItem(str_id_adapt_default_null, popup_flags);
                return lambda_result;
            };

            return BeginPopupContextItem_adapt_const_char_pointer_with_default_null(str_id, popup_flags);
        },
        nb::arg("str_id") = nb::none(), nb::arg("popup_flags") = 1,
        "open+begin popup when clicked on last item. Use str_id==None to associate the popup to previous item. If you want to use that on a non-interactive item such as Text() you need to pass in an explicit ID here. read comments in .cpp!");

    m.def("begin_popup_context_window",
        [](std::optional<std::string> str_id = std::nullopt, ImGuiPopupFlags popup_flags = 1) -> bool
        {
            auto BeginPopupContextWindow_adapt_const_char_pointer_with_default_null = [](std::optional<std::string> str_id = std::nullopt, ImGuiPopupFlags popup_flags = 1) -> bool
            {
                const char * str_id_adapt_default_null = nullptr;
                if (str_id.has_value())
                    str_id_adapt_default_null = str_id.value().c_str();

                auto lambda_result = ImGui::BeginPopupContextWindow(str_id_adapt_default_null, popup_flags);
                return lambda_result;
            };

            return BeginPopupContextWindow_adapt_const_char_pointer_with_default_null(str_id, popup_flags);
        },
        nb::arg("str_id") = nb::none(), nb::arg("popup_flags") = 1,
        "open+begin popup when clicked on current window.");

    m.def("begin_popup_context_void",
        [](std::optional<std::string> str_id = std::nullopt, ImGuiPopupFlags popup_flags = 1) -> bool
        {
            auto BeginPopupContextVoid_adapt_const_char_pointer_with_default_null = [](std::optional<std::string> str_id = std::nullopt, ImGuiPopupFlags popup_flags = 1) -> bool
            {
                const char * str_id_adapt_default_null = nullptr;
                if (str_id.has_value())
                    str_id_adapt_default_null = str_id.value().c_str();

                auto lambda_result = ImGui::BeginPopupContextVoid(str_id_adapt_default_null, popup_flags);
                return lambda_result;
            };

            return BeginPopupContextVoid_adapt_const_char_pointer_with_default_null(str_id, popup_flags);
        },
        nb::arg("str_id") = nb::none(), nb::arg("popup_flags") = 1,
        "open+begin popup when clicked in None (where there are no windows).");

    m.def("is_popup_open",
        nb::overload_cast<const char *, ImGuiPopupFlags>(ImGui::IsPopupOpen),
        nb::arg("str_id"), nb::arg("flags") = 0,
        "return True if the popup is open.");

    m.def("begin_table",
        [](const char * str_id, int columns, ImGuiTableFlags flags = 0, const std::optional<const ImVec2> & outer_size = std::nullopt, float inner_width = 0.0f) -> bool
        {
            auto BeginTable_adapt_mutable_param_with_default_value = [](const char * str_id, int columns, ImGuiTableFlags flags = 0, const std::optional<const ImVec2> & outer_size = std::nullopt, float inner_width = 0.0f) -> bool
            {

                const ImVec2& outer_size_or_default = [&]() -> const ImVec2 {
                    if (outer_size.has_value())
                        return outer_size.value();
                    else
                        return ImVec2(0.0f, 0.0f);
                }();

                auto lambda_result = ImGui::BeginTable(str_id, columns, flags, outer_size_or_default, inner_width);
                return lambda_result;
            };

            return BeginTable_adapt_mutable_param_with_default_value(str_id, columns, flags, outer_size, inner_width);
        },
        nb::arg("str_id"), nb::arg("columns"), nb::arg("flags") = 0, nb::arg("outer_size") = nb::none(), nb::arg("inner_width") = 0.0f,
        "---\nPython bindings defaults:\n    If outer_size is None, then its default value will be: ImVec2(0.0, 0.0)");

    m.def("end_table",
        ImGui::EndTable, "only call EndTable() if BeginTable() returns True!");

    m.def("table_next_row",
        nb::overload_cast<ImGuiTableRowFlags, float>(ImGui::TableNextRow),
        nb::arg("row_flags") = 0, nb::arg("min_row_height") = 0.0f,
        "append into the first cell of a new row.");

    m.def("table_next_column",
        nb::overload_cast<>(ImGui::TableNextColumn), "append into the next column (or first column of next row if currently in last column). Return True when column is visible.");

    m.def("table_set_column_index",
        nb::overload_cast<int>(ImGui::TableSetColumnIndex),
        nb::arg("column_n"),
        "append into the specified column. Return True when column is visible.");

    m.def("table_setup_column",
        nb::overload_cast<const char *, ImGuiTableColumnFlags, float, ImGuiID>(ImGui::TableSetupColumn), nb::arg("label"), nb::arg("flags") = 0, nb::arg("init_width_or_weight") = 0.0f, nb::arg("user_id") = 0);

    m.def("table_setup_scroll_freeze",
        nb::overload_cast<int, int>(ImGui::TableSetupScrollFreeze),
        nb::arg("cols"), nb::arg("rows"),
        "lock columns/rows so they stay visible when scrolled.");

    m.def("table_header",
        nb::overload_cast<const char *>(ImGui::TableHeader),
        nb::arg("label"),
        "submit one header cell manually (rarely used)");

    m.def("table_headers_row",
        nb::overload_cast<>(ImGui::TableHeadersRow), "submit a row with headers cells based on data provided to TableSetupColumn() + submit context menu");

    m.def("table_angled_headers_row",
        nb::overload_cast<>(ImGui::TableAngledHeadersRow), "submit a row with angled headers for every column with the ImGuiTableColumnFlags_AngledHeader flag. MUST BE FIRST ROW.");

    m.def("table_get_sort_specs",
        nb::overload_cast<>(ImGui::TableGetSortSpecs),
        "get latest sort specs for the table (None if not sorting).  Lifetime: don't hold on this pointer over multiple frames or past any subsequent call to BeginTable().",
        nb::rv_policy::reference);

    m.def("table_get_column_count",
        nb::overload_cast<>(ImGui::TableGetColumnCount), "return number of columns (value passed to BeginTable)");

    m.def("table_get_column_index",
        nb::overload_cast<>(ImGui::TableGetColumnIndex), "return current column index.");

    m.def("table_get_row_index",
        nb::overload_cast<>(ImGui::TableGetRowIndex), "return current row index.");

    m.def("table_get_column_name",
        nb::overload_cast<int>(ImGui::TableGetColumnName),
        nb::arg("column_n") = -1,
        "return \"\" if column didn't have a name declared by TableSetupColumn(). Pass -1 to use current column.",
        nb::rv_policy::reference);

    m.def("table_get_column_flags",
        nb::overload_cast<int>(ImGui::TableGetColumnFlags),
        nb::arg("column_n") = -1,
        "return column flags so you can query their Enabled/Visible/Sorted/Hovered status flags. Pass -1 to use current column.");

    m.def("table_set_column_enabled",
        nb::overload_cast<int, bool>(ImGui::TableSetColumnEnabled),
        nb::arg("column_n"), nb::arg("v"),
        "change user accessible enabled/disabled state of a column. Set to False to hide the column. User can use the context menu to change this themselves (right-click in headers, or right-click in columns body with ImGuiTableFlags_ContextMenuInBody)");

    m.def("table_get_hovered_column",
        nb::overload_cast<>(ImGui::TableGetHoveredColumn), "return hovered column. return -1 when table is not hovered. return columns_count if the unused space at the right of visible columns is hovered. Can also use (TableGetColumnFlags() & ImGuiTableColumnFlags_IsHovered) instead.");

    m.def("table_set_bg_color",
        nb::overload_cast<ImGuiTableBgTarget, ImU32, int>(ImGui::TableSetBgColor),
        nb::arg("target"), nb::arg("color"), nb::arg("column_n") = -1,
        "change the color of a cell, row, or column. See ImGuiTableBgTarget_ flags for details.");

    m.def("columns",
        [](int count = 1, std::optional<std::string> id = std::nullopt, bool borders = true)
        {
            auto Columns_adapt_const_char_pointer_with_default_null = [](int count = 1, std::optional<std::string> id = std::nullopt, bool borders = true)
            {
                const char * id_adapt_default_null = nullptr;
                if (id.has_value())
                    id_adapt_default_null = id.value().c_str();

                ImGui::Columns(count, id_adapt_default_null, borders);
            };

            Columns_adapt_const_char_pointer_with_default_null(count, id, borders);
        },     nb::arg("count") = 1, nb::arg("id_") = nb::none(), nb::arg("borders") = true);

    m.def("next_column",
        ImGui::NextColumn, "next column, defaults to current row or next row if the current row is finished");

    m.def("get_column_index",
        ImGui::GetColumnIndex, "get current column index");

    m.def("get_column_width",
        ImGui::GetColumnWidth,
        nb::arg("column_index") = -1,
        "get column width (in pixels). pass -1 to use current column");

    m.def("set_column_width",
        ImGui::SetColumnWidth,
        nb::arg("column_index"), nb::arg("width"),
        "set column width (in pixels). pass -1 to use current column");

    m.def("get_column_offset",
        ImGui::GetColumnOffset,
        nb::arg("column_index") = -1,
        "get position of column line (in pixels, from the left side of the contents region). pass -1 to use current column, otherwise 0..GetColumnsCount() inclusive. column 0 is typically 0.0");

    m.def("set_column_offset",
        ImGui::SetColumnOffset,
        nb::arg("column_index"), nb::arg("offset_x"),
        "set position of column line (in pixels, from the left side of the contents region). pass -1 to use current column");

    m.def("get_columns_count",
        ImGui::GetColumnsCount);

    m.def("begin_tab_bar",
        ImGui::BeginTabBar,
        nb::arg("str_id"), nb::arg("flags") = 0,
        "create and append into a TabBar");

    m.def("end_tab_bar",
        ImGui::EndTabBar, "only call EndTabBar() if BeginTabBar() returns True!");

    m.def("begin_tab_item",
        [](const char * label, std::optional<bool> p_open = std::nullopt, ImGuiTabItemFlags flags = 0) -> std::tuple<bool, std::optional<bool>>
        {
            auto BeginTabItem_adapt_modifiable_immutable_to_return = [](const char * label, std::optional<bool> p_open = std::nullopt, ImGuiTabItemFlags flags = 0) -> std::tuple<bool, std::optional<bool>>
            {
                bool * p_open_adapt_modifiable = nullptr;
                if (p_open.has_value())
                    p_open_adapt_modifiable = & (*p_open);

                bool r = ImGui::BeginTabItem(label, p_open_adapt_modifiable, flags);
                return std::make_tuple(r, p_open);
            };

            return BeginTabItem_adapt_modifiable_immutable_to_return(label, p_open, flags);
        },     nb::arg("label"), nb::arg("p_open") = nb::none(), nb::arg("flags") = 0);
    // #ifdef IMGUI_BUNDLE_PYTHON_API
    //

    m.def("begin_tab_item_simple",
        ImGui::BeginTabItemSimple, nb::arg("label"), nb::arg("flags") = 0);
    // #endif
    //

    m.def("end_tab_item",
        ImGui::EndTabItem, "only call EndTabItem() if BeginTabItem() returns True!");

    m.def("tab_item_button",
        ImGui::TabItemButton,
        nb::arg("label"), nb::arg("flags") = 0,
        "create a Tab behaving like a button. return True when clicked. cannot be selected in the tab bar.");

    m.def("set_tab_item_closed",
        ImGui::SetTabItemClosed,
        nb::arg("tab_or_docked_window_label"),
        "notify TabBar or Docking system of a closed tab/window ahead (useful to reduce visual flicker on reorderable tab bars). For tab-bar: call after BeginTabBar() and before Tab submissions. Otherwise call with a window name.");

    m.def("dock_space",
        [](ImGuiID dockspace_id, const std::optional<const ImVec2> & size = std::nullopt, ImGuiDockNodeFlags flags = 0, const ImGuiWindowClass * window_class = NULL) -> ImGuiID
        {
            auto DockSpace_adapt_mutable_param_with_default_value = [](ImGuiID dockspace_id, const std::optional<const ImVec2> & size = std::nullopt, ImGuiDockNodeFlags flags = 0, const ImGuiWindowClass * window_class = NULL) -> ImGuiID
            {

                const ImVec2& size_or_default = [&]() -> const ImVec2 {
                    if (size.has_value())
                        return size.value();
                    else
                        return ImVec2(0, 0);
                }();

                auto lambda_result = ImGui::DockSpace(dockspace_id, size_or_default, flags, window_class);
                return lambda_result;
            };

            return DockSpace_adapt_mutable_param_with_default_value(dockspace_id, size, flags, window_class);
        },
        nb::arg("dockspace_id"), nb::arg("size") = nb::none(), nb::arg("flags") = 0, nb::arg("window_class") = nb::none(),
        "---\nPython bindings defaults:\n    If size is None, then its default value will be: ImVec2(0, 0)");

    m.def("dock_space_over_viewport",
        ImGui::DockSpaceOverViewport, nb::arg("dockspace_id") = 0, nb::arg("viewport") = nb::none(), nb::arg("flags") = 0, nb::arg("window_class") = nb::none());

    m.def("set_next_window_dock_id",
        ImGui::SetNextWindowDockID,
        nb::arg("dock_id"), nb::arg("cond") = 0,
        "set next window dock id");

    m.def("set_next_window_class",
        ImGui::SetNextWindowClass,
        nb::arg("window_class"),
        "set next window class (control docking compatibility + provide hints to platform backend via custom viewport flags and platform parent/child relationship)");

    m.def("get_window_dock_id",
        ImGui::GetWindowDockID);

    m.def("is_window_docked",
        ImGui::IsWindowDocked, "is current window docked into another window?");

    m.def("log_to_tty",
        ImGui::LogToTTY,
        nb::arg("auto_open_depth") = -1,
        "start logging to tty (stdout)");

    m.def("log_to_file",
        [](int auto_open_depth = -1, std::optional<std::string> filename = std::nullopt)
        {
            auto LogToFile_adapt_const_char_pointer_with_default_null = [](int auto_open_depth = -1, std::optional<std::string> filename = std::nullopt)
            {
                const char * filename_adapt_default_null = nullptr;
                if (filename.has_value())
                    filename_adapt_default_null = filename.value().c_str();

                ImGui::LogToFile(auto_open_depth, filename_adapt_default_null);
            };

            LogToFile_adapt_const_char_pointer_with_default_null(auto_open_depth, filename);
        },
        nb::arg("auto_open_depth") = -1, nb::arg("filename") = nb::none(),
        "start logging to file");

    m.def("log_to_clipboard",
        ImGui::LogToClipboard,
        nb::arg("auto_open_depth") = -1,
        "start logging to OS clipboard");

    m.def("log_finish",
        ImGui::LogFinish, "stop logging (close file, etc.)");

    m.def("log_buttons",
        ImGui::LogButtons, "helper to display buttons for logging to tty/file/clipboard");

    m.def("log_text",
        [](const char * fmt)
        {
            auto LogText_adapt_variadic_format = [](const char * fmt)
            {
                ImGui::LogText("%s", fmt);
            };

            LogText_adapt_variadic_format(fmt);
        },
        nb::arg("fmt"),
        "pass text data straight to log (without being displayed)");

    m.def("begin_drag_drop_source",
        ImGui::BeginDragDropSource,
        nb::arg("flags") = 0,
        "call after submitting an item which may be dragged. when this return True, you can call SetDragDropPayload() + EndDragDropSource()");

    m.def("set_drag_drop_payload",
        ImGui::SetDragDropPayload,
        nb::arg("type"), nb::arg("data"), nb::arg("sz"), nb::arg("cond") = 0,
        "type is a user defined string of maximum 32 characters. Strings starting with '_' are reserved for dear imgui internal types. Data is copied and held by imgui. Return True when payload has been accepted.");

    m.def("end_drag_drop_source",
        ImGui::EndDragDropSource, "only call EndDragDropSource() if BeginDragDropSource() returns True!");

    m.def("begin_drag_drop_target",
        ImGui::BeginDragDropTarget, "call after submitting an item that may receive a payload. If this returns True, you can call AcceptDragDropPayload() + EndDragDropTarget()");

    m.def("end_drag_drop_target",
        ImGui::EndDragDropTarget, "only call EndDragDropTarget() if BeginDragDropTarget() returns True!");

    m.def("begin_disabled",
        ImGui::BeginDisabled, nb::arg("disabled") = true);

    m.def("end_disabled",
        ImGui::EndDisabled);

    m.def("push_clip_rect",
        ImGui::PushClipRect, nb::arg("clip_rect_min"), nb::arg("clip_rect_max"), nb::arg("intersect_with_current_clip_rect"));

    m.def("pop_clip_rect",
        ImGui::PopClipRect);

    m.def("set_item_default_focus",
        ImGui::SetItemDefaultFocus, "make last item the default focused item of of a newly appearing window.");

    m.def("set_keyboard_focus_here",
        ImGui::SetKeyboardFocusHere,
        nb::arg("offset") = 0,
        "focus keyboard on the next widget. Use positive 'offset' to access sub components of a multiple component widget. Use -1 to access previous widget.");

    m.def("set_nav_cursor_visible",
        ImGui::SetNavCursorVisible,
        nb::arg("visible"),
        "alter visibility of keyboard/gamepad cursor. by default: show when using an arrow key, hide when clicking with mouse.");

    m.def("set_next_item_allow_overlap",
        ImGui::SetNextItemAllowOverlap, "allow next item to be overlapped by a subsequent item. Useful with invisible buttons, selectable, treenode covering an area where subsequent items may need to be added. Note that both Selectable() and TreeNode() have dedicated flags doing this.");

    m.def("is_item_hovered",
        ImGui::IsItemHovered,
        nb::arg("flags") = 0,
        "is the last item hovered? (and usable, aka not blocked by a popup, etc.). See ImGuiHoveredFlags for more options.");

    m.def("is_item_active",
        ImGui::IsItemActive, "is the last item active? (e.g. button being held, text field being edited. This will continuously return True while holding mouse button on an item. Items that don't interact will always return False)");

    m.def("is_item_focused",
        ImGui::IsItemFocused, "is the last item focused for keyboard/gamepad navigation?");

    m.def("is_item_clicked",
        ImGui::IsItemClicked,
        nb::arg("mouse_button") = 0,
        "is the last item hovered and mouse clicked on? (**)  == IsMouseClicked(mouse_button) && IsItemHovered()Important. (**) this is NOT equivalent to the behavior of e.g. Button(). Read comments in function definition.");

    m.def("is_item_visible",
        ImGui::IsItemVisible, "is the last item visible? (items may be out of sight because of clipping/scrolling)");

    m.def("is_item_edited",
        ImGui::IsItemEdited, "did the last item modify its underlying value this frame? or was pressed? This is generally the same as the \"bool\" return value of many widgets.");

    m.def("is_item_activated",
        ImGui::IsItemActivated, "was the last item just made active (item was previously inactive).");

    m.def("is_item_deactivated",
        ImGui::IsItemDeactivated, "was the last item just made inactive (item was previously active). Useful for Undo/Redo patterns with widgets that require continuous editing.");

    m.def("is_item_deactivated_after_edit",
        ImGui::IsItemDeactivatedAfterEdit, "was the last item just made inactive and made a value change when it was active? (e.g. Slider/Drag moved). Useful for Undo/Redo patterns with widgets that require continuous editing. Note that you may get False positives (some widgets such as Combo()/ListBox()/Selectable() will return True even when clicking an already selected item).");

    m.def("is_item_toggled_open",
        ImGui::IsItemToggledOpen, "was the last item open state toggled? set by TreeNode().");

    m.def("is_any_item_hovered",
        ImGui::IsAnyItemHovered, "is any item hovered?");

    m.def("is_any_item_active",
        ImGui::IsAnyItemActive, "is any item active?");

    m.def("is_any_item_focused",
        ImGui::IsAnyItemFocused, "is any item focused?");

    m.def("get_item_id",
        ImGui::GetItemID, "get ID of last item (~~ often same ImGui::GetID(label) beforehand)");

    m.def("get_item_rect_min",
        ImGui::GetItemRectMin, "get upper-left bounding rectangle of the last item (screen space)");

    m.def("get_item_rect_max",
        ImGui::GetItemRectMax, "get lower-right bounding rectangle of the last item (screen space)");

    m.def("get_item_rect_size",
        ImGui::GetItemRectSize, "get size of last item");

    m.def("get_main_viewport",
        ImGui::GetMainViewport,
        "return primary/default viewport. This can never be None.",
        nb::rv_policy::reference);

    m.def("get_background_draw_list",
        nb::overload_cast<ImGuiViewport *>(ImGui::GetBackgroundDrawList),
        nb::arg("viewport") = nb::none(),
        "get background draw list for the given viewport or viewport associated to the current window. this draw list will be the first rendering one. Useful to quickly draw shapes/text behind dear imgui contents.",
        nb::rv_policy::reference);

    m.def("get_foreground_draw_list",
        nb::overload_cast<ImGuiViewport *>(ImGui::GetForegroundDrawList),
        nb::arg("viewport") = nb::none(),
        "get foreground draw list for the given viewport or viewport associated to the current window. this draw list will be the top-most rendered one. Useful to quickly draw shapes/text over dear imgui contents.",
        nb::rv_policy::reference);

    m.def("is_rect_visible",
        nb::overload_cast<const ImVec2 &>(ImGui::IsRectVisible),
        nb::arg("size"),
        "test if rectangle (of given size, starting from cursor position) is visible / not clipped.");

    m.def("is_rect_visible",
        nb::overload_cast<const ImVec2 &, const ImVec2 &>(ImGui::IsRectVisible),
        nb::arg("rect_min"), nb::arg("rect_max"),
        "test if rectangle (in screen space) is visible / not clipped. to perform coarse clipping on user's side.");

    m.def("get_time",
        ImGui::GetTime, "get global imgui time. incremented by io.DeltaTime every frame.");

    m.def("get_frame_count",
        ImGui::GetFrameCount, "get global imgui frame count. incremented by 1 every frame.");

    m.def("get_draw_list_shared_data",
        nb::overload_cast<>(ImGui::GetDrawListSharedData),
        "you may use this when creating your own ImDrawList instances.",
        nb::rv_policy::reference);

    m.def("get_style_color_name",
        ImGui::GetStyleColorName,
        nb::arg("idx"),
        "get a string corresponding to the enum value (for display, saving, etc.).",
        nb::rv_policy::reference);

    m.def("set_state_storage",
        ImGui::SetStateStorage,
        nb::arg("storage"),
        "replace current window storage with our own (if you want to manipulate it yourself, typically clear subsection of it)");

    m.def("get_state_storage",
        ImGui::GetStateStorage, nb::rv_policy::reference);

    m.def("calc_text_size",
        [](const char * text, std::optional<std::string> text_end = std::nullopt, bool hide_text_after_double_hash = false, float wrap_width = -1.0f) -> ImVec2
        {
            auto CalcTextSize_adapt_const_char_pointer_with_default_null = [](const char * text, std::optional<std::string> text_end = std::nullopt, bool hide_text_after_double_hash = false, float wrap_width = -1.0f) -> ImVec2
            {
                const char * text_end_adapt_default_null = nullptr;
                if (text_end.has_value())
                    text_end_adapt_default_null = text_end.value().c_str();

                auto lambda_result = ImGui::CalcTextSize(text, text_end_adapt_default_null, hide_text_after_double_hash, wrap_width);
                return lambda_result;
            };

            return CalcTextSize_adapt_const_char_pointer_with_default_null(text, text_end, hide_text_after_double_hash, wrap_width);
        },
        nb::arg("text"), nb::arg("text_end") = nb::none(), nb::arg("hide_text_after_double_hash") = false, nb::arg("wrap_width") = -1.0f,
        "Text Utilities");

    m.def("color_convert_u32_to_float4",
        ImGui::ColorConvertU32ToFloat4, nb::arg("in_"));

    m.def("color_convert_float4_to_u32",
        ImGui::ColorConvertFloat4ToU32, nb::arg("in_"));

    m.def("color_convert_rgb_to_hsv",
        [](float r, float g, float b, float out_h, float out_s, float out_v) -> std::tuple<float, float, float>
        {
            auto ColorConvertRGBtoHSV_adapt_modifiable_immutable_to_return = [](float r, float g, float b, float out_h, float out_s, float out_v) -> std::tuple<float, float, float>
            {
                float & out_h_adapt_modifiable = out_h;
                float & out_s_adapt_modifiable = out_s;
                float & out_v_adapt_modifiable = out_v;

                ImGui::ColorConvertRGBtoHSV(r, g, b, out_h_adapt_modifiable, out_s_adapt_modifiable, out_v_adapt_modifiable);
                return std::make_tuple(out_h, out_s, out_v);
            };

            return ColorConvertRGBtoHSV_adapt_modifiable_immutable_to_return(r, g, b, out_h, out_s, out_v);
        },     nb::arg("r"), nb::arg("g"), nb::arg("b"), nb::arg("out_h"), nb::arg("out_s"), nb::arg("out_v"));

    m.def("color_convert_hsv_to_rgb",
        [](float h, float s, float v, float out_r, float out_g, float out_b) -> std::tuple<float, float, float>
        {
            auto ColorConvertHSVtoRGB_adapt_modifiable_immutable_to_return = [](float h, float s, float v, float out_r, float out_g, float out_b) -> std::tuple<float, float, float>
            {
                float & out_r_adapt_modifiable = out_r;
                float & out_g_adapt_modifiable = out_g;
                float & out_b_adapt_modifiable = out_b;

                ImGui::ColorConvertHSVtoRGB(h, s, v, out_r_adapt_modifiable, out_g_adapt_modifiable, out_b_adapt_modifiable);
                return std::make_tuple(out_r, out_g, out_b);
            };

            return ColorConvertHSVtoRGB_adapt_modifiable_immutable_to_return(h, s, v, out_r, out_g, out_b);
        },     nb::arg("h"), nb::arg("s"), nb::arg("v"), nb::arg("out_r"), nb::arg("out_g"), nb::arg("out_b"));

    m.def("is_key_down",
        nb::overload_cast<ImGuiKey>(ImGui::IsKeyDown),
        nb::arg("key"),
        "is key being held.");

    m.def("is_key_pressed",
        nb::overload_cast<ImGuiKey, bool>(ImGui::IsKeyPressed),
        nb::arg("key"), nb::arg("repeat") = true,
        "was key pressed (went from !Down to Down)? if repeat=True, uses io.KeyRepeatDelay / KeyRepeatRate");

    m.def("is_key_released",
        nb::overload_cast<ImGuiKey>(ImGui::IsKeyReleased),
        nb::arg("key"),
        "was key released (went from Down to !Down)?");

    m.def("is_key_chord_pressed",
        nb::overload_cast<ImGuiKeyChord>(ImGui::IsKeyChordPressed),
        nb::arg("key_chord"),
        "was key chord (mods + key) pressed, e.g. you can pass 'ImGuiMod_Ctrl | ImGuiKey_S' as a key-chord. This doesn't do any routing or focus check, please consider using Shortcut() function instead.");

    m.def("get_key_pressed_amount",
        ImGui::GetKeyPressedAmount,
        nb::arg("key"), nb::arg("repeat_delay"), nb::arg("rate"),
        "uses provided repeat rate/delay. return a count, most often 0 or 1 but might be >1 if RepeatRate is small enough that DeltaTime > RepeatRate");

    m.def("get_key_name",
        ImGui::GetKeyName,
        nb::arg("key"),
        "[DEBUG] returns English name of the key. Those names a provided for debugging purpose and are not meant to be saved persistently not compared.",
        nb::rv_policy::reference);

    m.def("set_next_frame_want_capture_keyboard",
        ImGui::SetNextFrameWantCaptureKeyboard,
        nb::arg("want_capture_keyboard"),
        "Override io.WantCaptureKeyboard flag next frame (said flag is left for your application to handle, typically when True it instructs your app to ignore inputs). e.g. force capture keyboard when your widget is being hovered. This is equivalent to setting \"io.WantCaptureKeyboard = want_capture_keyboard\"; after the next NewFrame() call.");

    m.def("shortcut",
        nb::overload_cast<ImGuiKeyChord, ImGuiInputFlags>(ImGui::Shortcut), nb::arg("key_chord"), nb::arg("flags") = 0);

    m.def("set_next_item_shortcut",
        ImGui::SetNextItemShortcut, nb::arg("key_chord"), nb::arg("flags") = 0);

    m.def("set_item_key_owner",
        nb::overload_cast<ImGuiKey>(ImGui::SetItemKeyOwner),
        nb::arg("key"),
        "Set key owner to last item ID if it is hovered or active. Equivalent to 'if (IsItemHovered() || IsItemActive()) { SetKeyOwner(key, GetItemID());'.");

    m.def("is_mouse_down",
        nb::overload_cast<ImGuiMouseButton>(ImGui::IsMouseDown),
        nb::arg("button"),
        "is mouse button held?");

    m.def("is_mouse_clicked",
        nb::overload_cast<ImGuiMouseButton, bool>(ImGui::IsMouseClicked),
        nb::arg("button"), nb::arg("repeat") = false,
        "did mouse button clicked? (went from !Down to Down). Same as GetMouseClickedCount() == 1.");

    m.def("is_mouse_released",
        nb::overload_cast<ImGuiMouseButton>(ImGui::IsMouseReleased),
        nb::arg("button"),
        "did mouse button released? (went from Down to !Down)");

    m.def("is_mouse_double_clicked",
        nb::overload_cast<ImGuiMouseButton>(ImGui::IsMouseDoubleClicked),
        nb::arg("button"),
        "did mouse button double-clicked? Same as GetMouseClickedCount() == 2. (note that a double-click will also report IsMouseClicked() == True)");

    m.def("get_mouse_clicked_count",
        ImGui::GetMouseClickedCount,
        nb::arg("button"),
        "return the number of successive mouse-clicks at the time where a click happen (otherwise 0).");

    m.def("is_mouse_hovering_rect",
        nb::overload_cast<const ImVec2 &, const ImVec2 &, bool>(ImGui::IsMouseHoveringRect),
        nb::arg("r_min"), nb::arg("r_max"), nb::arg("clip") = true,
        "is mouse hovering given bounding rect (in screen space). clipped by current clipping settings, but disregarding of other consideration of focus/window ordering/popup-block.");

    m.def("is_mouse_pos_valid",
        nb::overload_cast<const ImVec2 *>(ImGui::IsMousePosValid),
        nb::arg("mouse_pos") = nb::none(),
        "by convention we use (-FLT_MAX,-FLT_MAX) to denote that there is no mouse available");

    m.def("is_any_mouse_down",
        ImGui::IsAnyMouseDown, "[WILL OBSOLETE] is any mouse button held? This was designed for backends, but prefer having backend maintain a mask of held mouse buttons, because upcoming input queue system will make this invalid.");

    m.def("get_mouse_pos",
        ImGui::GetMousePos, "shortcut to ImGui::GetIO().MousePos provided by user, to be consistent with other calls");

    m.def("get_mouse_pos_on_opening_current_popup",
        nb::overload_cast<>(ImGui::GetMousePosOnOpeningCurrentPopup), "retrieve mouse position at the time of opening popup we have BeginPopup() into (helper to avoid user backing that value themselves)");

    m.def("is_mouse_dragging",
        nb::overload_cast<ImGuiMouseButton, float>(ImGui::IsMouseDragging),
        nb::arg("button"), nb::arg("lock_threshold") = -1.0f,
        "is mouse dragging? (uses io.MouseDraggingThreshold if lock_threshold < 0.0)");

    m.def("get_mouse_drag_delta",
        ImGui::GetMouseDragDelta,
        nb::arg("button") = 0, nb::arg("lock_threshold") = -1.0f,
        "return the delta from the initial clicking position while the mouse button is pressed or was just released. This is locked and return 0.0 until the mouse moves past a distance threshold at least once (uses io.MouseDraggingThreshold if lock_threshold < 0.0)");

    m.def("reset_mouse_drag_delta",
        ImGui::ResetMouseDragDelta, nb::arg("button") = 0);

    m.def("get_mouse_cursor",
        ImGui::GetMouseCursor, "get desired mouse cursor shape. Important: reset in ImGui::NewFrame(), this is updated during the frame. valid before Render(). If you use software rendering by setting io.MouseDrawCursor ImGui will render those for you");

    m.def("set_mouse_cursor",
        ImGui::SetMouseCursor,
        nb::arg("cursor_type"),
        "set desired mouse cursor shape");

    m.def("set_next_frame_want_capture_mouse",
        ImGui::SetNextFrameWantCaptureMouse,
        nb::arg("want_capture_mouse"),
        "Override io.WantCaptureMouse flag next frame (said flag is left for your application to handle, typical when True it instucts your app to ignore inputs). This is equivalent to setting \"io.WantCaptureMouse = want_capture_mouse;\" after the next NewFrame() call.");

    m.def("get_clipboard_text",
        ImGui::GetClipboardText, nb::rv_policy::reference);

    m.def("set_clipboard_text",
        ImGui::SetClipboardText, nb::arg("text"));

    m.def("load_ini_settings_from_disk",
        ImGui::LoadIniSettingsFromDisk,
        nb::arg("ini_filename"),
        "call after CreateContext() and before the first call to NewFrame(). NewFrame() automatically calls LoadIniSettingsFromDisk(io.IniFilename).");

    m.def("load_ini_settings_from_memory",
        ImGui::LoadIniSettingsFromMemory,
        nb::arg("ini_data"), nb::arg("ini_size") = 0,
        "call after CreateContext() and before the first call to NewFrame() to provide .ini data from your own data source.");

    m.def("save_ini_settings_to_disk",
        ImGui::SaveIniSettingsToDisk,
        nb::arg("ini_filename"),
        "this is automatically called (if io.IniFilename is not empty) a few seconds after any modification that should be reflected in the .ini file (and also by DestroyContext).");

    m.def("save_ini_settings_to_memory",
        []() -> const char *
        {
            auto SaveIniSettingsToMemory_adapt_exclude_params = []() -> const char *
            {
                auto lambda_result = ImGui::SaveIniSettingsToMemory(NULL);
                return lambda_result;
            };

            return SaveIniSettingsToMemory_adapt_exclude_params();
        },
        "return a zero-terminated string with the .ini data which you can save by your own mean. call when io.WantSaveIniSettings is set, then save data by your own mean and clear io.WantSaveIniSettings.",
        nb::rv_policy::reference);

    m.def("debug_text_encoding",
        ImGui::DebugTextEncoding, nb::arg("text"));

    m.def("debug_flash_style_color",
        ImGui::DebugFlashStyleColor, nb::arg("idx"));

    m.def("debug_start_item_picker",
        ImGui::DebugStartItemPicker);

    m.def("debug_check_version_and_data_layout",
        ImGui::DebugCheckVersionAndDataLayout, nb::arg("version_str"), nb::arg("sz_io"), nb::arg("sz_style"), nb::arg("sz_vec2"), nb::arg("sz_vec4"), nb::arg("sz_drawvert"), nb::arg("sz_drawidx"));

    m.def("update_platform_windows",
        ImGui::UpdatePlatformWindows, "call in main loop. will call CreateWindow/ResizeWindow/etc. platform functions for each secondary viewport, and DestroyWindow for each inactive viewport.");

    m.def("render_platform_windows_default",
        ImGui::RenderPlatformWindowsDefault,
        nb::arg("platform_render_arg") = nb::none(), nb::arg("renderer_render_arg") = nb::none(),
        "call in main loop. will call RenderWindow/SwapBuffers platform functions for each secondary viewport which doesn't have the ImGuiViewportFlags_Minimized flag set. May be reimplemented by user for custom rendering needs.");

    m.def("destroy_platform_windows",
        ImGui::DestroyPlatformWindows, "call DestroyWindow platform functions for all viewports. call from backend Shutdown() if you need to close platform windows before imgui shutdown. otherwise will be called by DestroyContext().");

    m.def("find_viewport_by_id",
        ImGui::FindViewportByID,
        nb::arg("id_"),
        "this is a helper for backends.",
        nb::rv_policy::reference);

    m.def("find_viewport_by_platform_handle",
        ImGui::FindViewportByPlatformHandle,
        nb::arg("platform_handle"),
        "this is a helper for backends. the type platform_handle is decided by the backend (e.g. HWND, MyWindow*, GLFWwindow* etc.)",
        nb::rv_policy::reference);


    auto pyEnumWindowFlags_ =
        nb::enum_<ImGuiWindowFlags_>(m, "WindowFlags_", nb::is_arithmetic(), " Flags for ImGui::Begin()\n (Those are per-window flags. There are shared flags in ImGuiIO: io.ConfigWindowsResizeFromEdges and io.ConfigWindowsMoveFromTitleBarOnly)")
            .value("none", ImGuiWindowFlags_None, "")
            .value("no_title_bar", ImGuiWindowFlags_NoTitleBar, "Disable title-bar")
            .value("no_resize", ImGuiWindowFlags_NoResize, "Disable user resizing with the lower-right grip")
            .value("no_move", ImGuiWindowFlags_NoMove, "Disable user moving the window")
            .value("no_scrollbar", ImGuiWindowFlags_NoScrollbar, "Disable scrollbars (window can still scroll with mouse or programmatically)")
            .value("no_scroll_with_mouse", ImGuiWindowFlags_NoScrollWithMouse, "Disable user vertically scrolling with mouse wheel. On child window, mouse wheel will be forwarded to the parent unless NoScrollbar is also set.")
            .value("no_collapse", ImGuiWindowFlags_NoCollapse, "Disable user collapsing window by double-clicking on it. Also referred to as Window Menu Button (e.g. within a docking node).")
            .value("always_auto_resize", ImGuiWindowFlags_AlwaysAutoResize, "Resize every window to its content every frame")
            .value("no_background", ImGuiWindowFlags_NoBackground, "Disable drawing background color (WindowBg, etc.) and outside border. Similar as using SetNextWindowBgAlpha(0.0).")
            .value("no_saved_settings", ImGuiWindowFlags_NoSavedSettings, "Never load/save settings in .ini file")
            .value("no_mouse_inputs", ImGuiWindowFlags_NoMouseInputs, "Disable catching mouse, hovering test with pass through.")
            .value("menu_bar", ImGuiWindowFlags_MenuBar, "Has a menu-bar")
            .value("horizontal_scrollbar", ImGuiWindowFlags_HorizontalScrollbar, "Allow horizontal scrollbar to appear (off by default). You may use SetNextWindowContentSize(ImVec2(width,0.0)); prior to calling Begin() to specify width. Read code in imgui_demo in the \"Horizontal Scrolling\" section.")
            .value("no_focus_on_appearing", ImGuiWindowFlags_NoFocusOnAppearing, "Disable taking focus when transitioning from hidden to visible state")
            .value("no_bring_to_front_on_focus", ImGuiWindowFlags_NoBringToFrontOnFocus, "Disable bringing window to front when taking focus (e.g. clicking on it or programmatically giving it focus)")
            .value("always_vertical_scrollbar", ImGuiWindowFlags_AlwaysVerticalScrollbar, "Always show vertical scrollbar (even if ContentSize.y < Size.y)")
            .value("always_horizontal_scrollbar", ImGuiWindowFlags_AlwaysHorizontalScrollbar, "Always show horizontal scrollbar (even if ContentSize.x < Size.x)")
            .value("no_nav_inputs", ImGuiWindowFlags_NoNavInputs, "No keyboard/gamepad navigation within the window")
            .value("no_nav_focus", ImGuiWindowFlags_NoNavFocus, "No focusing toward this window with keyboard/gamepad navigation (e.g. skipped by CTRL+TAB)")
            .value("unsaved_document", ImGuiWindowFlags_UnsavedDocument, "Display a dot next to the title. When used in a tab/docking context, tab is selected when clicking the X + closure is not assumed (will wait for user to stop submitting the tab). Otherwise closure is assumed when pressing the X, so if you keep submitting the tab may reappear at end of tab bar.")
            .value("no_docking", ImGuiWindowFlags_NoDocking, "Disable docking of this window")
            .value("no_nav", ImGuiWindowFlags_NoNav, "")
            .value("no_decoration", ImGuiWindowFlags_NoDecoration, "")
            .value("no_inputs", ImGuiWindowFlags_NoInputs, "")
            .value("child_window", ImGuiWindowFlags_ChildWindow, "Don't use! For internal use by BeginChild()")
            .value("tooltip", ImGuiWindowFlags_Tooltip, "Don't use! For internal use by BeginTooltip()")
            .value("popup", ImGuiWindowFlags_Popup, "Don't use! For internal use by BeginPopup()")
            .value("modal", ImGuiWindowFlags_Modal, "Don't use! For internal use by BeginPopupModal()")
            .value("child_menu", ImGuiWindowFlags_ChildMenu, "Don't use! For internal use by BeginMenu()")
            .value("dock_node_host", ImGuiWindowFlags_DockNodeHost, "Don't use! For internal use by Begin()/NewFrame()");


    auto pyEnumChildFlags_ =
        nb::enum_<ImGuiChildFlags_>(m, "ChildFlags_", nb::is_arithmetic(), " Flags for ImGui::BeginChild()\n (Legacy: bit 0 must always correspond to ImGuiChildFlags_Borders to be backward compatible with old API using 'bool border = False'.\n About using AutoResizeX/AutoResizeY flags:\n - May be combined with SetNextWindowSizeConstraints() to set a min/max size for each axis (see \"Demo->Child->Auto-resize with Constraints\").\n - Size measurement for a given axis is only performed when the child window is within visible boundaries, or is just appearing.\n   - This allows BeginChild() to return False when not within boundaries (e.g. when scrolling), which is more optimal. BUT it won't update its auto-size while clipped.\n     While not perfect, it is a better default behavior as the always-on performance gain is more valuable than the occasional \"resizing after becoming visible again\" glitch.\n   - You may also use ImGuiChildFlags_AlwaysAutoResize to force an update even when child window is not in view.\n     HOWEVER PLEASE UNDERSTAND THAT DOING SO WILL PREVENT BeginChild() FROM EVER RETURNING FALSE, disabling benefits of coarse clipping.")
            .value("none", ImGuiChildFlags_None, "")
            .value("borders", ImGuiChildFlags_Borders, "Show an outer border and enable WindowPadding. (IMPORTANT: this is always == 1 == True for legacy reason)")
            .value("always_use_window_padding", ImGuiChildFlags_AlwaysUseWindowPadding, "Pad with style.WindowPadding even if no border are drawn (no padding by default for non-bordered child windows because it makes more sense)")
            .value("resize_x", ImGuiChildFlags_ResizeX, "Allow resize from right border (layout direction). Enable .ini saving (unless ImGuiWindowFlags_NoSavedSettings passed to window flags)")
            .value("resize_y", ImGuiChildFlags_ResizeY, "Allow resize from bottom border (layout direction). \"")
            .value("auto_resize_x", ImGuiChildFlags_AutoResizeX, "Enable auto-resizing width. Read \"IMPORTANT: Size measurement\" details above.")
            .value("auto_resize_y", ImGuiChildFlags_AutoResizeY, "Enable auto-resizing height. Read \"IMPORTANT: Size measurement\" details above.")
            .value("always_auto_resize", ImGuiChildFlags_AlwaysAutoResize, "Combined with AutoResizeX/AutoResizeY. Always measure size even when child is hidden, always return True, always disable clipping optimization! NOT RECOMMENDED.")
            .value("frame_style", ImGuiChildFlags_FrameStyle, "Style the child window like a framed item: use FrameBg, FrameRounding, FrameBorderSize, FramePadding instead of ChildBg, ChildRounding, ChildBorderSize, WindowPadding.")
            .value("nav_flattened", ImGuiChildFlags_NavFlattened, "[BETA] Share focus scope, allow keyboard/gamepad navigation to cross over parent border to this child or between sibling child windows.");


    auto pyEnumItemFlags_ =
        nb::enum_<ImGuiItemFlags_>(m, "ItemFlags_", nb::is_arithmetic(), " Flags for ImGui::PushItemFlag()\n (Those are shared by all items)")
            .value("none", ImGuiItemFlags_None, "(Default)")
            .value("no_tab_stop", ImGuiItemFlags_NoTabStop, "False    // Disable keyboard tabbing. This is a \"lighter\" version of ImGuiItemFlags_NoNav.")
            .value("no_nav", ImGuiItemFlags_NoNav, "False    // Disable any form of focusing (keyboard/gamepad directional navigation and SetKeyboardFocusHere() calls).")
            .value("no_nav_default_focus", ImGuiItemFlags_NoNavDefaultFocus, "False    // Disable item being a candidate for default focus (e.g. used by title bar items).")
            .value("button_repeat", ImGuiItemFlags_ButtonRepeat, "False    // Any button-like behavior will have repeat mode enabled (based on io.KeyRepeatDelay and io.KeyRepeatRate values). Note that you can also call IsItemActive() after any button to tell if it is being held.")
            .value("auto_close_popups", ImGuiItemFlags_AutoClosePopups, "True     // MenuItem()/Selectable() automatically close their parent popup window.")
            .value("allow_duplicate_id", ImGuiItemFlags_AllowDuplicateId, "False    // Allow submitting an item with the same identifier as an item already submitted this frame without triggering a warning tooltip if io.ConfigDebugHighlightIdConflicts is set.");


    auto pyEnumInputTextFlags_ =
        nb::enum_<ImGuiInputTextFlags_>(m, "InputTextFlags_", nb::is_arithmetic(), " Flags for ImGui::InputText()\n (Those are per-item flags. There are shared flags in ImGuiIO: io.ConfigInputTextCursorBlink and io.ConfigInputTextEnterKeepActive)")
            .value("none", ImGuiInputTextFlags_None, "")
            .value("chars_decimal", ImGuiInputTextFlags_CharsDecimal, "Allow 0123456789.+-*/")
            .value("chars_hexadecimal", ImGuiInputTextFlags_CharsHexadecimal, "Allow 0123456789ABCDEFabcdef")
            .value("chars_scientific", ImGuiInputTextFlags_CharsScientific, "Allow 0123456789.+-*/eE (Scientific notation input)")
            .value("chars_uppercase", ImGuiInputTextFlags_CharsUppercase, "Turn a..z into A..Z")
            .value("chars_no_blank", ImGuiInputTextFlags_CharsNoBlank, "Filter out spaces, tabs")
            .value("allow_tab_input", ImGuiInputTextFlags_AllowTabInput, "Pressing TAB input a '\t' character into the text field")
            .value("enter_returns_true", ImGuiInputTextFlags_EnterReturnsTrue, "Return 'True' when Enter is pressed (as opposed to every time the value was modified). Consider using IsItemDeactivatedAfterEdit() instead!")
            .value("escape_clears_all", ImGuiInputTextFlags_EscapeClearsAll, "Escape key clears content if not empty, and deactivate otherwise (contrast to default behavior of Escape to revert)")
            .value("ctrl_enter_for_new_line", ImGuiInputTextFlags_CtrlEnterForNewLine, "In multi-line mode, validate with Enter, add new line with Ctrl+Enter (default is opposite: validate with Ctrl+Enter, add line with Enter).")
            .value("read_only", ImGuiInputTextFlags_ReadOnly, "Read-only mode")
            .value("password", ImGuiInputTextFlags_Password, "Password mode, display all characters as '*', disable copy")
            .value("always_overwrite", ImGuiInputTextFlags_AlwaysOverwrite, "Overwrite mode")
            .value("auto_select_all", ImGuiInputTextFlags_AutoSelectAll, "Select entire text when first taking mouse focus")
            .value("parse_empty_ref_val", ImGuiInputTextFlags_ParseEmptyRefVal, "InputFloat(), InputInt(), InputScalar() etc. only: parse empty string as zero value.")
            .value("display_empty_ref_val", ImGuiInputTextFlags_DisplayEmptyRefVal, "InputFloat(), InputInt(), InputScalar() etc. only: when value is zero, do not display it. Generally used with ImGuiInputTextFlags_ParseEmptyRefVal.")
            .value("no_horizontal_scroll", ImGuiInputTextFlags_NoHorizontalScroll, "Disable following the cursor horizontally")
            .value("no_undo_redo", ImGuiInputTextFlags_NoUndoRedo, "Disable undo/redo. Note that input text owns the text data while active, if you want to provide your own undo/redo stack you need e.g. to call ClearActiveID().")
            .value("callback_completion", ImGuiInputTextFlags_CallbackCompletion, "Callback on pressing TAB (for completion handling)")
            .value("callback_history", ImGuiInputTextFlags_CallbackHistory, "Callback on pressing Up/Down arrows (for history handling)")
            .value("callback_always", ImGuiInputTextFlags_CallbackAlways, "Callback on each iteration. User code may query cursor position, modify text buffer.")
            .value("callback_char_filter", ImGuiInputTextFlags_CallbackCharFilter, "Callback on character inputs to replace or discard them. Modify 'EventChar' to replace or discard, or return 1 in callback to discard.")
            .value("callback_resize", ImGuiInputTextFlags_CallbackResize, "Callback on buffer capacity changes request (beyond 'buf_size' parameter value), allowing the string to grow. Notify when the string wants to be resized (for string types which hold a cache of their Size). You will be provided a new BufSize in the callback and NEED to honor it. (see misc/cpp/imgui_stdlib.h for an example of using this)")
            .value("callback_edit", ImGuiInputTextFlags_CallbackEdit, "Callback on any edit (note that InputText() already returns True on edit, the callback is useful mainly to manipulate the underlying buffer while focus is active)");


    auto pyEnumTreeNodeFlags_ =
        nb::enum_<ImGuiTreeNodeFlags_>(m, "TreeNodeFlags_", nb::is_arithmetic(), "Flags for ImGui::TreeNodeEx(), ImGui::CollapsingHeader*()")
            .value("none", ImGuiTreeNodeFlags_None, "")
            .value("selected", ImGuiTreeNodeFlags_Selected, "Draw as selected")
            .value("framed", ImGuiTreeNodeFlags_Framed, "Draw frame with background (e.g. for CollapsingHeader)")
            .value("allow_overlap", ImGuiTreeNodeFlags_AllowOverlap, "Hit testing to allow subsequent widgets to overlap this one")
            .value("no_tree_push_on_open", ImGuiTreeNodeFlags_NoTreePushOnOpen, "Don't do a TreePush() when open (e.g. for CollapsingHeader) = no extra indent nor pushing on ID stack")
            .value("no_auto_open_on_log", ImGuiTreeNodeFlags_NoAutoOpenOnLog, "Don't automatically and temporarily open node when Logging is active (by default logging will automatically open tree nodes)")
            .value("default_open", ImGuiTreeNodeFlags_DefaultOpen, "Default node to be open")
            .value("open_on_double_click", ImGuiTreeNodeFlags_OpenOnDoubleClick, "Open on double-click instead of simple click (default for multi-select unless any _OpenOnXXX behavior is set explicitly). Both behaviors may be combined.")
            .value("open_on_arrow", ImGuiTreeNodeFlags_OpenOnArrow, "Open when clicking on the arrow part (default for multi-select unless any _OpenOnXXX behavior is set explicitly). Both behaviors may be combined.")
            .value("leaf", ImGuiTreeNodeFlags_Leaf, "No collapsing, no arrow (use as a convenience for leaf nodes).")
            .value("bullet", ImGuiTreeNodeFlags_Bullet, "Display a bullet instead of arrow. IMPORTANT: node can still be marked open/close if you don't set the _Leaf flag!")
            .value("frame_padding", ImGuiTreeNodeFlags_FramePadding, "Use FramePadding (even for an unframed text node) to vertically align text baseline to regular widget height. Equivalent to calling AlignTextToFramePadding() before the node.")
            .value("span_avail_width", ImGuiTreeNodeFlags_SpanAvailWidth, "Extend hit box to the right-most edge, even if not framed. This is not the default in order to allow adding other items on the same line without using AllowOverlap mode.")
            .value("span_full_width", ImGuiTreeNodeFlags_SpanFullWidth, "Extend hit box to the left-most and right-most edges (cover the indent area).")
            .value("span_text_width", ImGuiTreeNodeFlags_SpanTextWidth, "Narrow hit box + narrow hovering highlight, will only cover the label text.")
            .value("span_all_columns", ImGuiTreeNodeFlags_SpanAllColumns, "Frame will span all columns of its container table (text will still fit in current column)")
            .value("nav_left_jumps_back_here", ImGuiTreeNodeFlags_NavLeftJumpsBackHere, "(WIP) Nav: left direction may move to this TreeNode() from any of its child (items submitted between TreeNode and TreePop)")
            .value("collapsing_header", ImGuiTreeNodeFlags_CollapsingHeader, "ImGuiTreeNodeFlags_NoScrollOnOpen     = 1 << 16,  // FIXME: TODO: Disable automatic scroll on TreePop() if node got just open and contents is not visible");


    auto pyEnumPopupFlags_ =
        nb::enum_<ImGuiPopupFlags_>(m, "PopupFlags_", nb::is_arithmetic(), " Flags for OpenPopup*(), BeginPopupContext*(), IsPopupOpen() functions.\n - To be backward compatible with older API which took an 'int mouse_button = 1' argument instead of 'ImGuiPopupFlags flags',\n   we need to treat small flags values as a mouse button index, so we encode the mouse button in the first few bits of the flags.\n   It is therefore guaranteed to be legal to pass a mouse button index in ImGuiPopupFlags.\n - For the same reason, we exceptionally default the ImGuiPopupFlags argument of BeginPopupContextXXX functions to 1 instead of 0.\n   IMPORTANT: because the default parameter is 1 (==ImGuiPopupFlags_MouseButtonRight), if you rely on the default parameter\n   and want to use another flag, you need to pass in the ImGuiPopupFlags_MouseButtonRight flag explicitly.\n - Multiple buttons currently cannot be combined/or-ed in those functions (we could allow it later).")
            .value("none", ImGuiPopupFlags_None, "")
            .value("mouse_button_left", ImGuiPopupFlags_MouseButtonLeft, "For BeginPopupContext*(): open on Left Mouse release. Guaranteed to always be == 0 (same as ImGuiMouseButton_Left)")
            .value("mouse_button_right", ImGuiPopupFlags_MouseButtonRight, "For BeginPopupContext*(): open on Right Mouse release. Guaranteed to always be == 1 (same as ImGuiMouseButton_Right)")
            .value("mouse_button_middle", ImGuiPopupFlags_MouseButtonMiddle, "For BeginPopupContext*(): open on Middle Mouse release. Guaranteed to always be == 2 (same as ImGuiMouseButton_Middle)")
            .value("mouse_button_mask_", ImGuiPopupFlags_MouseButtonMask_, "")
            .value("mouse_button_default_", ImGuiPopupFlags_MouseButtonDefault_, "")
            .value("no_reopen", ImGuiPopupFlags_NoReopen, "For OpenPopup*(), BeginPopupContext*(): don't reopen same popup if already open (won't reposition, won't reinitialize navigation)")
            .value("no_open_over_existing_popup", ImGuiPopupFlags_NoOpenOverExistingPopup, "For OpenPopup*(), BeginPopupContext*(): don't open if there's already a popup at the same level of the popup stack")
            .value("no_open_over_items", ImGuiPopupFlags_NoOpenOverItems, "For BeginPopupContextWindow(): don't return True when hovering items, only when hovering empty space")
            .value("any_popup_id", ImGuiPopupFlags_AnyPopupId, "For IsPopupOpen(): ignore the ImGuiID parameter and test for any popup.")
            .value("any_popup_level", ImGuiPopupFlags_AnyPopupLevel, "For IsPopupOpen(): search/test at any level of the popup stack (default test in the current level)")
            .value("any_popup", ImGuiPopupFlags_AnyPopup, "");


    auto pyEnumSelectableFlags_ =
        nb::enum_<ImGuiSelectableFlags_>(m, "SelectableFlags_", nb::is_arithmetic(), "Flags for ImGui::Selectable()")
            .value("none", ImGuiSelectableFlags_None, "")
            .value("no_auto_close_popups", ImGuiSelectableFlags_NoAutoClosePopups, "Clicking this doesn't close parent popup window (overrides ImGuiItemFlags_AutoClosePopups)")
            .value("span_all_columns", ImGuiSelectableFlags_SpanAllColumns, "Frame will span all columns of its container table (text will still fit in current column)")
            .value("allow_double_click", ImGuiSelectableFlags_AllowDoubleClick, "Generate press events on double clicks too")
            .value("disabled", ImGuiSelectableFlags_Disabled, "Cannot be selected, display grayed out text")
            .value("allow_overlap", ImGuiSelectableFlags_AllowOverlap, "(WIP) Hit testing to allow subsequent widgets to overlap this one")
            .value("highlight", ImGuiSelectableFlags_Highlight, "Make the item be displayed as if it is hovered");


    auto pyEnumComboFlags_ =
        nb::enum_<ImGuiComboFlags_>(m, "ComboFlags_", nb::is_arithmetic(), "Flags for ImGui::BeginCombo()")
            .value("none", ImGuiComboFlags_None, "")
            .value("popup_align_left", ImGuiComboFlags_PopupAlignLeft, "Align the popup toward the left by default")
            .value("height_small", ImGuiComboFlags_HeightSmall, "Max ~4 items visible. Tip: If you want your combo popup to be a specific size you can use SetNextWindowSizeConstraints() prior to calling BeginCombo()")
            .value("height_regular", ImGuiComboFlags_HeightRegular, "Max ~8 items visible (default)")
            .value("height_large", ImGuiComboFlags_HeightLarge, "Max ~20 items visible")
            .value("height_largest", ImGuiComboFlags_HeightLargest, "As many fitting items as possible")
            .value("no_arrow_button", ImGuiComboFlags_NoArrowButton, "Display on the preview box without the square arrow button")
            .value("no_preview", ImGuiComboFlags_NoPreview, "Display only a square arrow button")
            .value("width_fit_preview", ImGuiComboFlags_WidthFitPreview, "Width dynamically calculated from preview contents")
            .value("height_mask_", ImGuiComboFlags_HeightMask_, "");


    auto pyEnumTabBarFlags_ =
        nb::enum_<ImGuiTabBarFlags_>(m, "TabBarFlags_", nb::is_arithmetic(), "Flags for ImGui::BeginTabBar()")
            .value("none", ImGuiTabBarFlags_None, "")
            .value("reorderable", ImGuiTabBarFlags_Reorderable, "Allow manually dragging tabs to re-order them + New tabs are appended at the end of list")
            .value("auto_select_new_tabs", ImGuiTabBarFlags_AutoSelectNewTabs, "Automatically select new tabs when they appear")
            .value("tab_list_popup_button", ImGuiTabBarFlags_TabListPopupButton, "Disable buttons to open the tab list popup")
            .value("no_close_with_middle_mouse_button", ImGuiTabBarFlags_NoCloseWithMiddleMouseButton, "Disable behavior of closing tabs (that are submitted with p_open != None) with middle mouse button. You may handle this behavior manually on user's side with if (IsItemHovered() && IsMouseClicked(2)) *p_open = False.")
            .value("no_tab_list_scrolling_buttons", ImGuiTabBarFlags_NoTabListScrollingButtons, "Disable scrolling buttons (apply when fitting policy is ImGuiTabBarFlags_FittingPolicyScroll)")
            .value("no_tooltip", ImGuiTabBarFlags_NoTooltip, "Disable tooltips when hovering a tab")
            .value("draw_selected_overline", ImGuiTabBarFlags_DrawSelectedOverline, "Draw selected overline markers over selected tab")
            .value("fitting_policy_resize_down", ImGuiTabBarFlags_FittingPolicyResizeDown, "Resize tabs when they don't fit")
            .value("fitting_policy_scroll", ImGuiTabBarFlags_FittingPolicyScroll, "Add scroll buttons when tabs don't fit")
            .value("fitting_policy_mask_", ImGuiTabBarFlags_FittingPolicyMask_, "")
            .value("fitting_policy_default_", ImGuiTabBarFlags_FittingPolicyDefault_, "");


    auto pyEnumTabItemFlags_ =
        nb::enum_<ImGuiTabItemFlags_>(m, "TabItemFlags_", nb::is_arithmetic(), "Flags for ImGui::BeginTabItem()")
            .value("none", ImGuiTabItemFlags_None, "")
            .value("unsaved_document", ImGuiTabItemFlags_UnsavedDocument, "Display a dot next to the title + set ImGuiTabItemFlags_NoAssumedClosure.")
            .value("set_selected", ImGuiTabItemFlags_SetSelected, "Trigger flag to programmatically make the tab selected when calling BeginTabItem()")
            .value("no_close_with_middle_mouse_button", ImGuiTabItemFlags_NoCloseWithMiddleMouseButton, "Disable behavior of closing tabs (that are submitted with p_open != None) with middle mouse button. You may handle this behavior manually on user's side with if (IsItemHovered() && IsMouseClicked(2)) *p_open = False.")
            .value("no_push_id", ImGuiTabItemFlags_NoPushId, "Don't call PushID()/PopID() on BeginTabItem()/EndTabItem()")
            .value("no_tooltip", ImGuiTabItemFlags_NoTooltip, "Disable tooltip for the given tab")
            .value("no_reorder", ImGuiTabItemFlags_NoReorder, "Disable reordering this tab or having another tab cross over this tab")
            .value("leading", ImGuiTabItemFlags_Leading, "Enforce the tab position to the left of the tab bar (after the tab list popup button)")
            .value("trailing", ImGuiTabItemFlags_Trailing, "Enforce the tab position to the right of the tab bar (before the scrolling buttons)")
            .value("no_assumed_closure", ImGuiTabItemFlags_NoAssumedClosure, "Tab is selected when trying to close + closure is not immediately assumed (will wait for user to stop submitting the tab). Otherwise closure is assumed when pressing the X, so if you keep submitting the tab may reappear at end of tab bar.");


    auto pyEnumFocusedFlags_ =
        nb::enum_<ImGuiFocusedFlags_>(m, "FocusedFlags_", nb::is_arithmetic(), "Flags for ImGui::IsWindowFocused()")
            .value("none", ImGuiFocusedFlags_None, "")
            .value("child_windows", ImGuiFocusedFlags_ChildWindows, "Return True if any children of the window is focused")
            .value("root_window", ImGuiFocusedFlags_RootWindow, "Test from root window (top most parent of the current hierarchy)")
            .value("any_window", ImGuiFocusedFlags_AnyWindow, "Return True if any window is focused. Important: If you are trying to tell how to dispatch your low-level inputs, do NOT use this. Use 'io.WantCaptureMouse' instead! Please read the FAQ!")
            .value("no_popup_hierarchy", ImGuiFocusedFlags_NoPopupHierarchy, "Do not consider popup hierarchy (do not treat popup emitter as parent of popup) (when used with _ChildWindows or _RootWindow)")
            .value("dock_hierarchy", ImGuiFocusedFlags_DockHierarchy, "Consider docking hierarchy (treat dockspace host as parent of docked window) (when used with _ChildWindows or _RootWindow)")
            .value("root_and_child_windows", ImGuiFocusedFlags_RootAndChildWindows, "");


    auto pyEnumHoveredFlags_ =
        nb::enum_<ImGuiHoveredFlags_>(m, "HoveredFlags_", nb::is_arithmetic(), " Flags for ImGui::IsItemHovered(), ImGui::IsWindowHovered()\n Note: if you are trying to check whether your mouse should be dispatched to Dear ImGui or to your app, you should use 'io.WantCaptureMouse' instead! Please read the FAQ!\n Note: windows with the ImGuiWindowFlags_NoInputs flag are ignored by IsWindowHovered() calls.")
            .value("none", ImGuiHoveredFlags_None, "Return True if directly over the item/window, not obstructed by another window, not obstructed by an active popup or modal blocking inputs under them.")
            .value("child_windows", ImGuiHoveredFlags_ChildWindows, "IsWindowHovered() only: Return True if any children of the window is hovered")
            .value("root_window", ImGuiHoveredFlags_RootWindow, "IsWindowHovered() only: Test from root window (top most parent of the current hierarchy)")
            .value("any_window", ImGuiHoveredFlags_AnyWindow, "IsWindowHovered() only: Return True if any window is hovered")
            .value("no_popup_hierarchy", ImGuiHoveredFlags_NoPopupHierarchy, "IsWindowHovered() only: Do not consider popup hierarchy (do not treat popup emitter as parent of popup) (when used with _ChildWindows or _RootWindow)")
            .value("dock_hierarchy", ImGuiHoveredFlags_DockHierarchy, "IsWindowHovered() only: Consider docking hierarchy (treat dockspace host as parent of docked window) (when used with _ChildWindows or _RootWindow)")
            .value("allow_when_blocked_by_popup", ImGuiHoveredFlags_AllowWhenBlockedByPopup, "Return True even if a popup window is normally blocking access to this item/window")
            .value("allow_when_blocked_by_active_item", ImGuiHoveredFlags_AllowWhenBlockedByActiveItem, "Return True even if an active item is blocking access to this item/window. Useful for Drag and Drop patterns.")
            .value("allow_when_overlapped_by_item", ImGuiHoveredFlags_AllowWhenOverlappedByItem, "IsItemHovered() only: Return True even if the item uses AllowOverlap mode and is overlapped by another hoverable item.")
            .value("allow_when_overlapped_by_window", ImGuiHoveredFlags_AllowWhenOverlappedByWindow, "IsItemHovered() only: Return True even if the position is obstructed or overlapped by another window.")
            .value("allow_when_disabled", ImGuiHoveredFlags_AllowWhenDisabled, "IsItemHovered() only: Return True even if the item is disabled")
            .value("no_nav_override", ImGuiHoveredFlags_NoNavOverride, "IsItemHovered() only: Disable using keyboard/gamepad navigation state when active, always query mouse")
            .value("allow_when_overlapped", ImGuiHoveredFlags_AllowWhenOverlapped, "")
            .value("rect_only", ImGuiHoveredFlags_RectOnly, "")
            .value("root_and_child_windows", ImGuiHoveredFlags_RootAndChildWindows, "")
            .value("for_tooltip", ImGuiHoveredFlags_ForTooltip, "Shortcut for standard flags when using IsItemHovered() + SetTooltip() sequence.")
            .value("stationary", ImGuiHoveredFlags_Stationary, "Require mouse to be stationary for style.HoverStationaryDelay (~0.15 sec) _at least one time_. After this, can move on same item/window. Using the stationary test tends to reduces the need for a long delay.")
            .value("delay_none", ImGuiHoveredFlags_DelayNone, "IsItemHovered() only: Return True immediately (default). As this is the default you generally ignore this.")
            .value("delay_short", ImGuiHoveredFlags_DelayShort, "IsItemHovered() only: Return True after style.HoverDelayShort elapsed (~0.15 sec) (shared between items) + requires mouse to be stationary for style.HoverStationaryDelay (once per item).")
            .value("delay_normal", ImGuiHoveredFlags_DelayNormal, "IsItemHovered() only: Return True after style.HoverDelayNormal elapsed (~0.40 sec) (shared between items) + requires mouse to be stationary for style.HoverStationaryDelay (once per item).")
            .value("no_shared_delay", ImGuiHoveredFlags_NoSharedDelay, "IsItemHovered() only: Disable shared delay system where moving from one item to the next keeps the previous timer for a short time (standard for tooltips with long delays)");


    auto pyEnumDockNodeFlags_ =
        nb::enum_<ImGuiDockNodeFlags_>(m, "DockNodeFlags_", nb::is_arithmetic(), " Flags for ImGui::DockSpace(), shared/inherited by child nodes.\n (Some flags can be applied to individual nodes directly)\n FIXME-DOCK: Also see ImGuiDockNodeFlagsPrivate_ which may involve using the WIP and internal DockBuilder api.")
            .value("none", ImGuiDockNodeFlags_None, "")
            .value("keep_alive_only", ImGuiDockNodeFlags_KeepAliveOnly, "// Don't display the dockspace node but keep it alive. Windows docked into this dockspace node won't be undocked.")
            .value("no_docking_over_central_node", ImGuiDockNodeFlags_NoDockingOverCentralNode, "// Disable docking over the Central Node, which will be always kept empty.")
            .value("passthru_central_node", ImGuiDockNodeFlags_PassthruCentralNode, "// Enable passthru dockspace: 1) DockSpace() will render a ImGuiCol_WindowBg background covering everything excepted the Central Node when empty. Meaning the host window should probably use SetNextWindowBgAlpha(0.0) prior to Begin() when using this. 2) When Central Node is empty: let inputs pass-through + won't display a DockingEmptyBg background. See demo for details.")
            .value("no_docking_split", ImGuiDockNodeFlags_NoDockingSplit, "// Disable other windows/nodes from splitting this node.")
            .value("no_resize", ImGuiDockNodeFlags_NoResize, "Saved // Disable resizing node using the splitter/separators. Useful with programmatically setup dockspaces.")
            .value("auto_hide_tab_bar", ImGuiDockNodeFlags_AutoHideTabBar, "// Tab bar will automatically hide when there is a single window in the dock node.")
            .value("no_undocking", ImGuiDockNodeFlags_NoUndocking, "// Disable undocking this node.");


    auto pyEnumDragDropFlags_ =
        nb::enum_<ImGuiDragDropFlags_>(m, "DragDropFlags_", nb::is_arithmetic(), "Flags for ImGui::BeginDragDropSource(), ImGui::AcceptDragDropPayload()")
            .value("none", ImGuiDragDropFlags_None, "")
            .value("source_no_preview_tooltip", ImGuiDragDropFlags_SourceNoPreviewTooltip, "Disable preview tooltip. By default, a successful call to BeginDragDropSource opens a tooltip so you can display a preview or description of the source contents. This flag disables this behavior.")
            .value("source_no_disable_hover", ImGuiDragDropFlags_SourceNoDisableHover, "By default, when dragging we clear data so that IsItemHovered() will return False, to avoid subsequent user code submitting tooltips. This flag disables this behavior so you can still call IsItemHovered() on the source item.")
            .value("source_no_hold_to_open_others", ImGuiDragDropFlags_SourceNoHoldToOpenOthers, "Disable the behavior that allows to open tree nodes and collapsing header by holding over them while dragging a source item.")
            .value("source_allow_null_id", ImGuiDragDropFlags_SourceAllowNullID, "Allow items such as Text(), Image() that have no unique identifier to be used as drag source, by manufacturing a temporary identifier based on their window-relative position. This is extremely unusual within the dear imgui ecosystem and so we made it explicit.")
            .value("source_extern", ImGuiDragDropFlags_SourceExtern, "External source (from outside of dear imgui), won't attempt to read current item/window info. Will always return True. Only one Extern source can be active simultaneously.")
            .value("payload_auto_expire", ImGuiDragDropFlags_PayloadAutoExpire, "Automatically expire the payload if the source cease to be submitted (otherwise payloads are persisting while being dragged)")
            .value("payload_no_cross_context", ImGuiDragDropFlags_PayloadNoCrossContext, "Hint to specify that the payload may not be copied outside current dear imgui context.")
            .value("payload_no_cross_process", ImGuiDragDropFlags_PayloadNoCrossProcess, "Hint to specify that the payload may not be copied outside current process.")
            .value("accept_before_delivery", ImGuiDragDropFlags_AcceptBeforeDelivery, "AcceptDragDropPayload() will returns True even before the mouse button is released. You can then call IsDelivery() to test if the payload needs to be delivered.")
            .value("accept_no_draw_default_rect", ImGuiDragDropFlags_AcceptNoDrawDefaultRect, "Do not draw the default highlight rectangle when hovering over target.")
            .value("accept_no_preview_tooltip", ImGuiDragDropFlags_AcceptNoPreviewTooltip, "Request hiding the BeginDragDropSource tooltip from the BeginDragDropTarget site.")
            .value("accept_peek_only", ImGuiDragDropFlags_AcceptPeekOnly, "For peeking ahead and inspecting the payload before delivery.");


    auto pyEnumDataType_ =
        nb::enum_<ImGuiDataType_>(m, "DataType_", nb::is_arithmetic(), "A primary data type")
            .value("s8", ImGuiDataType_S8, "signed char / char (with sensible compilers)")
            .value("u8", ImGuiDataType_U8, "uchar")
            .value("s16", ImGuiDataType_S16, "short")
            .value("u16", ImGuiDataType_U16, "unsigned short")
            .value("s32", ImGuiDataType_S32, "int")
            .value("u32", ImGuiDataType_U32, "unsigned int")
            .value("s64", ImGuiDataType_S64, "long long / __int64")
            .value("u64", ImGuiDataType_U64, "unsigned long long / unsigned __int64")
            .value("float", ImGuiDataType_Float, "float")
            .value("double", ImGuiDataType_Double, "double")
            .value("bool", ImGuiDataType_Bool, "bool (provided for user convenience, not supported by scalar widgets)")
            .value("count", ImGuiDataType_COUNT, "");


    auto pyEnumDir =
        nb::enum_<ImGuiDir>(m, "Dir", nb::is_arithmetic(), "A cardinal direction")
            .value("none", ImGuiDir_None, "")
            .value("left", ImGuiDir_Left, "")
            .value("right", ImGuiDir_Right, "")
            .value("up", ImGuiDir_Up, "")
            .value("down", ImGuiDir_Down, "")
            .value("count", ImGuiDir_COUNT, "");


    auto pyEnumSortDirection =
        nb::enum_<ImGuiSortDirection>(m, "SortDirection", nb::is_arithmetic(), "A sorting direction")
            .value("none", ImGuiSortDirection_None, "")
            .value("ascending", ImGuiSortDirection_Ascending, "Ascending = 0->9, A->Z etc.")
            .value("descending", ImGuiSortDirection_Descending, "Descending = 9->0, Z->A etc.");


    auto pyEnumKey =
        nb::enum_<ImGuiKey>(m, "Key", nb::is_arithmetic(), " A key identifier (ImGuiKey_XXX or ImGuiMod_XXX value): can represent Keyboard, Mouse and Gamepad values.\n All our named keys are >= 512. Keys value 0 to 511 are left unused as legacy native/opaque key values (< 1.87).\n Since >= 1.89 we increased typing (went from int to enum), some legacy code may need a cast to ImGuiKey.\n Read details about the 1.87 and 1.89 transition : https://github.com/ocornut/imgui/issues/4921\n Note that \"Keys\" related to physical keys and are not the same concept as input \"Characters\", the later are submitted via io.AddInputCharacter().\n The keyboard key enum values are named after the keys on a standard US keyboard, and on other keyboard types the keys reported may not match the keycaps.")
            .value("none", ImGuiKey_None, "")
            .value("tab", ImGuiKey_Tab, "== ImGuiKey_NamedKey_BEGIN")
            .value("left_arrow", ImGuiKey_LeftArrow, "")
            .value("right_arrow", ImGuiKey_RightArrow, "")
            .value("up_arrow", ImGuiKey_UpArrow, "")
            .value("down_arrow", ImGuiKey_DownArrow, "")
            .value("page_up", ImGuiKey_PageUp, "")
            .value("page_down", ImGuiKey_PageDown, "")
            .value("home", ImGuiKey_Home, "")
            .value("end", ImGuiKey_End, "")
            .value("insert", ImGuiKey_Insert, "")
            .value("delete", ImGuiKey_Delete, "")
            .value("backspace", ImGuiKey_Backspace, "")
            .value("space", ImGuiKey_Space, "")
            .value("enter", ImGuiKey_Enter, "")
            .value("escape", ImGuiKey_Escape, "")
            .value("left_ctrl", ImGuiKey_LeftCtrl, "")
            .value("left_shift", ImGuiKey_LeftShift, "")
            .value("left_alt", ImGuiKey_LeftAlt, "")
            .value("left_super", ImGuiKey_LeftSuper, "")
            .value("right_ctrl", ImGuiKey_RightCtrl, "")
            .value("right_shift", ImGuiKey_RightShift, "")
            .value("right_alt", ImGuiKey_RightAlt, "")
            .value("right_super", ImGuiKey_RightSuper, "")
            .value("menu", ImGuiKey_Menu, "")
            .value("_0", ImGuiKey_0, "")
            .value("_1", ImGuiKey_1, "")
            .value("_2", ImGuiKey_2, "")
            .value("_3", ImGuiKey_3, "")
            .value("_4", ImGuiKey_4, "")
            .value("_5", ImGuiKey_5, "")
            .value("_6", ImGuiKey_6, "")
            .value("_7", ImGuiKey_7, "")
            .value("_8", ImGuiKey_8, "")
            .value("_9", ImGuiKey_9, "")
            .value("a", ImGuiKey_A, "")
            .value("b", ImGuiKey_B, "")
            .value("c", ImGuiKey_C, "")
            .value("d", ImGuiKey_D, "")
            .value("e", ImGuiKey_E, "")
            .value("f", ImGuiKey_F, "")
            .value("g", ImGuiKey_G, "")
            .value("h", ImGuiKey_H, "")
            .value("i", ImGuiKey_I, "")
            .value("j", ImGuiKey_J, "")
            .value("k", ImGuiKey_K, "")
            .value("l", ImGuiKey_L, "")
            .value("m", ImGuiKey_M, "")
            .value("n", ImGuiKey_N, "")
            .value("o", ImGuiKey_O, "")
            .value("p", ImGuiKey_P, "")
            .value("q", ImGuiKey_Q, "")
            .value("r", ImGuiKey_R, "")
            .value("s", ImGuiKey_S, "")
            .value("t", ImGuiKey_T, "")
            .value("u", ImGuiKey_U, "")
            .value("v", ImGuiKey_V, "")
            .value("w", ImGuiKey_W, "")
            .value("x", ImGuiKey_X, "")
            .value("y", ImGuiKey_Y, "")
            .value("z", ImGuiKey_Z, "")
            .value("f1", ImGuiKey_F1, "")
            .value("f2", ImGuiKey_F2, "")
            .value("f3", ImGuiKey_F3, "")
            .value("f4", ImGuiKey_F4, "")
            .value("f5", ImGuiKey_F5, "")
            .value("f6", ImGuiKey_F6, "")
            .value("f7", ImGuiKey_F7, "")
            .value("f8", ImGuiKey_F8, "")
            .value("f9", ImGuiKey_F9, "")
            .value("f10", ImGuiKey_F10, "")
            .value("f11", ImGuiKey_F11, "")
            .value("f12", ImGuiKey_F12, "")
            .value("f13", ImGuiKey_F13, "")
            .value("f14", ImGuiKey_F14, "")
            .value("f15", ImGuiKey_F15, "")
            .value("f16", ImGuiKey_F16, "")
            .value("f17", ImGuiKey_F17, "")
            .value("f18", ImGuiKey_F18, "")
            .value("f19", ImGuiKey_F19, "")
            .value("f20", ImGuiKey_F20, "")
            .value("f21", ImGuiKey_F21, "")
            .value("f22", ImGuiKey_F22, "")
            .value("f23", ImGuiKey_F23, "")
            .value("f24", ImGuiKey_F24, "")
            .value("apostrophe", ImGuiKey_Apostrophe, "'")
            .value("comma", ImGuiKey_Comma, ",")
            .value("minus", ImGuiKey_Minus, "-")
            .value("period", ImGuiKey_Period, ".")
            .value("slash", ImGuiKey_Slash, "/")
            .value("semicolon", ImGuiKey_Semicolon, ";")
            .value("equal", ImGuiKey_Equal, "=")
            .value("left_bracket", ImGuiKey_LeftBracket, "[")
            .value("backslash", ImGuiKey_Backslash, "\\ (this text inhibit multiline comment caused by backslash)")
            .value("right_bracket", ImGuiKey_RightBracket, "]")
            .value("grave_accent", ImGuiKey_GraveAccent, "`")
            .value("caps_lock", ImGuiKey_CapsLock, "")
            .value("scroll_lock", ImGuiKey_ScrollLock, "")
            .value("num_lock", ImGuiKey_NumLock, "")
            .value("print_screen", ImGuiKey_PrintScreen, "")
            .value("pause", ImGuiKey_Pause, "")
            .value("keypad0", ImGuiKey_Keypad0, "")
            .value("keypad1", ImGuiKey_Keypad1, "")
            .value("keypad2", ImGuiKey_Keypad2, "")
            .value("keypad3", ImGuiKey_Keypad3, "")
            .value("keypad4", ImGuiKey_Keypad4, "")
            .value("keypad5", ImGuiKey_Keypad5, "")
            .value("keypad6", ImGuiKey_Keypad6, "")
            .value("keypad7", ImGuiKey_Keypad7, "")
            .value("keypad8", ImGuiKey_Keypad8, "")
            .value("keypad9", ImGuiKey_Keypad9, "")
            .value("keypad_decimal", ImGuiKey_KeypadDecimal, "")
            .value("keypad_divide", ImGuiKey_KeypadDivide, "")
            .value("keypad_multiply", ImGuiKey_KeypadMultiply, "")
            .value("keypad_subtract", ImGuiKey_KeypadSubtract, "")
            .value("keypad_add", ImGuiKey_KeypadAdd, "")
            .value("keypad_enter", ImGuiKey_KeypadEnter, "")
            .value("keypad_equal", ImGuiKey_KeypadEqual, "")
            .value("app_back", ImGuiKey_AppBack, "Available on some keyboard/mouses. Often referred as \"Browser Back\"")
            .value("app_forward", ImGuiKey_AppForward, "")
            .value("gamepad_start", ImGuiKey_GamepadStart, "Menu (Xbox)      + (Switch)   Start/Options (PS)")
            .value("gamepad_back", ImGuiKey_GamepadBack, "View (Xbox)      - (Switch)   Share (PS)")
            .value("gamepad_face_left", ImGuiKey_GamepadFaceLeft, "X (Xbox)         Y (Switch)   Square (PS)        // Tap: Toggle Menu. Hold: Windowing mode (Focus/Move/Resize windows)")
            .value("gamepad_face_right", ImGuiKey_GamepadFaceRight, "B (Xbox)         A (Switch)   Circle (PS)        // Cancel / Close / Exit")
            .value("gamepad_face_up", ImGuiKey_GamepadFaceUp, "Y (Xbox)         X (Switch)   Triangle (PS)      // Text Input / On-screen Keyboard")
            .value("gamepad_face_down", ImGuiKey_GamepadFaceDown, "A (Xbox)         B (Switch)   Cross (PS)         // Activate / Open / Toggle / Tweak")
            .value("gamepad_dpad_left", ImGuiKey_GamepadDpadLeft, "D-pad Left                                       // Move / Tweak / Resize Window (in Windowing mode)")
            .value("gamepad_dpad_right", ImGuiKey_GamepadDpadRight, "D-pad Right                                      // Move / Tweak / Resize Window (in Windowing mode)")
            .value("gamepad_dpad_up", ImGuiKey_GamepadDpadUp, "D-pad Up                                         // Move / Tweak / Resize Window (in Windowing mode)")
            .value("gamepad_dpad_down", ImGuiKey_GamepadDpadDown, "D-pad Down                                       // Move / Tweak / Resize Window (in Windowing mode)")
            .value("gamepad_l1", ImGuiKey_GamepadL1, "L Bumper (Xbox)  L (Switch)   L1 (PS)            // Tweak Slower / Focus Previous (in Windowing mode)")
            .value("gamepad_r1", ImGuiKey_GamepadR1, "R Bumper (Xbox)  R (Switch)   R1 (PS)            // Tweak Faster / Focus Next (in Windowing mode)")
            .value("gamepad_l2", ImGuiKey_GamepadL2, "L Trig. (Xbox)   ZL (Switch)  L2 (PS) [Analog]")
            .value("gamepad_r2", ImGuiKey_GamepadR2, "R Trig. (Xbox)   ZR (Switch)  R2 (PS) [Analog]")
            .value("gamepad_l3", ImGuiKey_GamepadL3, "L Stick (Xbox)   L3 (Switch)  L3 (PS)")
            .value("gamepad_r3", ImGuiKey_GamepadR3, "R Stick (Xbox)   R3 (Switch)  R3 (PS)")
            .value("gamepad_l_stick_left", ImGuiKey_GamepadLStickLeft, "[Analog]                                         // Move Window (in Windowing mode)")
            .value("gamepad_l_stick_right", ImGuiKey_GamepadLStickRight, "[Analog]                                         // Move Window (in Windowing mode)")
            .value("gamepad_l_stick_up", ImGuiKey_GamepadLStickUp, "[Analog]                                         // Move Window (in Windowing mode)")
            .value("gamepad_l_stick_down", ImGuiKey_GamepadLStickDown, "[Analog]                                         // Move Window (in Windowing mode)")
            .value("gamepad_r_stick_left", ImGuiKey_GamepadRStickLeft, "[Analog]")
            .value("gamepad_r_stick_right", ImGuiKey_GamepadRStickRight, "[Analog]")
            .value("gamepad_r_stick_up", ImGuiKey_GamepadRStickUp, "[Analog]")
            .value("gamepad_r_stick_down", ImGuiKey_GamepadRStickDown, "[Analog]")
            .value("mouse_left", ImGuiKey_MouseLeft, " Aliases: Mouse Buttons (auto-submitted from AddMouseButtonEvent() calls)\n - This is mirroring the data also written to io.MouseDown[], io.MouseWheel, in a format allowing them to be accessed via standard key API.")
            .value("mouse_right", ImGuiKey_MouseRight, "")
            .value("mouse_middle", ImGuiKey_MouseMiddle, "")
            .value("mouse_x1", ImGuiKey_MouseX1, "")
            .value("mouse_x2", ImGuiKey_MouseX2, "")
            .value("mouse_wheel_x", ImGuiKey_MouseWheelX, "")
            .value("mouse_wheel_y", ImGuiKey_MouseWheelY, "")
            .value("reserved_for_mod_ctrl", ImGuiKey_ReservedForModCtrl, "[Internal] Reserved for mod storage")
            .value("reserved_for_mod_shift", ImGuiKey_ReservedForModShift, "")
            .value("reserved_for_mod_alt", ImGuiKey_ReservedForModAlt, "")
            .value("reserved_for_mod_super", ImGuiKey_ReservedForModSuper, "")
            .value("count", ImGuiKey_COUNT, "")
            .value("mod_none", ImGuiMod_None, "")
            .value("mod_ctrl", ImGuiMod_Ctrl, "Ctrl (non-macOS), Cmd (macOS)")
            .value("mod_shift", ImGuiMod_Shift, "Shift")
            .value("mod_alt", ImGuiMod_Alt, "Option/Menu")
            .value("mod_super", ImGuiMod_Super, "Windows/Super (non-macOS), Ctrl (macOS)")
            .value("mod_mask_", ImGuiMod_Mask_, "4-bits")
            .value("named_key_begin", ImGuiKey_NamedKey_BEGIN, "")
            .value("named_key_end", ImGuiKey_NamedKey_END, "")
            .value("named_key_count", ImGuiKey_NamedKey_COUNT, "");


    auto pyEnumInputFlags_ =
        nb::enum_<ImGuiInputFlags_>(m, "InputFlags_", nb::is_arithmetic(), " Flags for Shortcut(), SetNextItemShortcut(),\n (and for upcoming extended versions of IsKeyPressed(), IsMouseClicked(), Shortcut(), SetKeyOwner(), SetItemKeyOwner() that are still in imgui_internal.h)\n Don't mistake with ImGuiInputTextFlags! (which is for ImGui::InputText() function)")
            .value("none", ImGuiInputFlags_None, "")
            .value("repeat", ImGuiInputFlags_Repeat, "Enable repeat. Return True on successive repeats. Default for legacy IsKeyPressed(). NOT Default for legacy IsMouseClicked(). MUST BE == 1.")
            .value("route_active", ImGuiInputFlags_RouteActive, "Route to active item only.")
            .value("route_focused", ImGuiInputFlags_RouteFocused, "Route to windows in the focus stack (DEFAULT). Deep-most focused window takes inputs. Active item takes inputs over deep-most focused window.")
            .value("route_global", ImGuiInputFlags_RouteGlobal, "Global route (unless a focused window or active item registered the route).")
            .value("route_always", ImGuiInputFlags_RouteAlways, "Do not register route, poll keys directly.")
            .value("route_over_focused", ImGuiInputFlags_RouteOverFocused, "Option: global route: higher priority than focused route (unless active item in focused route).")
            .value("route_over_active", ImGuiInputFlags_RouteOverActive, "Option: global route: higher priority than active item. Unlikely you need to use that: will interfere with every active items, e.g. CTRL+A registered by InputText will be overridden by this. May not be fully honored as user/internal code is likely to always assume they can access keys when active.")
            .value("route_unless_bg_focused", ImGuiInputFlags_RouteUnlessBgFocused, "Option: global route: will not be applied if underlying background/None is focused (== no Dear ImGui windows are focused). Useful for overlay applications.")
            .value("route_from_root_window", ImGuiInputFlags_RouteFromRootWindow, "Option: route evaluated from the point of view of root window rather than current window.")
            .value("tooltip", ImGuiInputFlags_Tooltip, "Automatically display a tooltip when hovering item [BETA] Unsure of right api (opt-in/opt-out)");


    auto pyEnumConfigFlags_ =
        nb::enum_<ImGuiConfigFlags_>(m, "ConfigFlags_", nb::is_arithmetic(), "Configuration flags stored in io.ConfigFlags. Set by user/application.")
            .value("none", ImGuiConfigFlags_None, "")
            .value("nav_enable_keyboard", ImGuiConfigFlags_NavEnableKeyboard, "Master keyboard navigation enable flag. Enable full Tabbing + directional arrows + space/enter to activate.")
            .value("nav_enable_gamepad", ImGuiConfigFlags_NavEnableGamepad, "Master gamepad navigation enable flag. Backend also needs to set ImGuiBackendFlags_HasGamepad.")
            .value("no_mouse", ImGuiConfigFlags_NoMouse, "Instruct dear imgui to disable mouse inputs and interactions.")
            .value("no_mouse_cursor_change", ImGuiConfigFlags_NoMouseCursorChange, "Instruct backend to not alter mouse cursor shape and visibility. Use if the backend cursor changes are interfering with yours and you don't want to use SetMouseCursor() to change mouse cursor. You may want to honor requests from imgui by reading GetMouseCursor() yourself instead.")
            .value("no_keyboard", ImGuiConfigFlags_NoKeyboard, "Instruct dear imgui to disable keyboard inputs and interactions. This is done by ignoring keyboard events and clearing existing states.")
            .value("docking_enable", ImGuiConfigFlags_DockingEnable, "Docking enable flags.")
            .value("viewports_enable", ImGuiConfigFlags_ViewportsEnable, "Viewport enable flags (require both ImGuiBackendFlags_PlatformHasViewports + ImGuiBackendFlags_RendererHasViewports set by the respective backends)")
            .value("dpi_enable_scale_viewports", ImGuiConfigFlags_DpiEnableScaleViewports, "[BETA: Don't use] FIXME-DPI: Reposition and resize imgui windows when the DpiScale of a viewport changed (mostly useful for the main viewport hosting other window). Note that resizing the main window itself is up to your application.")
            .value("dpi_enable_scale_fonts", ImGuiConfigFlags_DpiEnableScaleFonts, "[BETA: Don't use] FIXME-DPI: Request bitmap-scaled fonts to match DpiScale. This is a very low-quality workaround. The correct way to handle DPI is _currently_ to replace the atlas and/or fonts in the Platform_OnChangedViewport callback, but this is all early work in progress.")
            .value("is_srgb", ImGuiConfigFlags_IsSRGB, "Application is SRGB-aware.")
            .value("is_touch_screen", ImGuiConfigFlags_IsTouchScreen, "Application is using a touch screen instead of a mouse.");


    auto pyEnumBackendFlags_ =
        nb::enum_<ImGuiBackendFlags_>(m, "BackendFlags_", nb::is_arithmetic(), "Backend capabilities flags stored in io.BackendFlags. Set by imgui_impl_xxx or custom backend.")
            .value("none", ImGuiBackendFlags_None, "")
            .value("has_gamepad", ImGuiBackendFlags_HasGamepad, "Backend Platform supports gamepad and currently has one connected.")
            .value("has_mouse_cursors", ImGuiBackendFlags_HasMouseCursors, "Backend Platform supports honoring GetMouseCursor() value to change the OS cursor shape.")
            .value("has_set_mouse_pos", ImGuiBackendFlags_HasSetMousePos, "Backend Platform supports io.WantSetMousePos requests to reposition the OS mouse position (only used if io.ConfigNavMoveSetMousePos is set).")
            .value("renderer_has_vtx_offset", ImGuiBackendFlags_RendererHasVtxOffset, "Backend Renderer supports ImDrawCmd::VtxOffset. This enables output of large meshes (64K+ vertices) while still using 16-bit indices.")
            .value("platform_has_viewports", ImGuiBackendFlags_PlatformHasViewports, "Backend Platform supports multiple viewports.")
            .value("has_mouse_hovered_viewport", ImGuiBackendFlags_HasMouseHoveredViewport, "Backend Platform supports calling io.AddMouseViewportEvent() with the viewport under the mouse. IF POSSIBLE, ignore viewports with the ImGuiViewportFlags_NoInputs flag (Win32 backend, GLFW 3.30+ backend can do this, SDL backend cannot). If this cannot be done, Dear ImGui needs to use a flawed heuristic to find the viewport under.")
            .value("renderer_has_viewports", ImGuiBackendFlags_RendererHasViewports, "Backend Renderer supports multiple viewports.");


    auto pyEnumCol_ =
        nb::enum_<ImGuiCol_>(m, "Col_", nb::is_arithmetic(), "Enumeration for PushStyleColor() / PopStyleColor()")
            .value("text", ImGuiCol_Text, "")
            .value("text_disabled", ImGuiCol_TextDisabled, "")
            .value("window_bg", ImGuiCol_WindowBg, "Background of normal windows")
            .value("child_bg", ImGuiCol_ChildBg, "Background of child windows")
            .value("popup_bg", ImGuiCol_PopupBg, "Background of popups, menus, tooltips windows")
            .value("border", ImGuiCol_Border, "")
            .value("border_shadow", ImGuiCol_BorderShadow, "")
            .value("frame_bg", ImGuiCol_FrameBg, "Background of checkbox, radio button, plot, slider, text input")
            .value("frame_bg_hovered", ImGuiCol_FrameBgHovered, "")
            .value("frame_bg_active", ImGuiCol_FrameBgActive, "")
            .value("title_bg", ImGuiCol_TitleBg, "Title bar")
            .value("title_bg_active", ImGuiCol_TitleBgActive, "Title bar when focused")
            .value("title_bg_collapsed", ImGuiCol_TitleBgCollapsed, "Title bar when collapsed")
            .value("menu_bar_bg", ImGuiCol_MenuBarBg, "")
            .value("scrollbar_bg", ImGuiCol_ScrollbarBg, "")
            .value("scrollbar_grab", ImGuiCol_ScrollbarGrab, "")
            .value("scrollbar_grab_hovered", ImGuiCol_ScrollbarGrabHovered, "")
            .value("scrollbar_grab_active", ImGuiCol_ScrollbarGrabActive, "")
            .value("check_mark", ImGuiCol_CheckMark, "Checkbox tick and RadioButton circle")
            .value("slider_grab", ImGuiCol_SliderGrab, "")
            .value("slider_grab_active", ImGuiCol_SliderGrabActive, "")
            .value("button", ImGuiCol_Button, "")
            .value("button_hovered", ImGuiCol_ButtonHovered, "")
            .value("button_active", ImGuiCol_ButtonActive, "")
            .value("header", ImGuiCol_Header, "Header* colors are used for CollapsingHeader, TreeNode, Selectable, MenuItem")
            .value("header_hovered", ImGuiCol_HeaderHovered, "")
            .value("header_active", ImGuiCol_HeaderActive, "")
            .value("separator", ImGuiCol_Separator, "")
            .value("separator_hovered", ImGuiCol_SeparatorHovered, "")
            .value("separator_active", ImGuiCol_SeparatorActive, "")
            .value("resize_grip", ImGuiCol_ResizeGrip, "Resize grip in lower-right and lower-left corners of windows.")
            .value("resize_grip_hovered", ImGuiCol_ResizeGripHovered, "")
            .value("resize_grip_active", ImGuiCol_ResizeGripActive, "")
            .value("tab_hovered", ImGuiCol_TabHovered, "Tab background, when hovered")
            .value("tab", ImGuiCol_Tab, "Tab background, when tab-bar is focused & tab is unselected")
            .value("tab_selected", ImGuiCol_TabSelected, "Tab background, when tab-bar is focused & tab is selected")
            .value("tab_selected_overline", ImGuiCol_TabSelectedOverline, "Tab horizontal overline, when tab-bar is focused & tab is selected")
            .value("tab_dimmed", ImGuiCol_TabDimmed, "Tab background, when tab-bar is unfocused & tab is unselected")
            .value("tab_dimmed_selected", ImGuiCol_TabDimmedSelected, "Tab background, when tab-bar is unfocused & tab is selected")
            .value("tab_dimmed_selected_overline", ImGuiCol_TabDimmedSelectedOverline, "..horizontal overline, when tab-bar is unfocused & tab is selected")
            .value("docking_preview", ImGuiCol_DockingPreview, "Preview overlay color when about to docking something")
            .value("docking_empty_bg", ImGuiCol_DockingEmptyBg, "Background color for empty node (e.g. CentralNode with no window docked into it)")
            .value("plot_lines", ImGuiCol_PlotLines, "")
            .value("plot_lines_hovered", ImGuiCol_PlotLinesHovered, "")
            .value("plot_histogram", ImGuiCol_PlotHistogram, "")
            .value("plot_histogram_hovered", ImGuiCol_PlotHistogramHovered, "")
            .value("table_header_bg", ImGuiCol_TableHeaderBg, "Table header background")
            .value("table_border_strong", ImGuiCol_TableBorderStrong, "Table outer and header borders (prefer using Alpha=1.0 here)")
            .value("table_border_light", ImGuiCol_TableBorderLight, "Table inner borders (prefer using Alpha=1.0 here)")
            .value("table_row_bg", ImGuiCol_TableRowBg, "Table row background (even rows)")
            .value("table_row_bg_alt", ImGuiCol_TableRowBgAlt, "Table row background (odd rows)")
            .value("text_link", ImGuiCol_TextLink, "Hyperlink color")
            .value("text_selected_bg", ImGuiCol_TextSelectedBg, "")
            .value("drag_drop_target", ImGuiCol_DragDropTarget, "Rectangle highlighting a drop target")
            .value("nav_cursor", ImGuiCol_NavCursor, "Color of keyboard/gamepad navigation cursor/rectangle, when visible")
            .value("nav_windowing_highlight", ImGuiCol_NavWindowingHighlight, "Highlight window when using CTRL+TAB")
            .value("nav_windowing_dim_bg", ImGuiCol_NavWindowingDimBg, "Darken/colorize entire screen behind the CTRL+TAB window list, when active")
            .value("modal_window_dim_bg", ImGuiCol_ModalWindowDimBg, "Darken/colorize entire screen behind a modal window, when one is active")
            .value("count", ImGuiCol_COUNT, "");


    auto pyEnumStyleVar_ =
        nb::enum_<ImGuiStyleVar_>(m, "StyleVar_", nb::is_arithmetic(), " Enumeration for PushStyleVar() / PopStyleVar() to temporarily modify the ImGuiStyle structure.\n - The enum only refers to fields of ImGuiStyle which makes sense to be pushed/popped inside UI code.\n   During initialization or between frames, feel free to just poke into ImGuiStyle directly.\n - Tip: Use your programming IDE navigation facilities on the names in the _second column_ below to find the actual members and their description.\n   - In Visual Studio: CTRL+comma (\"Edit.GoToAll\") can follow symbols inside comments, whereas CTRL+F12 (\"Edit.GoToImplementation\") cannot.\n   - In Visual Studio w/ Visual Assist installed: ALT+G (\"VAssistX.GoToImplementation\") can also follow symbols inside comments.\n   - In VS Code, CLion, etc.: CTRL+click can follow symbols inside comments.\n - When changing this enum, you need to update the associated internal table GStyleVarInfo[] accordingly. This is where we link enum values to members offset/type.")
            .value("alpha", ImGuiStyleVar_Alpha, "float     Alpha")
            .value("disabled_alpha", ImGuiStyleVar_DisabledAlpha, "float     DisabledAlpha")
            .value("window_padding", ImGuiStyleVar_WindowPadding, "ImVec2    WindowPadding")
            .value("window_rounding", ImGuiStyleVar_WindowRounding, "float     WindowRounding")
            .value("window_border_size", ImGuiStyleVar_WindowBorderSize, "float     WindowBorderSize")
            .value("window_min_size", ImGuiStyleVar_WindowMinSize, "ImVec2    WindowMinSize")
            .value("window_title_align", ImGuiStyleVar_WindowTitleAlign, "ImVec2    WindowTitleAlign")
            .value("child_rounding", ImGuiStyleVar_ChildRounding, "float     ChildRounding")
            .value("child_border_size", ImGuiStyleVar_ChildBorderSize, "float     ChildBorderSize")
            .value("popup_rounding", ImGuiStyleVar_PopupRounding, "float     PopupRounding")
            .value("popup_border_size", ImGuiStyleVar_PopupBorderSize, "float     PopupBorderSize")
            .value("frame_padding", ImGuiStyleVar_FramePadding, "ImVec2    FramePadding")
            .value("frame_rounding", ImGuiStyleVar_FrameRounding, "float     FrameRounding")
            .value("frame_border_size", ImGuiStyleVar_FrameBorderSize, "float     FrameBorderSize")
            .value("item_spacing", ImGuiStyleVar_ItemSpacing, "ImVec2    ItemSpacing")
            .value("item_inner_spacing", ImGuiStyleVar_ItemInnerSpacing, "ImVec2    ItemInnerSpacing")
            .value("indent_spacing", ImGuiStyleVar_IndentSpacing, "float     IndentSpacing")
            .value("cell_padding", ImGuiStyleVar_CellPadding, "ImVec2    CellPadding")
            .value("scrollbar_size", ImGuiStyleVar_ScrollbarSize, "float     ScrollbarSize")
            .value("scrollbar_rounding", ImGuiStyleVar_ScrollbarRounding, "float     ScrollbarRounding")
            .value("grab_min_size", ImGuiStyleVar_GrabMinSize, "float     GrabMinSize")
            .value("grab_rounding", ImGuiStyleVar_GrabRounding, "float     GrabRounding")
            .value("layout_align", ImGuiStyleVar_LayoutAlign, "float     LayoutAlign")
            .value("tab_rounding", ImGuiStyleVar_TabRounding, "float     TabRounding")
            .value("tab_border_size", ImGuiStyleVar_TabBorderSize, "float     TabBorderSize")
            .value("tab_bar_border_size", ImGuiStyleVar_TabBarBorderSize, "float     TabBarBorderSize")
            .value("tab_bar_overline_size", ImGuiStyleVar_TabBarOverlineSize, "float     TabBarOverlineSize")
            .value("table_angled_headers_angle", ImGuiStyleVar_TableAngledHeadersAngle, "float     TableAngledHeadersAngle")
            .value("table_angled_headers_text_align", ImGuiStyleVar_TableAngledHeadersTextAlign, "ImVec2  TableAngledHeadersTextAlign")
            .value("button_text_align", ImGuiStyleVar_ButtonTextAlign, "ImVec2    ButtonTextAlign")
            .value("selectable_text_align", ImGuiStyleVar_SelectableTextAlign, "ImVec2    SelectableTextAlign")
            .value("separator_text_border_size", ImGuiStyleVar_SeparatorTextBorderSize, "float     SeparatorTextBorderSize")
            .value("separator_text_align", ImGuiStyleVar_SeparatorTextAlign, "ImVec2    SeparatorTextAlign")
            .value("separator_text_padding", ImGuiStyleVar_SeparatorTextPadding, "ImVec2    SeparatorTextPadding")
            .value("docking_separator_size", ImGuiStyleVar_DockingSeparatorSize, "float     DockingSeparatorSize")
            .value("count", ImGuiStyleVar_COUNT, "");


    auto pyEnumButtonFlags_ =
        nb::enum_<ImGuiButtonFlags_>(m, "ButtonFlags_", nb::is_arithmetic(), "Flags for InvisibleButton() [extended in imgui_internal.h]")
            .value("none", ImGuiButtonFlags_None, "")
            .value("mouse_button_left", ImGuiButtonFlags_MouseButtonLeft, "React on left mouse button (default)")
            .value("mouse_button_right", ImGuiButtonFlags_MouseButtonRight, "React on right mouse button")
            .value("mouse_button_middle", ImGuiButtonFlags_MouseButtonMiddle, "React on center mouse button")
            .value("mouse_button_mask_", ImGuiButtonFlags_MouseButtonMask_, "[Internal]")
            .value("enable_nav", ImGuiButtonFlags_EnableNav, "InvisibleButton(): do not disable navigation/tabbing. Otherwise disabled by default.");


    auto pyEnumColorEditFlags_ =
        nb::enum_<ImGuiColorEditFlags_>(m, "ColorEditFlags_", nb::is_arithmetic(), "Flags for ColorEdit3() / ColorEdit4() / ColorPicker3() / ColorPicker4() / ColorButton()")
            .value("none", ImGuiColorEditFlags_None, "")
            .value("no_alpha", ImGuiColorEditFlags_NoAlpha, "// ColorEdit, ColorPicker, ColorButton: ignore Alpha component (will only read 3 components from the input pointer).")
            .value("no_picker", ImGuiColorEditFlags_NoPicker, "// ColorEdit: disable picker when clicking on color square.")
            .value("no_options", ImGuiColorEditFlags_NoOptions, "// ColorEdit: disable toggling options menu when right-clicking on inputs/small preview.")
            .value("no_small_preview", ImGuiColorEditFlags_NoSmallPreview, "// ColorEdit, ColorPicker: disable color square preview next to the inputs. (e.g. to show only the inputs)")
            .value("no_inputs", ImGuiColorEditFlags_NoInputs, "// ColorEdit, ColorPicker: disable inputs sliders/text widgets (e.g. to show only the small preview color square).")
            .value("no_tooltip", ImGuiColorEditFlags_NoTooltip, "// ColorEdit, ColorPicker, ColorButton: disable tooltip when hovering the preview.")
            .value("no_label", ImGuiColorEditFlags_NoLabel, "// ColorEdit, ColorPicker: disable display of inline text label (the label is still forwarded to the tooltip and picker).")
            .value("no_side_preview", ImGuiColorEditFlags_NoSidePreview, "// ColorPicker: disable bigger color preview on right side of the picker, use small color square preview instead.")
            .value("no_drag_drop", ImGuiColorEditFlags_NoDragDrop, "// ColorEdit: disable drag and drop target. ColorButton: disable drag and drop source.")
            .value("no_border", ImGuiColorEditFlags_NoBorder, "// ColorButton: disable border (which is enforced by default)")
            .value("alpha_bar", ImGuiColorEditFlags_AlphaBar, "// ColorEdit, ColorPicker: show vertical alpha bar/gradient in picker.")
            .value("alpha_preview", ImGuiColorEditFlags_AlphaPreview, "// ColorEdit, ColorPicker, ColorButton: display preview as a transparent color over a checkerboard, instead of opaque.")
            .value("alpha_preview_half", ImGuiColorEditFlags_AlphaPreviewHalf, "// ColorEdit, ColorPicker, ColorButton: display half opaque / half checkerboard, instead of opaque.")
            .value("hdr", ImGuiColorEditFlags_HDR, "// (WIP) ColorEdit: Currently only disable 0.0..1.0 limits in RGBA edition (note: you probably want to use ImGuiColorEditFlags_Float flag as well).")
            .value("display_rgb", ImGuiColorEditFlags_DisplayRGB, "[Display]    // ColorEdit: override _display_ type among RGB/HSV/Hex. ColorPicker: select any combination using one or more of RGB/HSV/Hex.")
            .value("display_hsv", ImGuiColorEditFlags_DisplayHSV, "[Display]    // \"")
            .value("display_hex", ImGuiColorEditFlags_DisplayHex, "[Display]    // \"")
            .value("uint8", ImGuiColorEditFlags_Uint8, "[DataType]   // ColorEdit, ColorPicker, ColorButton: _display_ values formatted as 0..255.")
            .value("float", ImGuiColorEditFlags_Float, "[DataType]   // ColorEdit, ColorPicker, ColorButton: _display_ values formatted as 0.0..1.0 floats instead of 0..255 integers. No round-trip of value via integers.")
            .value("picker_hue_bar", ImGuiColorEditFlags_PickerHueBar, "[Picker]     // ColorPicker: bar for Hue, rectangle for Sat/Value.")
            .value("picker_hue_wheel", ImGuiColorEditFlags_PickerHueWheel, "[Picker]     // ColorPicker: wheel for Hue, triangle for Sat/Value.")
            .value("input_rgb", ImGuiColorEditFlags_InputRGB, "[Input]      // ColorEdit, ColorPicker: input and output data in RGB format.")
            .value("input_hsv", ImGuiColorEditFlags_InputHSV, "[Input]      // ColorEdit, ColorPicker: input and output data in HSV format.")
            .value("default_options_", ImGuiColorEditFlags_DefaultOptions_, " Defaults Options. You can set application defaults using SetColorEditOptions(). The intent is that you probably don't want to\n override them in most of your calls. Let the user choose via the option menu and/or call SetColorEditOptions() once during startup.")
            .value("display_mask_", ImGuiColorEditFlags_DisplayMask_, "")
            .value("data_type_mask_", ImGuiColorEditFlags_DataTypeMask_, "")
            .value("picker_mask_", ImGuiColorEditFlags_PickerMask_, "")
            .value("input_mask_", ImGuiColorEditFlags_InputMask_, "");


    auto pyEnumSliderFlags_ =
        nb::enum_<ImGuiSliderFlags_>(m, "SliderFlags_", nb::is_arithmetic(), " Flags for DragFloat(), DragInt(), SliderFloat(), SliderInt() etc.\n We use the same sets of flags for DragXXX() and SliderXXX() functions as the features are the same and it makes it easier to swap them.\n (Those are per-item flags. There is shared behavior flag too: ImGuiIO: io.ConfigDragClickToInputText)")
            .value("none", ImGuiSliderFlags_None, "")
            .value("logarithmic", ImGuiSliderFlags_Logarithmic, "Make the widget logarithmic (linear otherwise). Consider using ImGuiSliderFlags_NoRoundToFormat with this if using a format-string with small amount of digits.")
            .value("no_round_to_format", ImGuiSliderFlags_NoRoundToFormat, "Disable rounding underlying value to match precision of the display format string (e.g. %.3 values are rounded to those 3 digits).")
            .value("no_input", ImGuiSliderFlags_NoInput, "Disable CTRL+Click or Enter key allowing to input text directly into the widget.")
            .value("wrap_around", ImGuiSliderFlags_WrapAround, "Enable wrapping around from max to min and from min to max. Only supported by DragXXX() functions for now.")
            .value("clamp_on_input", ImGuiSliderFlags_ClampOnInput, "Clamp value to min/max bounds when input manually with CTRL+Click. By default CTRL+Click allows going out of bounds.")
            .value("clamp_zero_range", ImGuiSliderFlags_ClampZeroRange, "Clamp even if min==max==0.0. Otherwise due to legacy reason DragXXX functions don't clamp with those values. When your clamping limits are dynamic you almost always want to use it.")
            .value("always_clamp", ImGuiSliderFlags_AlwaysClamp, "")
            .value("invalid_mask_", ImGuiSliderFlags_InvalidMask_, "[Internal] We treat using those bits as being potentially a 'float power' argument from the previous API that has got miscast to this enum, and will trigger an assert if needed.");


    auto pyEnumMouseButton_ =
        nb::enum_<ImGuiMouseButton_>(m, "MouseButton_", nb::is_arithmetic(), " Identify a mouse button.\n Those values are guaranteed to be stable and we frequently use 0/1 directly. Named enums provided for convenience.")
            .value("left", ImGuiMouseButton_Left, "")
            .value("right", ImGuiMouseButton_Right, "")
            .value("middle", ImGuiMouseButton_Middle, "")
            .value("count", ImGuiMouseButton_COUNT, "");


    auto pyEnumMouseCursor_ =
        nb::enum_<ImGuiMouseCursor_>(m, "MouseCursor_", nb::is_arithmetic(), " Enumeration for GetMouseCursor()\n User code may request backend to display given cursor by calling SetMouseCursor(), which is why we have some cursors that are marked unused here")
            .value("none", ImGuiMouseCursor_None, "")
            .value("arrow", ImGuiMouseCursor_Arrow, "")
            .value("text_input", ImGuiMouseCursor_TextInput, "When hovering over InputText, etc.")
            .value("resize_all", ImGuiMouseCursor_ResizeAll, "(Unused by Dear ImGui functions)")
            .value("resize_ns", ImGuiMouseCursor_ResizeNS, "When hovering over a horizontal border")
            .value("resize_ew", ImGuiMouseCursor_ResizeEW, "When hovering over a vertical border or a column")
            .value("resize_nesw", ImGuiMouseCursor_ResizeNESW, "When hovering over the bottom-left corner of a window")
            .value("resize_nwse", ImGuiMouseCursor_ResizeNWSE, "When hovering over the bottom-right corner of a window")
            .value("hand", ImGuiMouseCursor_Hand, "(Unused by Dear ImGui functions. Use for e.g. hyperlinks)")
            .value("not_allowed", ImGuiMouseCursor_NotAllowed, "When hovering something with disallowed interaction. Usually a crossed circle.")
            .value("count", ImGuiMouseCursor_COUNT, "");


    auto pyEnumMouseSource =
        nb::enum_<ImGuiMouseSource>(m, "MouseSource", nb::is_arithmetic(), " Enumeration for AddMouseSourceEvent() actual source of Mouse Input data.\n Historically we use \"Mouse\" terminology everywhere to indicate pointer data, e.g. MousePos, IsMousePressed(), io.AddMousePosEvent()\n But that \"Mouse\" data can come from different source which occasionally may be useful for application to know about.\n You can submit a change of pointer type using io.AddMouseSourceEvent().")
            .value("mouse", ImGuiMouseSource_Mouse, "Input is coming from an actual mouse.")
            .value("touch_screen", ImGuiMouseSource_TouchScreen, "Input is coming from a touch screen (no hovering prior to initial press, less precise initial press aiming, dual-axis wheeling possible).")
            .value("pen", ImGuiMouseSource_Pen, "Input is coming from a pressure/magnetic pen (often used in conjunction with high-sampling rates).")
            .value("count", ImGuiMouseSource_COUNT, "");


    auto pyEnumCond_ =
        nb::enum_<ImGuiCond_>(m, "Cond_", nb::is_arithmetic(), " Enumeration for ImGui::SetNextWindow***(), SetWindow***(), SetNextItem***() functions\n Represent a condition.\n Important: Treat as a regular enum! Do NOT combine multiple values using binary operators! All the functions above treat 0 as a shortcut to ImGuiCond_Always.")
            .value("none", ImGuiCond_None, "No condition (always set the variable), same as _Always")
            .value("always", ImGuiCond_Always, "No condition (always set the variable), same as _None")
            .value("once", ImGuiCond_Once, "Set the variable once per runtime session (only the first call will succeed)")
            .value("first_use_ever", ImGuiCond_FirstUseEver, "Set the variable if the object/window has no persistently saved data (no entry in .ini file)")
            .value("appearing", ImGuiCond_Appearing, "Set the variable if the object/window is appearing after being hidden/inactive (or the first time)");


    auto pyEnumTableFlags_ =
        nb::enum_<ImGuiTableFlags_>(m, "TableFlags_", nb::is_arithmetic(), " Flags for ImGui::BeginTable()\n - Important! Sizing policies have complex and subtle side effects, much more so than you would expect.\n   Read comments/demos carefully + experiment with live demos to get acquainted with them.\n - The DEFAULT sizing policies are:\n    - Default to ImGuiTableFlags_SizingFixedFit    if ScrollX is on, or if host window has ImGuiWindowFlags_AlwaysAutoResize.\n    - Default to ImGuiTableFlags_SizingStretchSame if ScrollX is off.\n - When ScrollX is off:\n    - Table defaults to ImGuiTableFlags_SizingStretchSame -> all Columns defaults to ImGuiTableColumnFlags_WidthStretch with same weight.\n    - Columns sizing policy allowed: Stretch (default), Fixed/Auto.\n    - Fixed Columns (if any) will generally obtain their requested width (unless the table cannot fit them all).\n    - Stretch Columns will share the remaining width according to their respective weight.\n    - Mixed Fixed/Stretch columns is possible but has various side-effects on resizing behaviors.\n      The typical use of mixing sizing policies is: any number of LEADING Fixed columns, followed by one or two TRAILING Stretch columns.\n      (this is because the visible order of columns have subtle but necessary effects on how they react to manual resizing).\n - When ScrollX is on:\n    - Table defaults to ImGuiTableFlags_SizingFixedFit -> all Columns defaults to ImGuiTableColumnFlags_WidthFixed\n    - Columns sizing policy allowed: Fixed/Auto mostly.\n    - Fixed Columns can be enlarged as needed. Table will show a horizontal scrollbar if needed.\n    - When using auto-resizing (non-resizable) fixed columns, querying the content width to use item right-alignment e.g. SetNextItemWidth(-FLT_MIN) doesn't make sense, would create a feedback loop.\n    - Using Stretch columns OFTEN DOES NOT MAKE SENSE if ScrollX is on, UNLESS you have specified a value for 'inner_width' in BeginTable().\n      If you specify a value for 'inner_width' then effectively the scrolling space is known and Stretch or mixed Fixed/Stretch columns become meaningful again.\n - Read on documentation at the top of imgui_tables.cpp for details.")
            .value("none", ImGuiTableFlags_None, "")
            .value("resizable", ImGuiTableFlags_Resizable, "Enable resizing columns.")
            .value("reorderable", ImGuiTableFlags_Reorderable, "Enable reordering columns in header row (need calling TableSetupColumn() + TableHeadersRow() to display headers)")
            .value("hideable", ImGuiTableFlags_Hideable, "Enable hiding/disabling columns in context menu.")
            .value("sortable", ImGuiTableFlags_Sortable, "Enable sorting. Call TableGetSortSpecs() to obtain sort specs. Also see ImGuiTableFlags_SortMulti and ImGuiTableFlags_SortTristate.")
            .value("no_saved_settings", ImGuiTableFlags_NoSavedSettings, "Disable persisting columns order, width and sort settings in the .ini file.")
            .value("context_menu_in_body", ImGuiTableFlags_ContextMenuInBody, "Right-click on columns body/contents will display table context menu. By default it is available in TableHeadersRow().")
            .value("row_bg", ImGuiTableFlags_RowBg, "Set each RowBg color with ImGuiCol_TableRowBg or ImGuiCol_TableRowBgAlt (equivalent of calling TableSetBgColor with ImGuiTableBgFlags_RowBg0 on each row manually)")
            .value("borders_inner_h", ImGuiTableFlags_BordersInnerH, "Draw horizontal borders between rows.")
            .value("borders_outer_h", ImGuiTableFlags_BordersOuterH, "Draw horizontal borders at the top and bottom.")
            .value("borders_inner_v", ImGuiTableFlags_BordersInnerV, "Draw vertical borders between columns.")
            .value("borders_outer_v", ImGuiTableFlags_BordersOuterV, "Draw vertical borders on the left and right sides.")
            .value("borders_h", ImGuiTableFlags_BordersH, "Draw horizontal borders.")
            .value("borders_v", ImGuiTableFlags_BordersV, "Draw vertical borders.")
            .value("borders_inner", ImGuiTableFlags_BordersInner, "Draw inner borders.")
            .value("borders_outer", ImGuiTableFlags_BordersOuter, "Draw outer borders.")
            .value("borders", ImGuiTableFlags_Borders, "Draw all borders.")
            .value("no_borders_in_body", ImGuiTableFlags_NoBordersInBody, "[ALPHA] Disable vertical borders in columns Body (borders will always appear in Headers). -> May move to style")
            .value("no_borders_in_body_until_resize", ImGuiTableFlags_NoBordersInBodyUntilResize, "[ALPHA] Disable vertical borders in columns Body until hovered for resize (borders will always appear in Headers). -> May move to style")
            .value("sizing_fixed_fit", ImGuiTableFlags_SizingFixedFit, "Columns default to _WidthFixed or _WidthAuto (if resizable or not resizable), matching contents width.")
            .value("sizing_fixed_same", ImGuiTableFlags_SizingFixedSame, "Columns default to _WidthFixed or _WidthAuto (if resizable or not resizable), matching the maximum contents width of all columns. Implicitly enable ImGuiTableFlags_NoKeepColumnsVisible.")
            .value("sizing_stretch_prop", ImGuiTableFlags_SizingStretchProp, "Columns default to _WidthStretch with default weights proportional to each columns contents widths.")
            .value("sizing_stretch_same", ImGuiTableFlags_SizingStretchSame, "Columns default to _WidthStretch with default weights all equal, unless overridden by TableSetupColumn().")
            .value("no_host_extend_x", ImGuiTableFlags_NoHostExtendX, "Make outer width auto-fit to columns, overriding outer_size.x value. Only available when ScrollX/ScrollY are disabled and Stretch columns are not used.")
            .value("no_host_extend_y", ImGuiTableFlags_NoHostExtendY, "Make outer height stop exactly at outer_size.y (prevent auto-extending table past the limit). Only available when ScrollX/ScrollY are disabled. Data below the limit will be clipped and not visible.")
            .value("no_keep_columns_visible", ImGuiTableFlags_NoKeepColumnsVisible, "Disable keeping column always minimally visible when ScrollX is off and table gets too small. Not recommended if columns are resizable.")
            .value("precise_widths", ImGuiTableFlags_PreciseWidths, "Disable distributing remainder width to stretched columns (width allocation on a 100-wide table with 3 columns: Without this flag: 33,33,34. With this flag: 33,33,33). With larger number of columns, resizing will appear to be less smooth.")
            .value("no_clip", ImGuiTableFlags_NoClip, "Disable clipping rectangle for every individual columns (reduce draw command count, items will be able to overflow into other columns). Generally incompatible with TableSetupScrollFreeze().")
            .value("pad_outer_x", ImGuiTableFlags_PadOuterX, "Default if BordersOuterV is on. Enable outermost padding. Generally desirable if you have headers.")
            .value("no_pad_outer_x", ImGuiTableFlags_NoPadOuterX, "Default if BordersOuterV is off. Disable outermost padding.")
            .value("no_pad_inner_x", ImGuiTableFlags_NoPadInnerX, "Disable inner padding between columns (double inner padding if BordersOuterV is on, single inner padding if BordersOuterV is off).")
            .value("scroll_x", ImGuiTableFlags_ScrollX, "Enable horizontal scrolling. Require 'outer_size' parameter of BeginTable() to specify the container size. Changes default sizing policy. Because this creates a child window, ScrollY is currently generally recommended when using ScrollX.")
            .value("scroll_y", ImGuiTableFlags_ScrollY, "Enable vertical scrolling. Require 'outer_size' parameter of BeginTable() to specify the container size.")
            .value("sort_multi", ImGuiTableFlags_SortMulti, "Hold shift when clicking headers to sort on multiple column. TableGetSortSpecs() may return specs where (SpecsCount > 1).")
            .value("sort_tristate", ImGuiTableFlags_SortTristate, "Allow no sorting, disable default sorting. TableGetSortSpecs() may return specs where (SpecsCount == 0).")
            .value("highlight_hovered_column", ImGuiTableFlags_HighlightHoveredColumn, "Highlight column headers when hovered (may evolve into a fuller highlight)")
            .value("sizing_mask_", ImGuiTableFlags_SizingMask_, "[Internal] Combinations and masks");


    auto pyEnumTableColumnFlags_ =
        nb::enum_<ImGuiTableColumnFlags_>(m, "TableColumnFlags_", nb::is_arithmetic(), "Flags for ImGui::TableSetupColumn()")
            .value("none", ImGuiTableColumnFlags_None, "")
            .value("disabled", ImGuiTableColumnFlags_Disabled, "Overriding/master disable flag: hide column, won't show in context menu (unlike calling TableSetColumnEnabled() which manipulates the user accessible state)")
            .value("default_hide", ImGuiTableColumnFlags_DefaultHide, "Default as a hidden/disabled column.")
            .value("default_sort", ImGuiTableColumnFlags_DefaultSort, "Default as a sorting column.")
            .value("width_stretch", ImGuiTableColumnFlags_WidthStretch, "Column will stretch. Preferable with horizontal scrolling disabled (default if table sizing policy is _SizingStretchSame or _SizingStretchProp).")
            .value("width_fixed", ImGuiTableColumnFlags_WidthFixed, "Column will not stretch. Preferable with horizontal scrolling enabled (default if table sizing policy is _SizingFixedFit and table is resizable).")
            .value("no_resize", ImGuiTableColumnFlags_NoResize, "Disable manual resizing.")
            .value("no_reorder", ImGuiTableColumnFlags_NoReorder, "Disable manual reordering this column, this will also prevent other columns from crossing over this column.")
            .value("no_hide", ImGuiTableColumnFlags_NoHide, "Disable ability to hide/disable this column.")
            .value("no_clip", ImGuiTableColumnFlags_NoClip, "Disable clipping for this column (all NoClip columns will render in a same draw command).")
            .value("no_sort", ImGuiTableColumnFlags_NoSort, "Disable ability to sort on this field (even if ImGuiTableFlags_Sortable is set on the table).")
            .value("no_sort_ascending", ImGuiTableColumnFlags_NoSortAscending, "Disable ability to sort in the ascending direction.")
            .value("no_sort_descending", ImGuiTableColumnFlags_NoSortDescending, "Disable ability to sort in the descending direction.")
            .value("no_header_label", ImGuiTableColumnFlags_NoHeaderLabel, "TableHeadersRow() will submit an empty label for this column. Convenient for some small columns. Name will still appear in context menu or in angled headers. You may append into this cell by calling TableSetColumnIndex() right after the TableHeadersRow() call.")
            .value("no_header_width", ImGuiTableColumnFlags_NoHeaderWidth, "Disable header text width contribution to automatic column width.")
            .value("prefer_sort_ascending", ImGuiTableColumnFlags_PreferSortAscending, "Make the initial sort direction Ascending when first sorting on this column (default).")
            .value("prefer_sort_descending", ImGuiTableColumnFlags_PreferSortDescending, "Make the initial sort direction Descending when first sorting on this column.")
            .value("indent_enable", ImGuiTableColumnFlags_IndentEnable, "Use current Indent value when entering cell (default for column 0).")
            .value("indent_disable", ImGuiTableColumnFlags_IndentDisable, "Ignore current Indent value when entering cell (default for columns > 0). Indentation changes _within_ the cell will still be honored.")
            .value("angled_header", ImGuiTableColumnFlags_AngledHeader, "TableHeadersRow() will submit an angled header row for this column. Note this will add an extra row.")
            .value("is_enabled", ImGuiTableColumnFlags_IsEnabled, "Status: is enabled == not hidden by user/api (referred to as \"Hide\" in _DefaultHide and _NoHide) flags.")
            .value("is_visible", ImGuiTableColumnFlags_IsVisible, "Status: is visible == is enabled AND not clipped by scrolling.")
            .value("is_sorted", ImGuiTableColumnFlags_IsSorted, "Status: is currently part of the sort specs")
            .value("is_hovered", ImGuiTableColumnFlags_IsHovered, "Status: is hovered by mouse")
            .value("width_mask_", ImGuiTableColumnFlags_WidthMask_, "")
            .value("indent_mask_", ImGuiTableColumnFlags_IndentMask_, "")
            .value("status_mask_", ImGuiTableColumnFlags_StatusMask_, "")
            .value("no_direct_resize_", ImGuiTableColumnFlags_NoDirectResize_, "[Internal] Disable user resizing this column directly (it may however we resized indirectly from its left edge)");


    auto pyEnumTableRowFlags_ =
        nb::enum_<ImGuiTableRowFlags_>(m, "TableRowFlags_", nb::is_arithmetic(), "Flags for ImGui::TableNextRow()")
            .value("none", ImGuiTableRowFlags_None, "")
            .value("headers", ImGuiTableRowFlags_Headers, "Identify header row (set default background color + width of its contents accounted differently for auto column width)");


    auto pyEnumTableBgTarget_ =
        nb::enum_<ImGuiTableBgTarget_>(m, "TableBgTarget_", nb::is_arithmetic(), " Enum for ImGui::TableSetBgColor()\n Background colors are rendering in 3 layers:\n  - Layer 0: draw with RowBg0 color if set, otherwise draw with ColumnBg0 if set.\n  - Layer 1: draw with RowBg1 color if set, otherwise draw with ColumnBg1 if set.\n  - Layer 2: draw with CellBg color if set.\n The purpose of the two row/columns layers is to let you decide if a background color change should override or blend with the existing color.\n When using ImGuiTableFlags_RowBg on the table, each row has the RowBg0 color automatically set for odd/even rows.\n If you set the color of RowBg0 target, your color will override the existing RowBg0 color.\n If you set the color of RowBg1 or ColumnBg1 target, your color will blend over the RowBg0 color.")
            .value("none", ImGuiTableBgTarget_None, "")
            .value("row_bg0", ImGuiTableBgTarget_RowBg0, "Set row background color 0 (generally used for background, automatically set when ImGuiTableFlags_RowBg is used)")
            .value("row_bg1", ImGuiTableBgTarget_RowBg1, "Set row background color 1 (generally used for selection marking)")
            .value("cell_bg", ImGuiTableBgTarget_CellBg, "Set cell background color (top-most color)");


    auto pyClassImGuiTableSortSpecs =
        nb::class_<ImGuiTableSortSpecs>
            (m, "TableSortSpecs", " Sorting specifications for a table (often handling sort specs for a single column, occasionally more)\n Obtained by calling TableGetSortSpecs().\n When 'SpecsDirty == True' you can sort your data. It will be True with sorting specs have changed since last call, or the first time.\n Make sure to set 'SpecsDirty = False' after sorting, else you may wastefully sort your data every frame!")
        .def_ro("specs", &ImGuiTableSortSpecs::Specs, "Pointer to sort spec array.")
        .def_rw("specs_count", &ImGuiTableSortSpecs::SpecsCount, "Sort spec count. Most often 1. May be > 1 when ImGuiTableFlags_SortMulti is enabled. May be == 0 when ImGuiTableFlags_SortTristate is enabled.")
        .def_rw("specs_dirty", &ImGuiTableSortSpecs::SpecsDirty, "Set to True when specs have changed since last time! Use this to sort again, then clear the flag.")
        .def(nb::init<>())
        // #ifdef IMGUI_BUNDLE_PYTHON_API
        //
        .def("get_specs",
            &ImGuiTableSortSpecs::GetSpecs,
            nb::arg("idx"),
            nb::rv_policy::reference)
        // #endif
        //
        ;


    auto pyClassImGuiTableColumnSortSpecs =
        nb::class_<ImGuiTableColumnSortSpecs>
            (m, "TableColumnSortSpecs", "Sorting specification for one column of a table (sizeof == 12 bytes)")
        .def_rw("column_user_id", &ImGuiTableColumnSortSpecs::ColumnUserID, "User id of the column (if specified by a TableSetupColumn() call)")
        .def_rw("column_index", &ImGuiTableColumnSortSpecs::ColumnIndex, "Index of the column")
        .def_rw("sort_order", &ImGuiTableColumnSortSpecs::SortOrder, "Index within parent ImGuiTableSortSpecs (always stored in order starting from 0, tables sorted on a single criteria will always have a 0 here)")
        .def_rw("sort_direction", &ImGuiTableColumnSortSpecs::SortDirection, "ImGuiSortDirection_Ascending or ImGuiSortDirection_Descending")
        .def(nb::init<>())
        // #ifdef IMGUI_BUNDLE_PYTHON_API
        //
        .def("get_sort_direction",
            &ImGuiTableColumnSortSpecs::GetSortDirection)
        .def("set_sort_direction",
            &ImGuiTableColumnSortSpecs::SetSortDirection, nb::arg("direction"))
        // #endif
        //
        ;


    auto pyClassImNewWrapper =
        nb::class_<ImNewWrapper>
            (m, "ImNewWrapper", "")
        .def(nb::init<>()) // implicit default constructor
        ;

    // ****************************************************************************************************************
    //
    //             MANUAL PATCHES BELOW
    //
    // ****************************************************************************************************************

    // FLT_MIN & FLT_MAX
    m.attr("FLT_MIN") = (float)FLT_MIN;
    m.attr("FLT_MAX") = (float)FLT_MAX;

    //
    //  Patches to ImVec2
    //
    auto cast_to_imvec2 = [](nb::handle obj) -> ImVec2
    {
        if (len(obj) != 2)
            throw std::invalid_argument("Python tuple/list/array to imgui.ImVec2: size should be 2!");
        auto floats = nb::cast<std::vector<float>>(obj);
        return ImVec2(floats[0], floats[1]);
    };
    pyClassImVec2.def("__str__", [](const ImVec2& self) -> std::string {
        char r[100];
        snprintf(r, 100, "ImVec2(%f, %f)", self.x, self.y);
        return r;
    });
    pyClassImVec2.def("__repr__", [](const ImVec2& self) -> std::string {
        char r[100];
        snprintf(r, 100, "ImVec2(%f, %f)", self.x, self.y);
        return r;
    });
    pyClassImVec2.def("__len__", [](const ImVec2& self) -> size_t {
        return 2;
    });
    pyClassImVec2.def("__iter__", [](const ImVec2& self) {
                          return nb::make_iterator(nb::type<ImVec2>(), "iterator", &self.x, &self.x+2);
                      },
                      nb::keep_alive<0, 1>() /* Essential: keep object alive while iterator exists */
    );

    pyClassImVec2.def("__init__", [cast_to_imvec2](ImVec2 *self, nb::tuple t) {
        new (self) ImVec2();
        *self = cast_to_imvec2(t);
    });
    pyClassImVec2.def("__init__", [cast_to_imvec2](ImVec2 *self, nb::list l) {
        new (self) ImVec2();
        *self = cast_to_imvec2(l);
    });
//    pyClassImVec2.def("__init__", [](ImVec2 *self, nb::ndarray<> a) {
//        new (self) ImVec2();
//        *self = cast_to_imvec2(a);
//    });


    nb::implicitly_convertible<nb::tuple, ImVec2>();
    nb::implicitly_convertible<nb::list, ImVec2>();
    //nb::implicitly_convertible<nb::array, ImVec2>();

    pyClassImVec2.def("__init__", [](ImVec2 *self, ImVec2 imv) {
        new (self) ImVec2();
        *self = ImVec2(imv.x, imv.y);
    });


    //
    // Add math operators to ImVec2
    //
    pyClassImVec2.def("__eq__", [](const ImVec2& self, const ImVec2& other) -> bool {
        return self.x == other.x && self.y == other.y;
    });
    pyClassImVec2.def("__ne__", [](const ImVec2& self, const ImVec2& other) -> bool {
        return self.x != other.x || self.y != other.y;
    });
    pyClassImVec2.def("__add__", [](const ImVec2& self, const ImVec2& other) -> ImVec2 {
        return ImVec2(self.x + other.x, self.y + other.y);
    });
    pyClassImVec2.def("__sub__", [](const ImVec2& self, const ImVec2& other) -> ImVec2 {
        return ImVec2(self.x - other.x, self.y - other.y);
    });
    pyClassImVec2.def("__mul__", [](const ImVec2& self, float other) -> ImVec2 {
        return ImVec2(self.x * other, self.y * other);
    });
    pyClassImVec2.def("__truediv__", [](const ImVec2& self, float other) -> ImVec2 {
        return ImVec2(self.x / other, self.y / other);
    });
    pyClassImVec2.def("__mul__", [](const ImVec2& self, const ImVec2& other) -> ImVec2 {
        return ImVec2(self.x * other.x, self.y * other.y);
    });
    pyClassImVec2.def("__truediv__", [](const ImVec2& self, const ImVec2& other) -> ImVec2 {
        return ImVec2(self.x / other.x, self.y / other.y);
    });
    // operator *=, +=, -=, /=
    pyClassImVec2.def("__imul__", [](ImVec2& self, float other) -> ImVec2& {
        self.x *= other;
        self.y *= other;
        return self;
    });
    pyClassImVec2.def("__itruediv__", [](ImVec2& self, float other) -> ImVec2& {
        self.x /= other;
        self.y /= other;
        return self;
    });
    pyClassImVec2.def("__imul__", [](ImVec2& self, const ImVec2& other) -> ImVec2& {
        self.x *= other.x;
        self.y *= other.y;
        return self;
    });
    pyClassImVec2.def("__itruediv__", [](ImVec2& self, const ImVec2& other) -> ImVec2& {
        self.x /= other.x;
        self.y /= other.y;
        return self;
    });
    pyClassImVec2.def("__iadd__", [](ImVec2& self, const ImVec2& other) -> ImVec2& {
        self.x += other.x;
        self.y += other.y;
        return self;
    });
    pyClassImVec2.def("__isub__", [](ImVec2& self, const ImVec2& other) -> ImVec2& {
        self.x -= other.x;
        self.y -= other.y;
        return self;
    });
    // unary operators
    pyClassImVec2.def("__neg__", [](const ImVec2& self) -> ImVec2 {
        return ImVec2(-self.x, -self.y);
    });

    // Pickle support
    pyClassImVec2.def("__getstate__", [](const ImVec2 &v) {
        return nb::make_tuple(v.x, v.y);
    });
    pyClassImVec2.def("__setstate__", [](ImVec2 &self, nb::tuple t) {
        new(&self) ImVec2();
        if (t.size() != 2)
            throw std::runtime_error("ImVec2 unpickling failed");
        ImVec2 r(nb::cast<float>(t[0]), nb::cast<float>(t[1]));
        self = r;
    });

    //
    //  Patches to ImVec4
    //
    auto cast_to_imvec4 = [](nb::handle obj) -> ImVec4
    {
        if (len(obj) != 4)
            throw std::invalid_argument("Python tuple/list/array to imgui.ImVec4: size should be 4!");
        auto floats = nb::cast<std::vector<float>>(obj);
        return ImVec4(floats[0], floats[1], floats[2], floats[3]);
    };
    pyClassImVec4.def("__str__", [](const ImVec4& self) -> std::string {
        char r[100];
        snprintf(r, 100, "ImVec4(%f, %f, %f, %f)", self.x, self.y, self.z, self.w);
        return r;
    });
    pyClassImVec4.def("__repr__", [](const ImVec4& self) -> std::string {
        char r[100];
        snprintf(r, 100, "ImVec4(%f, %f, %f, %f)", self.x, self.y, self.z, self.w);
        return r;
    });
    pyClassImVec4.def("__getitem__", [](const ImVec4& self, size_t idx) -> float {
        if (idx >= 4)
            throw nb::index_error();
        switch (idx)
        {
            case 0:
                return self.x;
            case 1:
                return self.y;
            case 2:
                return self.z;
            case 3:
                return self.w;
            default:
                // unreachable, but makes clang happy
                // (warning: non-void lambda does not return a value in all control paths [-Wreturn-type])
                return 0.f;
        }
    });
    pyClassImVec4.def("__len__", [](const ImVec4& self) -> size_t {
        return 4;
    });
    pyClassImVec4.def("__iter__", [](const ImVec4& self) {
                          return nb::make_iterator(nb::type<ImVec4>(), "iterator", &self.x, &self.x+4);
                      },
                      nb::keep_alive<0, 1>() /* Essential: keep object alive while iterator exists */
    );
    pyClassImVec4.def("__init__", [cast_to_imvec4](ImVec4 *self, nb::tuple t) {
        new (self) ImVec4();
        *self = cast_to_imvec4(t);
    });
    pyClassImVec4.def("__init__", [cast_to_imvec4](ImVec4 *self, nb::list l) {
        new (self) ImVec4();
        *self = cast_to_imvec4(l);
    });
//    pyClassImVec4.def("__init__", [](ImVec4 *self, nb::ndarray<> a) {
//        new (self) ImVec4();
//        *self = cast_to_imvec4(a);
//    });

    nb::implicitly_convertible<nb::tuple, ImVec4>();
    nb::implicitly_convertible<nb::list, ImVec4>();
    //nb::implicitly_convertible<nb::array, ImVec4>();

    pyClassImVec4.def("__init__", [](ImVec4 *self, ImVec4 imv) {
        new (self) ImVec4();
        *self = ImVec4(imv.x, imv.y, imv.z, imv.w);
    }, nb::arg("xyzw"));

    //
    // Add math operators to ImVec4
    //
    pyClassImVec4.def("__eq__", [](const ImVec4& self, const ImVec4& other) -> bool {
        return self.x == other.x && self.y == other.y && self.z == other.z && self.w == other.w;
    });
    pyClassImVec4.def("__ne__", [](const ImVec4& self, const ImVec4& other) -> bool {
        return self.x != other.x || self.y != other.y || self.z != other.z || self.w != other.w;
    });
    pyClassImVec4.def("__add__", [](const ImVec4& self, const ImVec4& other) -> ImVec4 {
        return ImVec4(self.x + other.x, self.y + other.y, self.z + other.z, self.w + other.w);
    });
    pyClassImVec4.def("__sub__", [](const ImVec4& self, const ImVec4& other) -> ImVec4 {
        return ImVec4(self.x - other.x, self.y - other.y, self.z - other.z, self.w - other.w);
    });
    pyClassImVec4.def("__mul__", [](const ImVec4& self, float other) -> ImVec4 {
        return ImVec4(self.x * other, self.y * other, self.z * other, self.w * other);
    });
    pyClassImVec4.def("__truediv__", [](const ImVec4& self, float other) -> ImVec4 {
        return ImVec4(self.x / other, self.y / other, self.z / other, self.w / other);
    });
    pyClassImVec4.def("__mul__", [](const ImVec4& self, const ImVec4& other) -> ImVec4 {
        return ImVec4(self.x * other.x, self.y * other.y, self.z * other.z, self.w * other.w);
    });
    pyClassImVec4.def("__truediv__", [](const ImVec4& self, const ImVec4& other) -> ImVec4 {
        return ImVec4(self.x / other.x, self.y / other.y, self.z / other.z, self.w / other.w);
    });
    // operator *=, +=, -=, /=
    pyClassImVec4.def("__imul__", [](ImVec4& self, float other) -> ImVec4& {
        self.x *= other;
        self.y *= other;
        self.z *= other;
        self.w *= other;
        return self;
    });
    pyClassImVec4.def("__itruediv__", [](ImVec4& self, float other) -> ImVec4& {
        self.x /= other;
        self.y /= other;
        self.z /= other;
        self.w /= other;
        return self;
    });
    pyClassImVec4.def("__imul__", [](ImVec4& self, const ImVec4& other) -> ImVec4& {
        self.x *= other.x;
        self.y *= other.y;
        self.z *= other.z;
        self.w *= other.w;
        return self;
    });
    pyClassImVec4.def("__itruediv__", [](ImVec4& self, const ImVec4& other) -> ImVec4& {
        self.x /= other.x;
        self.y /= other.y;
        self.z /= other.z;
        self.w /= other.w;
        return self;
    });
    pyClassImVec4.def("__iadd__", [](ImVec4& self, const ImVec4& other) -> ImVec4& {
        self.x += other.x;
        self.y += other.y;
        self.z += other.z;
        self.w += other.w;
        return self;
    });
    pyClassImVec4.def("__isub__", [](ImVec4& self, const ImVec4& other) -> ImVec4& {
        self.x -= other.x;
        self.y -= other.y;
        self.z -= other.z;
        self.w -= other.w;
        return self;
    });
    // unary operators
    pyClassImVec4.def("__neg__", [](const ImVec4& self) -> ImVec4 {
        return ImVec4(-self.x, -self.y, -self.z, -self.w);
    });

    // Pickle support
    pyClassImVec4.def("__getstate__", [](const ImVec4 &v) {
        return nb::make_tuple(v.x, v.y, v.z, v.w);
    });
    pyClassImVec4.def("__setstate__", [](ImVec4 &self, nb::tuple t) {
        new(&self) ImVec2();
        if (t.size() != 4)
            throw std::runtime_error("ImVec4 unpickling failed");
        ImVec4 r(nb::cast<float>(t[0]), nb::cast<float>(t[1]), nb::cast<float>(t[2]), nb::cast<float>(t[3]));
        self = r;
    });


    //
    //  Other patches
    //

    // VERTEX_SIZE, VERTEX_BUFFER_POS_OFFSET, VERTEX_BUFFER_UV_OFFSET, etc.
    // Utilities to facilitate rendering in python backends: they provide buffer offsets info
    //
    //    def _py_vertex_buffer_vertex_size():
    //    return sizeof(cimgui.ImDrawVert)
    m.attr("VERTEX_SIZE") = sizeof(ImDrawVert);
    //    def _py_vertex_buffer_vertex_pos_offset():
    //    return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).pos
    ImDrawVert* nullDrawVert = NULL;
    m.attr("VERTEX_BUFFER_POS_OFFSET") = (uintptr_t)(size_t) (& (nullDrawVert->pos));
    //    def _py_vertex_buffer_vertex_uv_offset():
    //    return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).uv
    m.attr("VERTEX_BUFFER_UV_OFFSET") = (uintptr_t)(size_t) (& (nullDrawVert->uv));
    //    def _py_vertex_buffer_vertex_col_offset():
    //    return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).col
    m.attr("VERTEX_BUFFER_COL_OFFSET") = (uintptr_t)(size_t) (& (nullDrawVert->col));
    //    def _py_index_buffer_index_size():
    //    return sizeof(cimgui.ImDrawIdx)
    m.attr("INDEX_SIZE") = sizeof(ImDrawIdx);


    m.def("IM_COL32", [](int r, int g, int b, int a){
        return IM_COL32(r, g, b, a);
    });

    // API for imgui_demo
    // ------------------
    // Forward declarations of imgui_demo.cpp API
    void SetImGuiDemoWindowPos(ImVec2 pos, ImVec2 size, ImGuiCond cond);
    void SetImGuiDemoCodeWindowPos(ImVec2 pos, ImVec2 size, ImGuiCond cond);
    void ImGuiDemoSetShowPythonCode(bool showPythonCode);
    extern bool GImGuiDemoMarker_IsActive;
    // Expose imgui_demo.cpp API
    m.def("set_imgui_demo_window_pos", SetImGuiDemoWindowPos);
    m.def("set_imgui_demo_code_window_pos", SetImGuiDemoCodeWindowPos);
    m.def("set_imgui_demo_marker_is_active", [](bool b) { GImGuiDemoMarker_IsActive = b; });
    m.def("get_imgui_demo_marker_is_active", []() { return GImGuiDemoMarker_IsActive; });
    m.def("set_imgui_demo_show_python_code", ImGuiDemoSetShowPythonCode);

}
