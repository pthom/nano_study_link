cmake_minimum_required(VERSION 3.19)
project(nano_study_link LANGUAGES CXX)
set(CMAKE_CXX_STANDARD 17)

# Compile options
# Define STUDY_XXX either from environment variables or from CMake options
# ============================================================================

# Build pybind11 bindings
option(STUDY_PYBIND11 "Build pybind11 bindings" OFF)
if (DEFINED ENV{STUDY_PYBIND11} AND "$ENV{STUDY_PYBIND11}" STREQUAL "ON")
    set(STUDY_PYBIND11 ON)
endif()

# Disable optimizations
option(STUDY_OPTIM_DISABLED "Disable optimizations (/Og)" OFF)
if (DEFINED ENV{STUDY_OPTIM_DISABLED} AND "$ENV{STUDY_OPTIM_DISABLED}" STREQUAL "ON")
    set(STUDY_OPTIM_DISABLED ON)
endif()

# Optimize for size /Os (nanobind default)
option(STUDY_OPTIM_SIZE "Optimize for size (/Os)" OFF)
if (DEFINED ENV{STUDY_OPTIM_SIZE} AND "$ENV{STUDY_OPTIM_SIZE}" STREQUAL "ON")
    set(STUDY_OPTIM_SIZE ON)
endif()

# Optimize /O1
option(STUDY_OPTIM_O1 "Optimize O1 (/O1) - close to /Os" OFF)
if (DEFINED ENV{STUDY_OPTIM_O1} AND "$ENV{STUDY_OPTIM_O1}" STREQUAL "ON")
    set(STUDY_OPTIM_O1 ON)
endif()

# Optimize /O2
option(STUDY_OPTIM_O2 "Optimize O2 (/O2)" OFF)
if (DEFINED ENV{STUDY_OPTIM_O2} AND "$ENV{STUDY_OPTIM_O2}" STREQUAL "ON")
set(STUDY_OPTIM_O2 ON)
endif()

# Optimize O3 on *nixes
option(STUDY_OPTIM_O3 "Optimize O3 (-O3)" OFF)
if (DEFINED ENV{STUDY_OPTIM_O3} AND "$ENV{STUDY_OPTIM_O3}" STREQUAL "ON")
    set(STUDY_OPTIM_O3 ON)
endif()

# Options / which part to build: select between
# - part1: build only nanobind_imgui_master.cpp + nanobind_imgui_part1.cpp
# - part2: build only nanobind_imgui_master.cpp + nanobind_imgui_part2.cpp
# - parts: build nanobind_imgui_master.cpp + nanobind_imgui_part1.cpp + nanobind_imgui_part2.cpp and link them together
# - full: build nanobind_imgui_master.cpp + nanobind_imgui.cpp (full version)
option(STUDY_BUILD_PARTS "Build type (Release, Debug, MinSizeRel, RelWithDebInfo)" "Release")
if (DEFINED ENV{STUDY_BUILD_PARTS})
    set(STUDY_BUILD_PARTS $ENV{STUDY_BUILD_PARTS})
endif()
# Shout if not defined
if (NOT STUDY_BUILD_PARTS)
    message(FATAL_ERROR "STUDY_BUILD_PARTS is not defined")
endif()


# Global flag
if (UNIX)
    add_compile_options(-fPIC)
endif()


# Add imgui library (a custom version, from imgui bundle, very close to the original)
add_library(imgui STATIC
    imgui/imgui.cpp imgui/imgui_draw.cpp imgui/imgui_widgets.cpp imgui/imgui_demo.cpp imgui/imgui_tables.cpp
    imgui/imgui_stacklayout.cpp
)
target_compile_definitions(imgui PUBLIC IMGUI_BUNDLE_PYTHON_API)
target_include_directories(imgui PUBLIC imgui)


# From https://nanobind.readthedocs.io/en/latest/building.html
macro(setup_nanobind)
    if (CMAKE_VERSION VERSION_LESS 3.18)
        set(DEV_MODULE Development)
    else()
        set(DEV_MODULE Development.Module)
    endif()
    find_package(Python 3.8 COMPONENTS Interpreter ${DEV_MODULE} REQUIRED)

    if (NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
        set(CMAKE_BUILD_TYPE Release CACHE STRING "Choose the type of build." FORCE)
        set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS "Debug" "Release" "MinSizeRel" "RelWithDebInfo")
    endif()
    add_subdirectory(nanobind)
endmacro()


# Build bindings, either pybind11 or nanobind
# (Note: pybind11_imgui.cpp and pybind11_nanobind.cpp are auto-generated by litgen)
if (STUDY_PYBIND11)
    message(STATUS "Building pybind11 bindings")
    message(STATUS "====================================")
    add_subdirectory(pybind11)
    pybind11_add_module(pybind11_imgui pybind11_imgui.cpp)
    target_link_libraries(pybind11_imgui PRIVATE imgui)
else()
    message(STATUS "Building nanobind bindings")
    message(STATUS "====================================")
    setup_nanobind()

    #    nanobind_add_module(nanobind_imgui nanobind_imgui.cpp)
    # nanobind_add_module(nanobind_imgui nanobind_imgui_master.cpp nanobind_imgui_part1.cpp nanobind_imgui_part2.cpp)

    if (STUDY_BUILD_PARTS STREQUAL "part1")
        nanobind_add_module(nanobind_imgui nanobind_imgui_master.cpp nanobind_imgui_part1.cpp)
        target_compile_definitions(nanobind_imgui PRIVATE STUDY_BUILD_PARTS_PART1)
    elseif (STUDY_BUILD_PARTS STREQUAL "part2")
        nanobind_add_module(nanobind_imgui nanobind_imgui_master.cpp nanobind_imgui_part2.cpp)
        target_compile_definitions(nanobind_imgui PRIVATE STUDY_BUILD_PARTS_PART2)
    elseif (STUDY_BUILD_PARTS STREQUAL "part3")
        nanobind_add_module(nanobind_imgui nanobind_imgui_master.cpp nanobind_imgui_part3.cpp)
        target_compile_definitions(nanobind_imgui PRIVATE STUDY_BUILD_PARTS_PART3)
    elseif (STUDY_BUILD_PARTS STREQUAL "part4")
        nanobind_add_module(nanobind_imgui nanobind_imgui_master.cpp nanobind_imgui_part4.cpp)
        target_compile_definitions(nanobind_imgui PRIVATE STUDY_BUILD_PARTS_PART4)
    elseif (STUDY_BUILD_PARTS STREQUAL "parts")
        nanobind_add_module(nanobind_imgui nanobind_imgui_master.cpp nanobind_imgui_part1.cpp nanobind_imgui_part2.cpp nanobind_imgui_part3.cpp nanobind_imgui_part4.cpp)
        target_compile_definitions(nanobind_imgui PRIVATE STUDY_BUILD_PARTS_PART1 STUDY_BUILD_PARTS_PART2 STUDY_BUILD_PARTS_PART3 STUDY_BUILD_PARTS_PART4)
    elseif (STUDY_BUILD_PARTS STREQUAL "joined")
        nanobind_add_module(nanobind_imgui nanobind_imgui_joined.cpp)
    else()
        nanobind_add_module(nanobind_imgui nanobind_imgui.cpp)
    endif()
    message(STATUS "STUDY_BUILD_PARTS: ${STUDY_BUILD_PARTS}")
    message(STATUS "=============================================")

    target_link_libraries(nanobind_imgui PRIVATE imgui)

    if (STUDY_OPTIM_DISABLED)
        message(STATUS "Disabling optimizations /Od")
        message(STATUS "====================================")
         target_compile_options(nanobind_imgui PRIVATE $<$<CONFIG:Release>:/Od>)
    endif()
    if (STUDY_OPTIM_SIZE)
        message(STATUS "Optimizing for size /Os")
        message(STATUS "====================================")
         target_compile_options(nanobind_imgui PRIVATE $<$<CONFIG:Release>:/Os>)
    endif()
    if (STUDY_OPTIM_O1)
        message(STATUS "Optimizing O1 /O1")
        message(STATUS "====================================")
         target_compile_options(nanobind_imgui PRIVATE $<$<CONFIG:Release>:/O1>)
    endif()
    if (STUDY_OPTIM_O2)
        message(STATUS "Optimizing O2 /O2")
        message(STATUS "====================================")
        target_compile_options(nanobind_imgui PRIVATE $<$<CONFIG:Release>:/O2>)
    endif()
    if (STUDY_OPTIM_O3)
        message(STATUS "Optimizing O3 -O3")
        message(STATUS "====================================")
        target_compile_options(nanobind_imgui PRIVATE $<$<CONFIG:Release>:-O3>)
    endif()
endif()
